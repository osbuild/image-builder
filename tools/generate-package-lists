#!/usr/bin/env python3

import argparse
import copy
import json
import tempfile
import os
import subprocess
import sys
import time
import requests

PROJECT_ROOT=os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
DISTRIBUTION_DIR=os.path.join(PROJECT_ROOT, 'distributions')
DNF_JSON=os.path.join(PROJECT_ROOT, "dnf-json")
# List of archs to look for in the distro files
SUPPORTED_ARCHS = [ 'x86_64' ]

def main():
    parser = argparse.ArgumentParser(description='Generate package list for distributions')
    parser.add_argument('--distro', action='append', default=[], help='A json distribution file')
    parser.add_argument('--key', help='Key to use for the repos in the distribution (rhel)')
    parser.add_argument('--cert', help='Cert to use for the repos in the distribution (rhel)')
    args = parser.parse_args()

    tempdir = tempfile.TemporaryDirectory()

    dnfjson_args_template = {
        'command': 'dump'
    }

    r = requests.get("https://raw.githubusercontent.com/osbuild/osbuild-composer/main/dnf-json")
    with open(DNF_JSON, 'w') as f:
        f.write(r.text)
    os.chmod(DNF_JSON, 0o755)

    for distro in args.distro:
        distro_data = {}
        with open(distro) as f:
            distro_data = json.load(f)
        # make sure it's not empty
        print('Calling dnf-json for ', distro_data['distribution'])

        for arch in SUPPORTED_ARCHS:
            dnfjson_args = dnfjson_args_template.copy()

            repos = distro_data[arch]['repositories']
            if args.key:
                repos = []
                for repo in distro_data[arch]['repositories']:
                    repo['ignoressl'] = True
                    repo['sslclientkey'] = args.key
                    repo['sslclientcert'] = args.cert
                    repos.append(repo)
            dnfjson_args['arguments'] = {
                'module_platform_id': distro_data['module_platform_id'],
                'repos': repos,
                'cachedir': tempdir.name,
                'arch': arch,
                'latest': True,
            }

            # assign an ID to each repo
            for i in range(len(dnfjson_args['arguments']['repos'])):
                dnfjson_args['arguments']['repos'][i]['id'] = f"repo{i}"

            p = subprocess.Popen(DNF_JSON, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
            out, err = p.communicate(json.dumps(dnfjson_args).encode('utf-8'))

            pkgs = [ {"name": p["name"], "summary": p["summary"]} for p in json.loads(out)['packages'] ]
            filtered = []
            [ filtered.append(p) for p in pkgs if p["name"] not in list(map(lambda p: p["name"], filtered)) ]
            filtered.sort(key=lambda p: p["name"].lower())

            outfile = os.path.join(DISTRIBUTION_DIR, '%s-%s-packages.json' % (distro_data['distribution']['name'], arch))
            with open(outfile, 'w+') as f:
                json.dump({ 'data': filtered }, f, indent=2)

    return 0

if __name__ == '__main__':
    sys.exit(main())
