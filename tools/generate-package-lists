#!/usr/bin/env python3

import argparse
import json
import tempfile
import docker
import os
import sys
import time
import requests

PROJECT_ROOT=os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
DISTRIBUTION_DIR=os.path.join(PROJECT_ROOT, 'distributions')
DNF_JSON=os.path.join(PROJECT_ROOT, "dnf-json")
# List of archs to look for in the distro files
SUPPORTED_ARCHS = [ 'x86_64' ]

def main():
    parser = argparse.ArgumentParser(description='Generate package list for distributions')
    parser.add_argument('--distro', action='append', default=[], help='A json distribution file')
    parser.add_argument('--key', help='Key to use for the repos in the distribution (rhel)')
    parser.add_argument('--cert', help='Cert to use for the repos in the distribution (rhel)')
    args = parser.parse_args()

    tempdir = tempfile.TemporaryDirectory()

    dnfjson_args_template = {
        'command': 'dump'
    }

    dc = docker.from_env()
    mounts=[]
    if args.key:
        mounts.append(docker.types.Mount('/etc/pki/entitlement', '/etc/pki/entitlement', read_only=True, type='bind'))
    dnfc = dc.containers.run('quay.io/app-sre/composer:f0522e7', # v46 composer
                             name='dnf-json',
                             privileged=True,
                             ports={'8088/tcp': '8088'},
                             mounts=mounts,
                             entrypoint=['python3', '/opt/entrypoint.py', '--dnf-json', '--dnf-json-port', '8088'],
                             detach=True)
    # arbitrary sleep until container is up
    time.sleep(1)

    try:
        for distro in args.distro:
            distro_data = {}
            with open(distro) as f:
                distro_data = json.load(f)
            # make sure it's not empty
            print('Calling dnf-json for ', distro_data['distribution'])

            visited_repo_ids = []

            for arch in SUPPORTED_ARCHS:
                dnfjson_args = dnfjson_args_template.copy()

                repos = distro_data[arch]['repositories']
                dnfjson_args['arguments'] = {
                    'module_platform_id': distro_data['module_platform_id'],
                    'cachedir': tempdir.name,
                    'arch': arch,
                    'latest': True,
                }

                for repo in distro_data[arch]['repositories']:
                    if repo['id'] in visited_repo_ids:
                        continue
                    visited_repo_ids.append(repo['id'])

                    if repo['rhsm']:
                        repo['ignoressl'] = True
                        repo['sslclientkey'] = args.key
                        repo['sslclientcert'] = args.cert
                    if 'image_type_tags' in repo:
                        repo.pop('image_type_tags')
                    dnfjson_args['arguments']['repos'] = [repo]

                    resp = requests.post("http://127.0.0.1:8088", data=json.dumps(dnfjson_args))
                    pkgs = [ {"name": p["name"], "summary": p["summary"]} for p in resp.json()['packages'] ]
                    filtered = []
                    [ filtered.append(p) for p in pkgs if p["name"] not in list(map(lambda p: p["name"], filtered)) ]
                    filtered.sort(key=lambda p: p["name"].lower())

                    outfile = os.path.join(DISTRIBUTION_DIR, distro_data['distribution']['name'],
                                        '%s-%s-%s-packages.json' % (distro_data['distribution']['name'], arch, repo['id']))
                    with open(outfile, 'w+') as f:
                        json.dump(filtered, f, indent=2)
                        f.write('\n')
    finally:
        dnfc.kill()
        dnfc.remove()

    return 0

if __name__ == '__main__':
    sys.exit(main())
