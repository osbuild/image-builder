apiVersion: v1
kind: Template
labels:
  app: image-builder
  template: image-builder
metadata:
  annotations:
    description: Backend service for image-builder in console.redhat.com
  name: image-builder
objects:

# Deploy the image-builder container.
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      service: image-builder
    name: image-builder
  spec:
    replicas: 3
    selector:
      matchLabels:
        name: image-builder
    strategy:
      # Update pods 1 at a time
      type: RollingUpdate
      rollingUpdate:
        # Create at most 1 extra pod over .spec.replicas
        maxSurge: 1
        # At all times there should be .spec.replicas available
        maxUnavailable: 0
    template:
      metadata:
        labels:
          name: image-builder
      spec:
        serviceAccountName: image-builder
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    name: image-builder
                topologyKey: kubernetes.io/hostname
        containers:
        - image: "${IMAGE_NAME}:${IMAGE_TAG}"
          name: image-builder
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: ${LIVENESS_URI}
              port: 8086
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: ${READINESS_URI}
              port: 8086
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10 # The readiness probe is pinging osbuild-composer
          resources:
            requests:
              cpu: "${CPU_REQUEST}"
              memory: "${MEMORY_REQUEST}"
            limits:
              cpu: "${CPU_LIMIT}"
              memory: "${MEMORY_LIMIT}"
          ports:
          - name: api
            containerPort: 8086
            protocol: TCP
          volumeMounts:
            - name: config-volume
              mountPath: /app/config
          env:
            - name: LISTEN_ADDRESS
              value: "${LISTEN_ADDRESS}"
            # Credentials/configuration for AWS RDS.
            - name: PGHOST
              valueFrom:
                secretKeyRef:
                  name: image-builder-db
                  key: db.host
            - name: PGPORT
              valueFrom:
                secretKeyRef:
                  name: image-builder-db
                  key: db.port
            - name: PGDATABASE
              valueFrom:
                secretKeyRef:
                  name: image-builder-db
                  key: db.name
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: image-builder-db
                  key: db.user
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: image-builder-db
                  key: db.password
            - name: PGSSLMODE
              value: "${PGSSLMODE}"
            # Configuration for the osbuild client within image-builder
            - name: COMPOSER_URL
              value: "${COMPOSER_URL}"
            - name: COMPOSER_TOKEN_URL
              value: "${COMPOSER_TOKEN_URL}"
            - name: COMPOSER_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  key: client_id
                  name: composer-secrets
            - name: COMPOSER_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  key: client_secret
                  name: composer-secrets
            # Credentials/configuration for AWS cloudwatch.
            - name: CW_AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: aws_access_key_id
                  name: image-builder-cloudwatch
            - name: CW_AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: aws_secret_access_key
                  name: image-builder-cloudwatch
            - name: CW_LOG_GROUP
              valueFrom:
                secretKeyRef:
                  key: log_group_name
                  name: image-builder-cloudwatch
            - name: CW_AWS_REGION
              valueFrom:
                secretKeyRef:
                  key: aws_region
                  name: image-builder-cloudwatch
            # Secrets used to tell osbuild-composer where to upload images.
            - name: OSBUILD_AWS_REGION
              valueFrom:
                secretKeyRef:
                  key: aws_region
                  name: composer-secrets
            # GCP target specific variables passed to composer
            - name: OSBUILD_GCP_REGION
              value: "${OSBUILD_GCP_REGION}"
            - name: OSBUILD_GCP_BUCKET
              value: "${OSBUILD_GCP_BUCKET}"
            # Azure target specific variables passed to composer
            - name: OSBUILD_AZURE_LOCATION
              value: "${OSBUILD_AZURE_LOCATION}"
            - name: ALLOWED_ORG_IDS
              value: "${ALLOWED_ORG_IDS}"
            - name: ALLOWED_ACCOUNT_NUMBERS
              value: "${ALLOWED_ACCOUNT_NUMBERS}"
            - name: DISTRIBUTIONS_DIR
              value: "${DISTRIBUTIONS_DIR}"
            - name: QUOTA_FILE
              value: "/app/config/org_quotas.json"
            - name: SYSLOG_SERVER
              value: "localhost:5140"

        - image: "quay.io/app-sre/fluentd-hec:1.2.13"
          name: fluentd-sidecar
          resources:
            requests:
              cpu: "${CPU_REQUEST}"
              memory: "${MEMORY_REQUEST}"
            limits:
              cpu: "${CPU_REQUEST}"
              memory: "${MEMORY_LIMIT}"
          env:
            - name: SPLUNK_HEC_TOKEN
              valueFrom:
                secretKeyRef:
                  name: splunk
                  key: token
                  optional: false
            - name: SPLUNK_HEC_URL
              valueFrom:
                secretKeyRef:
                  name: splunk
                  key: url
                  optional: false
          volumeMounts:
            - name: fluentd-config
              mountPath: /fluentd/etc
              readOnly: true
        volumes:
          - name: config-volume
            configMap:
              name: image-builder-crc-quotas
              items:
              - key: quotas.json
                path: org_quotas.json
          - name: fluentd-config
            configMap:
              name: fluentd-config
        initContainers:
        - name: image-builder-migrate
          image: "${IMAGE_NAME}:${IMAGE_TAG}"
          command: [ "/app/image-builder-migrate-db" ]
          resources:
            requests:
              cpu: "${CPU_REQUEST}"
              memory: "${MEMORY_REQUEST}"
            limits:
              cpu: "${CPU_LIMIT}"
              memory: "${MEMORY_LIMIT}"
          env:
          - name: MIGRATIONS_DIR
            value: "${MIGRATIONS_DIR}"
          # Credentials/configuration for AWS RDS.
          - name: PGHOST
            valueFrom:
              secretKeyRef:
                name: image-builder-db
                key: db.host
          - name: PGPORT
            valueFrom:
              secretKeyRef:
                name: image-builder-db
                key: db.port
          - name: PGDATABASE
            valueFrom:
              secretKeyRef:
                name: image-builder-db
                key: db.name
          - name: PGUSER
            valueFrom:
              secretKeyRef:
                name: image-builder-db
                key: db.user
          - name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                name: image-builder-db
                key: db.password
          - name: PGSSLMODE
            value: "${PGSSLMODE}"
          # Credentials/configuration for AWS cloudwatch.
          - name: CW_AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: aws_access_key_id
                name: image-builder-cloudwatch
          - name: CW_AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: aws_secret_access_key
                name: image-builder-cloudwatch
          - name: CW_LOG_GROUP
            valueFrom:
              secretKeyRef:
                key: log_group_name
                name: image-builder-cloudwatch
          - name: CW_AWS_REGION
            valueFrom:
              secretKeyRef:
                key: aws_region
                name: image-builder-cloudwatch

- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: image-builder
  imagePullSecrets:
  - name: quay-cloudservices-pull
  - name: quay.io

# Set up a service within the namespace for the backend.
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      service: image-builder
    name: image-builder
    annotations:
      prometheus.io/path: /metrics
      prometheus.io/scrape: 'true'
  spec:
    ports:
      - name: image-builder
        protocol: TCP
        port: ${{BACKEND_LISTENER_PORT}}
        targetPort: 8086
    selector:
      name: image-builder

- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: fluentd-config
  data:
    fluent.conf: |
      <source>
        @type syslog
        port 5140
        bind 127.0.0.1
        <transport tcp>
        </transport>
        tag image-builder
        <parse>
          time_format %Y-%m-%dT%H:%M:%SZ
        </parse>
      </source>

      <match **>
        @type splunk_hec
        hec_host "#{ENV['SPLUNK_HEC_URL']}"
        hec_port 8088
        hec_token "#{ENV['SPLUNK_HEC_TOKEN']}"
      </match>

# Parameters for the various configurations shown above.
parameters:
  - description: image-builder image name
    name: IMAGE_NAME
    value: quay.io/cloudservices/image-builder
    required: true
  - description: image-builder image tag
    name: IMAGE_TAG
    required: true
  # NOTE(mhayden): This is set to match the ports set up in RHIOPS-953.
  - description: Backend listener port
    name: BACKEND_LISTENER_PORT
    value: "8080"
  - name: LIVENESS_URI
    description: URI to query for the liveness check
    value: "/status"
  - name: READINESS_URI
    description: URI to query for the readiness check
    value: "/ready"
  - name: LISTEN_ADDRESS
    description: Listening address and port
    value: "0.0.0.0:8086"
  - name: COMPOSER_URL
    description: Url to osbuild-composer instance in AWS
    value: ""
  - name: COMPOSER_TOKEN_URL
    description: OpenId token endpoint
    value: "https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token"
  - name: ALLOWED_ORG_IDS
    description: Organization ids allowed to access the api, wildcard means everyone
    value: ""
  - name: ALLOWED_ACCOUNT_NUMBERS
    description: Account numbers allowed to access the api, wildcard means everyone
    value: ""
  - name: DISTRIBUTIONS_DIR
    description: Directory which contains json files detailing available distributions, their repositories, and their packages
    value: "/app/distributions"
  - name: OSBUILD_GCP_REGION
    description: Region in GCP to upload to
    value: "us-east4"
  - name: OSBUILD_GCP_BUCKET
    description: Bucket in GCP to upload to
    value: "image-upload-bkt-us"
  - name: OSBUILD_AZURE_LOCATION
    description: Location in Azure to upload to
    value: "eastus"
  - name: MIGRATIONS_DIR
    description: Directory containing migration files for aws rds
    value: "/app/migrations"
  - name: PGSSLMODE
    description: Sslmode for the connection to psql
    value: "require"
  - name: CPU_REQUEST
    description: CPU request per container
    value: "200m"
  - name: CPU_LIMIT
    description: CPU limit per container
    value: "1"
  - name: MEMORY_REQUEST
    description: Memory request per container
    value: "256Mi"
  - name: MEMORY_LIMIT
    description: Memory limit per container
    value: "512Mi"
