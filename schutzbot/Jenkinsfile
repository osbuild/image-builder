pipeline {
    agent none

    options {
        timestamps()
        ansiColor('xterm')
        // Cancel the pipeline if it runs for more than 30 minutes.
        timeout(
            time: 30,
            unit: "MINUTES"
        )
    }

    stages {
        stage("Prepare ðŸ¤”") {
            agent { label "schutzbot" }
            options {
                // Don't checkout the git repository here. It just clogs
                // up the Jenkins disk space and does nothing for us.
                skipDefaultCheckout()
            }
            steps {
                sh (
                    label: "Get environment variables",
                    script: "env | sort"
                )
            }
        }

        stage("Test EL8 âœ…") {
            environment {
                API_TEST_SUBSCRIPTION_ORG_ID = credentials('api-test-subscription-org-id')
                API_TEST_SUBSCRIPTION_ACTIVATION_KEY = credentials('api-test-subscription-activation-key')
            }
            parallel {
                stage('AWS') {
                    agent { label "rhel8cloudbase && x86_64 && aws" }

                    environment {
                        RHN_REGISTRATION_SCRIPT = credentials('rhn-register-script-production')
                        GITHUB_TOKEN = credentials('github-api-token-secret-text')

                        AWS_REGION = "us-east-2"
                        AWS_BUCKET = "imagebuilder-jenkins-testing-use2"
                        AWS_CREDS = credentials('aws-credentials-osbuildci')
                        AWS_API_TEST_SHARE_ACCOUNT = credentials('aws-credentials-share-account')
                    }

                    steps {
                        run_project_tests('image-builder', 'api.sh', 'aws')
                    }
                }

                stage('GCP') {
                    agent { label "rhel8cloudbase && x86_64 && aws" }

                    environment {
                        RHN_REGISTRATION_SCRIPT = credentials('rhn-register-script-production')
                        GITHUB_TOKEN = credentials('github-api-token-secret-text')

                        GCP_BUCKET = "image-builder-testing"
                        GCP_REGION = "us-east4"
                        GOOGLE_APPLICATION_CREDENTIALS = credentials('gcp-credentials-osbuildci')
                        GCP_API_TEST_SHARE_ACCOUNT = credentials('gcp-credentials-share-account')
                    }

                    steps {
                        run_project_tests('image-builder', 'api.sh', 'gcp')
                    }
                }

                stage('Azure') {
                    agent { label "rhel8cloudbase && x86_64 && aws" }

                    environment {
                        RHN_REGISTRATION_SCRIPT = credentials('rhn-register-script-production')
                        GITHUB_TOKEN = credentials('github-api-token-secret-text')

                        AZURE_TENANT_ID = "1710d22c-ccf0-4421-8ba7-0135cfaecb90"
                        AZURE_SUBSCRIPTION_ID = "8d026bb1-2a65-454d-a88f-c896db94c4f8"
                        AZURE_RESOURCE_GROUP = "sharing-research"
                        AZURE_LOCATION = "eastus"
                        AZURE_CLIENT_ID = credentials('azure-client-id')
                        AZURE_CLIENT_SECRET = credentials('azure-client-secret')
                    }

                    steps {
                        run_project_tests('image-builder', 'api.sh', 'azure')
                    }
                }
            }
        }
    }
}

// Similar to run_tests, but with a more general signature: allows setting the
// project whose -tests package to install, and the name of the test to execute
void run_project_tests(project, test, provider) {
    sh "schutzbot/ci_details.sh"
    sh "schutzbot/build.sh"
    sh "schutzbot/deploy.sh"
    sh "/usr/libexec/tests/${project}/${test} ${provider}"
}
