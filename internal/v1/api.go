// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for Distributions.
const (
	Centos8      Distributions = "centos-8"
	Centos9      Distributions = "centos-9"
	Fedora37     Distributions = "fedora-37"
	Fedora38     Distributions = "fedora-38"
	Fedora39     Distributions = "fedora-39"
	Rhel8        Distributions = "rhel-8"
	Rhel84       Distributions = "rhel-84"
	Rhel85       Distributions = "rhel-85"
	Rhel86       Distributions = "rhel-86"
	Rhel87       Distributions = "rhel-87"
	Rhel88       Distributions = "rhel-88"
	Rhel8Nightly Distributions = "rhel-8-nightly"
	Rhel9        Distributions = "rhel-9"
	Rhel90       Distributions = "rhel-90"
	Rhel91       Distributions = "rhel-91"
	Rhel92       Distributions = "rhel-92"
	Rhel9Nightly Distributions = "rhel-9-nightly"
)

// Defines values for ImageRequestArchitecture.
const (
	Aarch64 ImageRequestArchitecture = "aarch64"
	X8664   ImageRequestArchitecture = "x86_64"
)

// Defines values for ImageStatusStatus.
const (
	ImageStatusStatusBuilding    ImageStatusStatus = "building"
	ImageStatusStatusFailure     ImageStatusStatus = "failure"
	ImageStatusStatusPending     ImageStatusStatus = "pending"
	ImageStatusStatusRegistering ImageStatusStatus = "registering"
	ImageStatusStatusSuccess     ImageStatusStatus = "success"
	ImageStatusStatusUploading   ImageStatusStatus = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAmi               ImageTypes = "ami"
	ImageTypesAws               ImageTypes = "aws"
	ImageTypesAzure             ImageTypes = "azure"
	ImageTypesEdgeCommit        ImageTypes = "edge-commit"
	ImageTypesEdgeInstaller     ImageTypes = "edge-installer"
	ImageTypesGcp               ImageTypes = "gcp"
	ImageTypesGuestImage        ImageTypes = "guest-image"
	ImageTypesImageInstaller    ImageTypes = "image-installer"
	ImageTypesRhelEdgeCommit    ImageTypes = "rhel-edge-commit"
	ImageTypesRhelEdgeInstaller ImageTypes = "rhel-edge-installer"
	ImageTypesVhd               ImageTypes = "vhd"
	ImageTypesVsphere           ImageTypes = "vsphere"
	ImageTypesVsphereOva        ImageTypes = "vsphere-ova"
	ImageTypesWsl               ImageTypes = "wsl"
)

// Defines values for UploadStatusStatus.
const (
	UploadStatusStatusFailure UploadStatusStatus = "failure"
	UploadStatusStatusPending UploadStatusStatus = "pending"
	UploadStatusStatusRunning UploadStatusStatus = "running"
	UploadStatusStatusSuccess UploadStatusStatus = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws   UploadTypes = "aws"
	UploadTypesAwsS3 UploadTypes = "aws.s3"
	UploadTypesAzure UploadTypes = "azure"
	UploadTypesGcp   UploadTypes = "gcp"
)

// AWSEC2Clone defines model for AWSEC2Clone.
type AWSEC2Clone struct {
	// A region as described in
	// https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-regions
	Region string `json:"region"`

	// An array of AWS account IDs as described in
	// https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions = map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`

	// Base repositories for the given distribution and architecture.
	Repositories []Repository `json:"repositories"`
}

// Architectures defines model for Architectures.
type Architectures = []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {
	// Name of the created image.
	// Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens.
	// The total length is limited to 60 characters.
	ImageName *string `json:"image_name,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of the source that will be used to resolve the tenant and subscription IDs.
	// Do not provide a tenant_id or subscription_id when providing a source_id.
	SourceId *string `json:"source_id,omitempty"`

	// ID of subscription where the image should be uploaded.
	// When providing a subscription_id, also be sure to provide a tenant_id and do not include a source_id.
	SubscriptionId *string `json:"subscription_id,omitempty"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	// When providing a tenant_id, also be sure to provide a subscription_id and do not include a source_id.
	TenantId *string `json:"tenant_id,omitempty"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneRequest defines model for CloneRequest.
type CloneRequest interface{}

// CloneResponse defines model for CloneResponse.
type CloneResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ClonesResponse defines model for ClonesResponse.
type ClonesResponse struct {
	Data  []ClonesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ClonesResponseItem defines model for ClonesResponseItem.
type ClonesResponseItem struct {
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Request   interface{}        `json:"request"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations   *Customizations `json:"customizations,omitempty"`
	Distribution     Distributions   `json:"distribution"`
	ImageDescription *string         `json:"image_description,omitempty"`
	ImageName        *string         `json:"image_name,omitempty"`

	// Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus    `json:"image_status"`
	Request     ComposeRequest `json:"request"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	ImageName *string            `json:"image_name,omitempty"`
	Request   interface{}        `json:"request"`
}

// Repository configuration for custom repositories.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above. Id is required.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg *bool     `json:"check_repo_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`

	// GPG key used to sign packages in this repository. Can be a gpg key or a URL
	Gpgkey     *[]string `json:"gpgkey,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`
	Name       *string   `json:"name,omitempty"`
	Priority   *int      `json:"priority,omitempty"`
	SslVerify  *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	CustomRepositories  *[]CustomRepository `json:"custom_repositories,omitempty"`
	Filesystem          *[]Filesystem       `json:"filesystem,omitempty"`
	Openscap            *OpenSCAP           `json:"openscap,omitempty"`
	Packages            *[]string           `json:"packages,omitempty"`
	PayloadRepositories *[]Repository       `json:"payload_repositories,omitempty"`
	Subscription        *Subscription       `json:"subscription,omitempty"`

	// list of users that a customer can add, also specifying their respective groups and SSH keys
	Users *[]User `json:"users,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions string

// DistributionsResponse defines model for DistributionsResponse.
type DistributionsResponse = []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {
	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	// CPU architecture of the image, x86_64 and aarch64 are currently supported.
	Architecture ImageRequestArchitecture `json:"architecture"`
	ImageType    ImageTypes               `json:"image_type"`
	Ostree       *OSTree                  `json:"ostree,omitempty"`

	// Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size          *uint64       `json:"size,omitempty"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// CPU architecture of the image, x86_64 and aarch64 are currently supported.
type ImageRequestArchitecture string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusStatus   `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusStatus defines model for ImageStatus.Status.
type ImageStatusStatus string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	ProfileId string `json:"profile_id"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool   `json:"check_repo_gpg,omitempty"`
	Gpgkey       *string `json:"gpgkey,omitempty"`
	IgnoreSsl    *bool   `json:"ignore_ssl,omitempty"`
	Metalink     *string `json:"metalink,omitempty"`
	Mirrorlist   *string `json:"mirrorlist,omitempty"`
	Rhsm         bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}        `json:"options"`
	Status  UploadStatusStatus `json:"status"`
	Type    UploadTypes        `json:"type"`
}

// UploadStatusStatus defines model for UploadStatus.Status.
type UploadStatusStatus string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Name   string `json:"name"`
	SshKey string `json:"ssh_key"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody = ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {
	// max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// CloneComposeJSONBody defines parameters for CloneCompose.
type CloneComposeJSONBody = CloneRequest

// GetComposeClonesParams defines parameters for GetComposeClones.
type GetComposeClonesParams struct {
	// max amount of clones, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// clones page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	// distribution to look up packages for
	Distribution Distributions `form:"distribution" json:"distribution"`

	// architecture to look up packages for
	Architecture GetPackagesParamsArchitecture `form:"architecture" json:"architecture"`

	// packages to look for
	Search string `form:"search" json:"search"`

	// max amount of packages, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParamsArchitecture defines parameters for GetPackages.
type GetPackagesParamsArchitecture string

// ComposeImageJSONRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody = ComposeImageJSONBody

// CloneComposeJSONRequestBody defines body for CloneCompose for application/json ContentType.
type CloneComposeJSONRequestBody = CloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// get status of a compose clone
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id openapi_types.UUID) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// delete a compose
	// (DELETE /composes/{composeId})
	DeleteCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId openapi_types.UUID) error
	// clone a compose
	// (POST /composes/{composeId}/clone)
	CloneCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get clones of a compose
	// (GET /composes/{composeId}/clones)
	GetComposeClones(ctx echo.Context, composeId openapi_types.UUID, params GetComposeClonesParams) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId openapi_types.UUID) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// DeleteCompose converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompose(ctx, composeId)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// CloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) CloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CloneCompose(ctx, composeId)
	return err
}

// GetComposeClones converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeClones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposeClonesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeClones(ctx, composeId, params)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/architectures/:distribution", wrapper.GetArchitectures)
	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.ComposeImage)
	router.GET(baseURL+"/composes", wrapper.GetComposes)
	router.DELETE(baseURL+"/composes/:composeId", wrapper.DeleteCompose)
	router.GET(baseURL+"/composes/:composeId", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:composeId/clone", wrapper.CloneCompose)
	router.GET(baseURL+"/composes/:composeId/clones", wrapper.GetComposeClones)
	router.GET(baseURL+"/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/distributions", wrapper.GetDistributions)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)
	router.GET(baseURL+"/packages", wrapper.GetPackages)
	router.GET(baseURL+"/ready", wrapper.GetReadiness)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"9ov3eSXz+f3z/wUAAP//qnpZ3bRgAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
