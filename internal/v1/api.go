// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for Distributions.
const (
	Centos8      Distributions = "centos-8"
	Centos9      Distributions = "centos-9"
	Fedora37     Distributions = "fedora-37"
	Fedora38     Distributions = "fedora-38"
	Fedora39     Distributions = "fedora-39"
	Fedora40     Distributions = "fedora-40"
	Rhel8        Distributions = "rhel-8"
	Rhel84       Distributions = "rhel-84"
	Rhel85       Distributions = "rhel-85"
	Rhel86       Distributions = "rhel-86"
	Rhel87       Distributions = "rhel-87"
	Rhel88       Distributions = "rhel-88"
	Rhel8Nightly Distributions = "rhel-8-nightly"
	Rhel9        Distributions = "rhel-9"
	Rhel90       Distributions = "rhel-90"
	Rhel91       Distributions = "rhel-91"
	Rhel92       Distributions = "rhel-92"
	Rhel9Nightly Distributions = "rhel-9-nightly"
)

// Defines values for ImageRequestArchitecture.
const (
	ImageRequestArchitectureAarch64 ImageRequestArchitecture = "aarch64"
	ImageRequestArchitectureX8664   ImageRequestArchitecture = "x86_64"
)

// Defines values for ImageStatusStatus.
const (
	ImageStatusStatusBuilding    ImageStatusStatus = "building"
	ImageStatusStatusFailure     ImageStatusStatus = "failure"
	ImageStatusStatusPending     ImageStatusStatus = "pending"
	ImageStatusStatusRegistering ImageStatusStatus = "registering"
	ImageStatusStatusSuccess     ImageStatusStatus = "success"
	ImageStatusStatusUploading   ImageStatusStatus = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAmi               ImageTypes = "ami"
	ImageTypesAws               ImageTypes = "aws"
	ImageTypesAzure             ImageTypes = "azure"
	ImageTypesEdgeCommit        ImageTypes = "edge-commit"
	ImageTypesEdgeInstaller     ImageTypes = "edge-installer"
	ImageTypesGcp               ImageTypes = "gcp"
	ImageTypesGuestImage        ImageTypes = "guest-image"
	ImageTypesImageInstaller    ImageTypes = "image-installer"
	ImageTypesRhelEdgeCommit    ImageTypes = "rhel-edge-commit"
	ImageTypesRhelEdgeInstaller ImageTypes = "rhel-edge-installer"
	ImageTypesVhd               ImageTypes = "vhd"
	ImageTypesVsphere           ImageTypes = "vsphere"
	ImageTypesVsphereOva        ImageTypes = "vsphere-ova"
	ImageTypesWsl               ImageTypes = "wsl"
)

// Defines values for UploadStatusStatus.
const (
	UploadStatusStatusFailure UploadStatusStatus = "failure"
	UploadStatusStatusPending UploadStatusStatus = "pending"
	UploadStatusStatusRunning UploadStatusStatus = "running"
	UploadStatusStatusSuccess UploadStatusStatus = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws   UploadTypes = "aws"
	UploadTypesAwsS3 UploadTypes = "aws.s3"
	UploadTypesAzure UploadTypes = "azure"
	UploadTypesGcp   UploadTypes = "gcp"
)

// Defines values for GetPackagesParamsArchitecture.
const (
	GetPackagesParamsArchitectureAarch64 GetPackagesParamsArchitecture = "aarch64"
	GetPackagesParamsArchitectureX8664   GetPackagesParamsArchitecture = "x86_64"
)

// AWSEC2Clone defines model for AWSEC2Clone.
type AWSEC2Clone struct {
	// Region A region as described in
	// https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-regions
	Region string `json:"region"`

	// ShareWithAccounts An array of AWS account IDs as described in
	// https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions = map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`

	// Repositories Base repositories for the given distribution and architecture.
	Repositories []Repository `json:"repositories"`
}

// Architectures defines model for Architectures.
type Architectures = []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {
	// ImageName Name of the created image.
	// Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens.
	// The total length is limited to 60 characters.
	ImageName *string `json:"image_name,omitempty"`

	// ResourceGroup Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// SourceId ID of the source that will be used to resolve the tenant and subscription IDs.
	// Do not provide a tenant_id or subscription_id when providing a source_id.
	SourceId *string `json:"source_id,omitempty"`

	// SubscriptionId ID of subscription where the image should be uploaded.
	// When providing a subscription_id, also be sure to provide a tenant_id and do not include a source_id.
	SubscriptionId *string `json:"subscription_id,omitempty"`

	// TenantId ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	// When providing a tenant_id, also be sure to provide a subscription_id and do not include a source_id.
	TenantId *string `json:"tenant_id,omitempty"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneRequest defines model for CloneRequest.
type CloneRequest struct {
	union json.RawMessage
}

// CloneResponse defines model for CloneResponse.
type CloneResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ClonesResponse defines model for ClonesResponse.
type ClonesResponse struct {
	Data  []ClonesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ClonesResponseItem defines model for ClonesResponseItem.
type ClonesResponseItem struct {
	// ComposeId UUID of the parent compose of the clone
	ComposeId openapi_types.UUID `json:"compose_id"`
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Request   CloneRequest       `json:"request"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// OstreeCommit ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Packages Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`

	// Distribution List of all distributions that image builder supports. A user might not have access to
	// restricted distributions.
	//
	// Restricted distributions include the RHEL nightlies and the Fedora distributions.
	Distribution     Distributions `json:"distribution"`
	ImageDescription *string       `json:"image_description,omitempty"`
	ImageName        *string       `json:"image_name,omitempty"`

	// ImageRequests Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus    `json:"image_status"`
	Request     ComposeRequest `json:"request"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	ImageName *string            `json:"image_name,omitempty"`
	Request   ComposeRequest     `json:"request"`
}

// CustomRepository Repository configuration for custom repositories.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above. Id is required.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg *bool     `json:"check_repo_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`

	// Gpgkey GPG key used to sign packages in this repository. Can be a gpg key or a URL
	Gpgkey     *[]string `json:"gpgkey,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`
	Name       *string   `json:"name,omitempty"`
	Priority   *int      `json:"priority,omitempty"`
	SslVerify  *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	CustomRepositories  *[]CustomRepository `json:"custom_repositories,omitempty"`
	Filesystem          *[]Filesystem       `json:"filesystem,omitempty"`
	Openscap            *OpenSCAP           `json:"openscap,omitempty"`
	Packages            *[]string           `json:"packages,omitempty"`
	PayloadRepositories *[]Repository       `json:"payload_repositories,omitempty"`
	Subscription        *Subscription       `json:"subscription,omitempty"`

	// Users list of users that a customer can add, also specifying their respective groups and SSH keys
	Users *[]User `json:"users,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions List of all distributions that image builder supports. A user might not have access to
// restricted distributions.
//
// Restricted distributions include the RHEL nightlies and the Fedora distributions.
type Distributions string

// DistributionsResponse List of distributions this user is allowed to build.
type DistributionsResponse = []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// MinSize size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {
	// ShareWithAccounts List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	// Architecture CPU architecture of the image, x86_64 and aarch64 are currently supported.
	Architecture ImageRequestArchitecture `json:"architecture"`
	ImageType    ImageTypes               `json:"image_type"`
	Ostree       *OSTree                  `json:"ostree,omitempty"`

	// Size Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size          *uint64       `json:"size,omitempty"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// ImageRequestArchitecture CPU architecture of the image, x86_64 and aarch64 are currently supported.
type ImageRequestArchitecture string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusStatus   `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusStatus defines model for ImageStatus.Status.
type ImageStatusStatus string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// OSTree defines model for OSTree.
type OSTree struct {
	// Contenturl A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Parent Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Rhsm Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	ProfileId string `json:"profile_id"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// CheckRepoGpg Enables gpg verification of the repository metadata
	CheckRepoGpg *bool   `json:"check_repo_gpg,omitempty"`
	Gpgkey       *string `json:"gpgkey,omitempty"`
	IgnoreSsl    *bool   `json:"ignore_ssl,omitempty"`
	Metalink     *string `json:"metalink,omitempty"`
	Mirrorlist   *string `json:"mirrorlist,omitempty"`
	Rhsm         bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`

	// Rhc Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options UploadRequest_Options `json:"options"`
	Type    UploadTypes           `json:"type"`
}

// UploadRequest_Options defines model for UploadRequest.Options.
type UploadRequest_Options struct {
	union json.RawMessage
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options UploadStatus_Options `json:"options"`
	Status  UploadStatusStatus   `json:"status"`
	Type    UploadTypes          `json:"type"`
}

// UploadStatus_Options defines model for UploadStatus.Options.
type UploadStatus_Options struct {
	union json.RawMessage
}

// UploadStatusStatus defines model for UploadStatus.Status.
type UploadStatusStatus string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Name   string `json:"name"`
	SshKey string `json:"ssh_key"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {
	// Limit max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// IgnoreImageTypes Filter the composes on image type. The filter is optional and can be specified multiple times.
	IgnoreImageTypes *[]ImageTypes `form:"ignoreImageTypes,omitempty" json:"ignoreImageTypes,omitempty"`
}

// GetComposeClonesParams defines parameters for GetComposeClones.
type GetComposeClonesParams struct {
	// Limit max amount of clones, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset clones page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	// Distribution distribution to look up packages for
	Distribution Distributions `form:"distribution" json:"distribution"`

	// Architecture architecture to look up packages for
	Architecture GetPackagesParamsArchitecture `form:"architecture" json:"architecture"`

	// Search packages to look for
	Search string `form:"search" json:"search"`

	// Limit max amount of packages, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset packages page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParamsArchitecture defines parameters for GetPackages.
type GetPackagesParamsArchitecture string

// ComposeImageJSONRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody = ComposeRequest

// CloneComposeJSONRequestBody defines body for CloneCompose for application/json ContentType.
type CloneComposeJSONRequestBody = CloneRequest

// AsAWSEC2Clone returns the union data inside the CloneRequest as a AWSEC2Clone
func (t CloneRequest) AsAWSEC2Clone() (AWSEC2Clone, error) {
	var body AWSEC2Clone
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSEC2Clone overwrites any union data inside the CloneRequest as the provided AWSEC2Clone
func (t *CloneRequest) FromAWSEC2Clone(v AWSEC2Clone) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSEC2Clone performs a merge with any union data inside the CloneRequest, using the provided AWSEC2Clone
func (t *CloneRequest) MergeAWSEC2Clone(v AWSEC2Clone) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t CloneRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CloneRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAWSUploadRequestOptions returns the union data inside the UploadRequest_Options as a AWSUploadRequestOptions
func (t UploadRequest_Options) AsAWSUploadRequestOptions() (AWSUploadRequestOptions, error) {
	var body AWSUploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSUploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided AWSUploadRequestOptions
func (t *UploadRequest_Options) FromAWSUploadRequestOptions(v AWSUploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSUploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided AWSUploadRequestOptions
func (t *UploadRequest_Options) MergeAWSUploadRequestOptions(v AWSUploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAWSS3UploadRequestOptions returns the union data inside the UploadRequest_Options as a AWSS3UploadRequestOptions
func (t UploadRequest_Options) AsAWSS3UploadRequestOptions() (AWSS3UploadRequestOptions, error) {
	var body AWSS3UploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSS3UploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided AWSS3UploadRequestOptions
func (t *UploadRequest_Options) FromAWSS3UploadRequestOptions(v AWSS3UploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSS3UploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided AWSS3UploadRequestOptions
func (t *UploadRequest_Options) MergeAWSS3UploadRequestOptions(v AWSS3UploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsGCPUploadRequestOptions returns the union data inside the UploadRequest_Options as a GCPUploadRequestOptions
func (t UploadRequest_Options) AsGCPUploadRequestOptions() (GCPUploadRequestOptions, error) {
	var body GCPUploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGCPUploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided GCPUploadRequestOptions
func (t *UploadRequest_Options) FromGCPUploadRequestOptions(v GCPUploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGCPUploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided GCPUploadRequestOptions
func (t *UploadRequest_Options) MergeGCPUploadRequestOptions(v GCPUploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAzureUploadRequestOptions returns the union data inside the UploadRequest_Options as a AzureUploadRequestOptions
func (t UploadRequest_Options) AsAzureUploadRequestOptions() (AzureUploadRequestOptions, error) {
	var body AzureUploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureUploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided AzureUploadRequestOptions
func (t *UploadRequest_Options) FromAzureUploadRequestOptions(v AzureUploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureUploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided AzureUploadRequestOptions
func (t *UploadRequest_Options) MergeAzureUploadRequestOptions(v AzureUploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t UploadRequest_Options) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UploadRequest_Options) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAWSUploadStatus returns the union data inside the UploadStatus_Options as a AWSUploadStatus
func (t UploadStatus_Options) AsAWSUploadStatus() (AWSUploadStatus, error) {
	var body AWSUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSUploadStatus overwrites any union data inside the UploadStatus_Options as the provided AWSUploadStatus
func (t *UploadStatus_Options) FromAWSUploadStatus(v AWSUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSUploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided AWSUploadStatus
func (t *UploadStatus_Options) MergeAWSUploadStatus(v AWSUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAWSS3UploadStatus returns the union data inside the UploadStatus_Options as a AWSS3UploadStatus
func (t UploadStatus_Options) AsAWSS3UploadStatus() (AWSS3UploadStatus, error) {
	var body AWSS3UploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSS3UploadStatus overwrites any union data inside the UploadStatus_Options as the provided AWSS3UploadStatus
func (t *UploadStatus_Options) FromAWSS3UploadStatus(v AWSS3UploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSS3UploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided AWSS3UploadStatus
func (t *UploadStatus_Options) MergeAWSS3UploadStatus(v AWSS3UploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsGCPUploadStatus returns the union data inside the UploadStatus_Options as a GCPUploadStatus
func (t UploadStatus_Options) AsGCPUploadStatus() (GCPUploadStatus, error) {
	var body GCPUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGCPUploadStatus overwrites any union data inside the UploadStatus_Options as the provided GCPUploadStatus
func (t *UploadStatus_Options) FromGCPUploadStatus(v GCPUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGCPUploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided GCPUploadStatus
func (t *UploadStatus_Options) MergeGCPUploadStatus(v GCPUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAzureUploadStatus returns the union data inside the UploadStatus_Options as a AzureUploadStatus
func (t UploadStatus_Options) AsAzureUploadStatus() (AzureUploadStatus, error) {
	var body AzureUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureUploadStatus overwrites any union data inside the UploadStatus_Options as the provided AzureUploadStatus
func (t *UploadStatus_Options) FromAzureUploadStatus(v AzureUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureUploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided AzureUploadStatus
func (t *UploadStatus_Options) MergeAzureUploadStatus(v AzureUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t UploadStatus_Options) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UploadStatus_Options) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution Distributions) error
	// get status of a compose clone
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id openapi_types.UUID) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// delete a compose
	// (DELETE /composes/{composeId})
	DeleteCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId openapi_types.UUID) error
	// clone a compose
	// (POST /composes/{composeId}/clone)
	CloneCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get clones of a compose
	// (GET /composes/{composeId}/clones)
	GetComposeClones(ctx echo.Context, composeId openapi_types.UUID, params GetComposeClonesParams) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId openapi_types.UUID) error
	// get the distributions available to this user
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution Distributions

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "ignoreImageTypes" -------------

	err = runtime.BindQueryParameter("form", true, false, "ignoreImageTypes", ctx.QueryParams(), &params.IgnoreImageTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ignoreImageTypes: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// DeleteCompose converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompose(ctx, composeId)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// CloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) CloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CloneCompose(ctx, composeId)
	return err
}

// GetComposeClones converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeClones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposeClonesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeClones(ctx, composeId, params)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/architectures/:distribution", wrapper.GetArchitectures)
	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.ComposeImage)
	router.GET(baseURL+"/composes", wrapper.GetComposes)
	router.DELETE(baseURL+"/composes/:composeId", wrapper.DeleteCompose)
	router.GET(baseURL+"/composes/:composeId", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:composeId/clone", wrapper.CloneCompose)
	router.GET(baseURL+"/composes/:composeId/clones", wrapper.GetComposeClones)
	router.GET(baseURL+"/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/distributions", wrapper.GetDistributions)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)
	router.GET(baseURL+"/packages", wrapper.GetPackages)
	router.GET(baseURL+"/ready", wrapper.GetReadiness)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"EmYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
