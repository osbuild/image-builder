// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for Distributions.
const (
	Centos8      Distributions = "centos-8"
	Centos9      Distributions = "centos-9"
	Fedora37     Distributions = "fedora-37"
	Fedora38     Distributions = "fedora-38"
	Fedora39     Distributions = "fedora-39"
	Rhel8        Distributions = "rhel-8"
	Rhel84       Distributions = "rhel-84"
	Rhel85       Distributions = "rhel-85"
	Rhel86       Distributions = "rhel-86"
	Rhel87       Distributions = "rhel-87"
	Rhel88       Distributions = "rhel-88"
	Rhel8Nightly Distributions = "rhel-8-nightly"
	Rhel9        Distributions = "rhel-9"
	Rhel90       Distributions = "rhel-90"
	Rhel91       Distributions = "rhel-91"
	Rhel92       Distributions = "rhel-92"
	Rhel9Nightly Distributions = "rhel-9-nightly"
)

// Defines values for ImageRequestArchitecture.
const (
	Aarch64 ImageRequestArchitecture = "aarch64"
	X8664   ImageRequestArchitecture = "x86_64"
)

// Defines values for ImageStatusStatus.
const (
	ImageStatusStatusBuilding    ImageStatusStatus = "building"
	ImageStatusStatusFailure     ImageStatusStatus = "failure"
	ImageStatusStatusPending     ImageStatusStatus = "pending"
	ImageStatusStatusRegistering ImageStatusStatus = "registering"
	ImageStatusStatusSuccess     ImageStatusStatus = "success"
	ImageStatusStatusUploading   ImageStatusStatus = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAmi               ImageTypes = "ami"
	ImageTypesAws               ImageTypes = "aws"
	ImageTypesAzure             ImageTypes = "azure"
	ImageTypesEdgeCommit        ImageTypes = "edge-commit"
	ImageTypesEdgeInstaller     ImageTypes = "edge-installer"
	ImageTypesGcp               ImageTypes = "gcp"
	ImageTypesGuestImage        ImageTypes = "guest-image"
	ImageTypesImageInstaller    ImageTypes = "image-installer"
	ImageTypesRhelEdgeCommit    ImageTypes = "rhel-edge-commit"
	ImageTypesRhelEdgeInstaller ImageTypes = "rhel-edge-installer"
	ImageTypesVhd               ImageTypes = "vhd"
	ImageTypesVsphere           ImageTypes = "vsphere"
	ImageTypesVsphereOva        ImageTypes = "vsphere-ova"
	ImageTypesWsl               ImageTypes = "wsl"
)

// Defines values for UploadStatusStatus.
const (
	UploadStatusStatusFailure UploadStatusStatus = "failure"
	UploadStatusStatusPending UploadStatusStatus = "pending"
	UploadStatusStatusRunning UploadStatusStatus = "running"
	UploadStatusStatusSuccess UploadStatusStatus = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws   UploadTypes = "aws"
	UploadTypesAwsS3 UploadTypes = "aws.s3"
	UploadTypesAzure UploadTypes = "azure"
	UploadTypesGcp   UploadTypes = "gcp"
)

// AWSEC2Clone defines model for AWSEC2Clone.
type AWSEC2Clone struct {
	// A region as described in
	// https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-regions
	Region string `json:"region"`

	// An array of AWS account IDs as described in
	// https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions = map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`

	// Base repositories for the given distribution and architecture.
	Repositories []Repository `json:"repositories"`
}

// Architectures defines model for Architectures.
type Architectures = []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {
	// Name of the created image.
	// Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens.
	// The total length is limited to 60 characters.
	ImageName *string `json:"image_name,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of the source that will be used to resolve the tenant and subscription IDs.
	// Do not provide a tenant_id or subscription_id when providing a source_id.
	SourceId *string `json:"source_id,omitempty"`

	// ID of subscription where the image should be uploaded.
	// When providing a subscription_id, also be sure to provide a tenant_id and do not include a source_id.
	SubscriptionId *string `json:"subscription_id,omitempty"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	// When providing a tenant_id, also be sure to provide a subscription_id and do not include a source_id.
	TenantId *string `json:"tenant_id,omitempty"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneRequest defines model for CloneRequest.
type CloneRequest interface{}

// CloneResponse defines model for CloneResponse.
type CloneResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ClonesResponse defines model for ClonesResponse.
type ClonesResponse struct {
	Data  []ClonesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ClonesResponseItem defines model for ClonesResponseItem.
type ClonesResponseItem struct {
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Request   CloneRequest       `json:"request"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations   *Customizations `json:"customizations,omitempty"`
	Distribution     Distributions   `json:"distribution"`
	ImageDescription *string         `json:"image_description,omitempty"`
	ImageName        *string         `json:"image_name,omitempty"`

	// Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus    `json:"image_status"`
	Request     ComposeRequest `json:"request"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	ImageName *string            `json:"image_name,omitempty"`
	Request   ComposeRequest     `json:"request"`
}

// Repository configuration for custom repositories.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above. Id is required.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg *bool     `json:"check_repo_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`

	// GPG key used to sign packages in this repository. Can be a gpg key or a URL
	Gpgkey     *[]string `json:"gpgkey,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`
	Name       *string   `json:"name,omitempty"`
	Priority   *int      `json:"priority,omitempty"`
	SslVerify  *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	CustomRepositories  *[]CustomRepository `json:"custom_repositories,omitempty"`
	Filesystem          *[]Filesystem       `json:"filesystem,omitempty"`
	Openscap            *OpenSCAP           `json:"openscap,omitempty"`
	Packages            *[]string           `json:"packages,omitempty"`
	PayloadRepositories *[]Repository       `json:"payload_repositories,omitempty"`
	Subscription        *Subscription       `json:"subscription,omitempty"`

	// list of users that a customer can add, also specifying their respective groups and SSH keys
	Users *[]User `json:"users,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions string

// DistributionsResponse defines model for DistributionsResponse.
type DistributionsResponse = []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {
	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	// CPU architecture of the image, x86_64 and aarch64 are currently supported.
	Architecture ImageRequestArchitecture `json:"architecture"`
	ImageType    ImageTypes               `json:"image_type"`
	Ostree       *OSTree                  `json:"ostree,omitempty"`

	// Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size          *uint64       `json:"size,omitempty"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// CPU architecture of the image, x86_64 and aarch64 are currently supported.
type ImageRequestArchitecture string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusStatus   `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusStatus defines model for ImageStatus.Status.
type ImageStatusStatus string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	ProfileId string `json:"profile_id"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool   `json:"check_repo_gpg,omitempty"`
	Gpgkey       *string `json:"gpgkey,omitempty"`
	IgnoreSsl    *bool   `json:"ignore_ssl,omitempty"`
	Metalink     *string `json:"metalink,omitempty"`
	Mirrorlist   *string `json:"mirrorlist,omitempty"`
	Rhsm         bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}        `json:"options"`
	Status  UploadStatusStatus `json:"status"`
	Type    UploadTypes        `json:"type"`
}

// UploadStatusStatus defines model for UploadStatus.Status.
type UploadStatusStatus string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Name   string `json:"name"`
	SshKey string `json:"ssh_key"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody = ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {
	// max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// CloneComposeJSONBody defines parameters for CloneCompose.
type CloneComposeJSONBody = CloneRequest

// GetComposeClonesParams defines parameters for GetComposeClones.
type GetComposeClonesParams struct {
	// max amount of clones, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// clones page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	// distribution to look up packages for
	Distribution Distributions `form:"distribution" json:"distribution"`

	// architecture to look up packages for
	Architecture GetPackagesParamsArchitecture `form:"architecture" json:"architecture"`

	// packages to look for
	Search string `form:"search" json:"search"`

	// max amount of packages, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParamsArchitecture defines parameters for GetPackages.
type GetPackagesParamsArchitecture string

// ComposeImageJSONRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody = ComposeImageJSONBody

// CloneComposeJSONRequestBody defines body for CloneCompose for application/json ContentType.
type CloneComposeJSONRequestBody = CloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// get status of a compose clone
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id openapi_types.UUID) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// delete a compose
	// (DELETE /composes/{composeId})
	DeleteCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId openapi_types.UUID) error
	// clone a compose
	// (POST /composes/{composeId}/clone)
	CloneCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get clones of a compose
	// (GET /composes/{composeId}/clones)
	GetComposeClones(ctx echo.Context, composeId openapi_types.UUID, params GetComposeClonesParams) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId openapi_types.UUID) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// DeleteCompose converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompose(ctx, composeId)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// CloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) CloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CloneCompose(ctx, composeId)
	return err
}

// GetComposeClones converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeClones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposeClonesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeClones(ctx, composeId, params)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/architectures/:distribution", wrapper.GetArchitectures)
	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.ComposeImage)
	router.GET(baseURL+"/composes", wrapper.GetComposes)
	router.DELETE(baseURL+"/composes/:composeId", wrapper.DeleteCompose)
	router.GET(baseURL+"/composes/:composeId", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:composeId/clone", wrapper.CloneCompose)
	router.GET(baseURL+"/composes/:composeId/clones", wrapper.GetComposeClones)
	router.GET(baseURL+"/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/distributions", wrapper.GetDistributions)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)
	router.GET(baseURL+"/packages", wrapper.GetPackages)
	router.GET(baseURL+"/ready", wrapper.GetReadiness)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x8aXPquLboX1FxT9XufmEwM0lV17lASEKADEDGZt9cYcu2wJYdSWZIv/z3V5IHbDCB",
	"3af3Oefduv1ht4OlpaW1ltYs/5FRHdt1CCKcZc7+yDDVRDaUj82nUaddalsOQeJPlzouohwj+ZIiAztE",
	"PGmIqRS7XP6ZaQL/DYAM+G+mSAOYTIjJucvOCgXNUVkeLlke2vDDIXnVsQv+UgULcsR44YEheulhDRU8",
	"homR8yGyHFxAbMEptjBf5z4cglje5Lb1H6pDVORyFg6ckEw2w9cuypxlGKeYGJnPbIaZkKK3JebmG1RV",
	"xws2vIU+AZBSuAaODppPIxCMBN1z9mM76jYHu9tRHcIcC4Xr56CFob8HiTJaQdu1UObs90yxVK5Ua/XG",
	"qVIsZb5nM5gjW6LrQs4RFaj+1+9K7vT7H8XS59/StmvDVdefVFSU6L3c3BY1mONR1efqNgaJpXeWSMDM",
	"ZjyC3z0ULMqphz4/sxmK3j1MkSZABjLzPZrpTGdI5QJU82k0Kj+4lgO1IXr3EOO3kiXxhVNHjzjkHtuV",
	"T49aKThvISQG7cFmHy7JVfbI1DGM/HFq/vOYtp8g+8gNbZxARfyQU9RGWamfluv1avW0qlWmaXK6USSb",
	"ycjLLRHjueLuhC0OinWzXwoWVU3Mkco9KneZgjpVzeTyq0btrVZJQxbb0EBv4mc5NaLyZu676ixLaVO3",
	"DyBFrsMwd2iARlIPtSBDID4E6A4F3ETAwAtEgIYF5KnHpaolGoCxfeYzMQH4G0V65izzH4WNni8ESr4w",
	"DBdY72K4TWhBpSQBtvZwiPpJin2F1g7PUsjX/PAoOu6Q+jgTaKNdOt9AGwldLyirUgS5UO1ifH5CBh7j",
	"YIoMTIA4cgACCwnlCxwKiGdPEc0CRLTky2zwSgzyiIYoUx2KspJHNlwD1SEcYgIcYq2DKSycw7KxKSwL",
	"XESxo7GsgGWuXRMRlp+QsYkAdzi0gIWIwU2AGbCwjQXq3AE1BagmpFAVkPNJu5LpY+KtumJ/GWkh+hJC",
	"5qymZDM2JuGfxWzMzvzyX7/D3Ecz9yrMzd9+/b+JvzePb5NJPvf9/8R++P63X9MPvK+73gzqeO7XLAnH",
	"AjkWLE1EkXwheQSY6XiWBqYIeFISkLa94bHjqZAMAzCXcsU038DHCGu76HTPQ2QCVLgJOVhiy5LrMp/q",
	"AlFr4ePGEYGES44zbxrBEj5EfkLOHUAcDlzqLLCGAAyGv2FNsDk+Qfy0NBEJxmJiAAgiTLd36qv+tL0l",
	"Qe7bYQLVowj9tINbcqUsgBZzxCTmCWhO6qYFmTSfJpiolidf791lBVW1xrSk5uC0VMlVKsVy7lRRq7la",
	"sVRWaqihnKJ07Ruu9xWDA8YdsXkwNuWpI3OAVq4FMWHAdJYTwh2gY6IBLHYjYUhFBe4cyqF1tuUz2lil",
	"DnN0Ll1GRHIeK0AxvgBVjhcop2GKVKGfC7pHNGgjwqHFdt7mTGeZ405OLJ3zd5HCnogGXzFmWwB/jD1V",
	"tY706rSWK6plPVfRoJKDtVIpp0yVmlIqn2p1rX7Qpm8piFS7stH++zySpNbfoGivczhQgF+jEQOQhoKM",
	"iwLTI1ZwCLrVM2e/HzBtsZjq8/sGDHMdwlLCLF9gE6ccCX8yhxqn01yxpJVzsFKt5SqlWq1arVQURVEy",
	"2YzuUBvyzFnG87B2eKdaJkKF7cdFgxwebcOTwPZZcXGCUninY+oTdbPxAnRxQbIkN/WwpSFaWBT9hRli",
	"f5cG8LeiMvEUpVRzdJ0h/puSpgks+FeALioHqepvIlgwTYJs5NMzuXcZRcQ8d0w4MhDdAe+P24W7NUwu",
	"EhI66/Nwl9npnnHgEL1BnhpJ+LJ5QNR8bIIzclBgwvOUIqEbQNk4YnIvPqsGiMNQRpMbcRinCL2pjm1j",
	"nmoBfjEhM38NDYEQAw6C4SlbcqE6h0aa337nvwEWZqHCFMr3pvM4bB7rlQcwou2kuea76sinQUwhQU3D",
	"Aito3cWIoUOLoew2oz3GHRt/wMiD/pJTydGf2Uw8Gjk0+zw2lm1iqgQZ46dzsJb+6nnsfcJ1LVWVvYHa",
	"rvYPoAkfMwkmniTZBhMIXlq6KMwVoRVUubUGDgm9hmBSHlzBhRAB26FbrxiQcQACgaoRjrzqUYqIgCQs",
	"LvNc16E8dGuPkh65v+gcJfJA0sff/PGj6ZsEl3do8/0rofzavP05a+XD/tr8s+jtQZIFgH5AYSVPXLr7",
	"ECCwAbqDeodSh6YYW8QhtsRjpGm3DYIACpl/Xg6SLBocQ+Avs/Vb4P7X2v/bWfs0Dv0ke59UvX/aHThw",
	"ur52CKSFimW3dhT35h1QHaJjw6PSnMk0m28OE+m3/IQ0ObAQZFyq7MBR+DaFDHnU+pYF32wsTrIw/PIv",
	"xKFgwzewoTGwPcYnRMRdLlKxjkUk2dV90+BDtAGksddZuYpDNUTFAJciFWmIqMJWTIhMSkAbAcikw4E0",
	"AKfOAuVBVxPGJCSYbz2SvA4Q38ofh9GpqpE8RZoJ/chUdQhHhBeEBShQE1mNQqPgZ0kLApDDCg4rJPLO",
	"GzGh+Jh0qGoidf5muEZMaKaOYyFINq8FR/aPQQROLaSlv9SxhfbKpOEac5QiJZd3l2CO1lGWh2GDgND5",
	"8wN8SeZQlvKgDYmIqyEwXENOdSiA4GHYT5Z3cuK/VueyewPuLu/A3UOr322DXucFtPq37Z58PSETYt93",
	"b1qXTXWkOq1O87yvN16u5ujjugY1a/CyrMPLy651DS3euJ6VVoVWqXdidvWut7rk7uOsjiakPzTOH+q1",
	"GRxX3cfzqn0xuC67c0TQsKCO7ff3+/nN+p6ZzyXn/nnZ+XgYTYvtm0Fbb18a8+fGfWlCPl7ntKu26YVy",
	"X1rS3tSCnmY+nOBHSJrnzC42XjrvbFptPpTrGn+gg/L9i/ZknA5PnvGd/tgYTkivNRsr5cVj61YbjNhL",
	"+bQP26TWdYu3C7fR7TiFLuo8vhTf7fbtXRP2lOn1VdnTjUrbQ3N2Mh5NyPL+aYza/ZX32q/dDp6d27ve",
	"cjG411dTo/h83lh4r0qPzwrqzVVpBT1lZbOmd3p17aL54vZuuLImZP3OZ+tXnTqPGF2s3eWrsbhfckIG",
	"jYIx6niF68cxfVGqJbvzMK631Wm9MlevLsYX+mBukfllYUIU/aHSHMKqUrkqr2bKnE9RedFT756du1uv",
	"13pkV6OFojxcvjTXd8hbnzTq6kPhpWMO6vPy6LE3m5Aa6r4aazy4VZZW8eXyfNhTPWs5Z6fNE8+aG0Vn",
	"PK2w8of9urhT6pfOePVUKc1gr/o0OrkxXxGakEZNeXYezala7Lmjk5n+6swY7fDXxt304fXkZXHRGLpU",
	"e2rS2dX0el66doe95mpsrth9k7XMy+KEKH1vVXqCg5ZilLrVO3WgXRfU95mjNFSVzlrPHl49UVzF3ung",
	"2W28jwv66OPGZlrXII3C+2tvQnDj3rN0r1733s2nwpKXppxgbgzZ+8xcDbzZy0PldVox5/yiYfYeCs/P",
	"9Urp3exXe8vmsHnfbE0IP7+4fH0aLlS7Y/TOB8XeqNl4tR/n0/K12R8Piv3n1ho+FU2VWM3wd/XqegHt",
	"x5nWri4mRLXVE3x/fdtqDVrtZrNygTsddFWzqXlxVfce2X1/MCgpL1X11SSrl8ZF05ZnqH25bFy0l/Pu",
	"hLSW3cuLe+e63WTtVuul3Vx22ldGp31RaTbbxvx+M/vk5qVZqLdeXMNaj5qvL1fmbN0zJ6Rwotc+7vTH",
	"xfSqpHTey/Nu/faidaOQ/vNJ66Foe4vRyfvYG5Wf+rRVtsuXnsXd3rBz3etzu9o5n5Aivfx4bjrj4to9",
	"fek2+s1zbdBu365nzRlznh4a9ZcHr31SmJIZHaNhqT+8bevru3a99nTaqOLbxwmxq6OTKbs/X9bbpT61",
	"tOagMjj3nPVrcYT5JXyt9O77j/xk3IHFCmYvo8v27MOp3700HsvXt/OqMiHG+5PRKN0Upnap8zGqjxvl",
	"p875tGgtZpWutVgZ3fceMorFj+eXlU1fRq/X12198aGfWDejmrcyriZktipcK2vrtdTH00tau2w217en",
	"D0+0+TpajgZKR52NG8tOm6zmo3Nv/W4/LR8XN61nr9N9bNyi8suEDPBDUb++aTCtfu6yi1V1cPKskQG5",
	"H51c0dn4rndetp+o1dRIZ2xqL4+N2evcfTLP16xcOD1FtxNizhXaJ2tldrOcQ08v4IfGrVp7Xgzms/5w",
	"cG1UH04fe+tr7+mJfyyfyWxwU30aXrTeexX26tiDwYTofDq+Kp5U19PhU6FZXrSmcDV8KvH6w8fNTP1A",
	"89FrB8P+zWm/cKVet7vD4v1Fo9YonWtNq3Nxqk3IvGTc45fRfRPCa+X6uvlxtRjOh9f9vtErvdy/4Kub",
	"x3WJl6/XFzqj0K4uR+2nW928Q911vzV+vZ6QBXVvrLsp0tn4tFof66XWTdczPl5pu/q4Oh/15q/G0Cw+",
	"Xi5G3XvSXn/M79e1zkPp/c7FT9VToaPMu+7zK+05aq/c649OC/jj+n48tPhs0PxtQn6708f1CZHWpXNz",
	"/pXp+YEa8nZ8EmtBCHygpAMe+hi+v8TyOtIcCl3qCI8271CjEM77u7Csv/nvc+WS75JDqpq/RRXaQ27G",
	"xinbRSLCQbzOq4hwh8n1/06R8PTQb40c4xRBO7YyFP/WKv4vEr8WZOh2dAQue90Pl2KHYr5OD/IYs94W",
	"iGJ9nebZpATHaYH4ToInLQH0tl2TPi7623a2UwREeF9szYKo4yiwF5spySxGqbEL33ERYSp0DwG9dREZ",
	"tZt320m8mGvmOowbFLF36+szkOivSeuwceHacqD254j6NTnjRZpDkEbxsZ/ZjMcQTclkyYSlowP52q9x",
	"wiAQQhSokACohYUjPzxZY2KI8ARTQJH4ieNFUKhlsmw0Gl0JF5gdm7l6YL7AH052xnOI6aHs3nTiEGng",
	"CnLQIRxRl2KGgCyKg1+GV53+r6CRr3x1djeARBiUa1QOJgaIn2qMI/T9wJZ8kSSeLathch0R7cqHHMGG",
	"ya119EMleqpGT7XoqR49RSBOo4dtWKdK9FSMnkoivJa6UWIRPAogoWKux54bsefT2EY3lExsNJ6AOkpG",
	"djifcjouEsomKRc2Jm8Mf6R0gohfw7B+o65EkDddc9ntEvG+VKzUK41yrdLIZlY5w8kFGHiY8FpFKgfH",
	"I9x1MNlOPi0gPSgxscnZDcJpQnPZvvuH+tSSFOgHKmABLayBS8cxLBQ2QDIZ/gooQWHcz0uDtmO7Hkfg",
	"xtHC7LZYJT8hHaiawN+hzHtEnS8wSm/QkN5hl6XYYB48yvV9a8oApOhsQgDIgW9CN539gWyILax9fjsD",
	"TQLkX0I3UcQCvUWRSxETYrNZSxUgwNam8uDCoSDgThZ8gxZW0X8Gf+dVx/6WD1ZmiC6wipr+vB/EwV86",
	"ALFvbXudc7iJaA667n9C12Wuw/NGMCmcE0dJKtofpUawfzk37+O1RQLNxoSl0kBzbIjJ2R/+/8WCYxOB",
	"SzDyMEfA/xX84lJsQ7r+dXdxy/IXFAz3rYzkPuTB3G2KGBJXiQJwKPi2gxMAXd0vkyTTZV8JJ2b+DCHJ",
	"YecWWfvQQipv9+JKsduRjUw2syUVx7Iwk834zNsltjAUPpnjP/6lTbhpquBL3fLXNVjIHKSA/7bd1gCZ",
	"iogGCc9NKcRarqyUq8XyQU0ZA5c91K9xNR7ffVlrSacu5hY6XGDxh2VDSN/j6/WD4CO5JpLBz9F2b4P9",
	"oUbNALBAIVEK/LGKcLyddNdStO8eEg2noR6XLMgCPzrz21L9cElmtTe1za26ZujqRFFdMCvVf9h0oB5V",
	"1hvLVlURIsgegIMBwmgsRgkfO9VLGAVeQrDT0DvIA9ltxRAXdlKJN4+JCVjoXhsTbHv2hGhIxwRpYLqO",
	"jZOmL6l5KqXTymmtXjqt7XMz/H60tyNLKglXIbXBN+J4gsw766Qdr3gNNV3Yj6z4xKuigg0RyFBKmKeq",
	"iAmHTIfY8rF1EdGEfGQzsqbnP/pY+88UGZhxJIXoe7xjbQNtR9KCXR9XQ07oyh2d6/8cnclx2EAe7gku",
	"BQay9U9IgGagXNR9Iv/ChHFoWUh4j4bqin8FKyJN6xc046MWzDWRBBc85ZwFzGQzS2aJpfy+eeHhJ1fb",
	"/JQAZmqphzE4LillTVkwCgpM2zeEHoZ9sDSxamYB1sWhyYoTIossukOBjrhqCrcxgJIHXdu1MAocmv/2",
	"qPXfYoI4bZCBJbKs7IRIgMm+XAHMDrpoZMN1Pv1mkAuFXkpRc34xB2Fh1UU4LIkEfgmk5wwopZpSmZY0",
	"WEOn1cpUK1emjWmjBBvlKqrCel0rTWuKrsNfs34daEohUc2checIUKQjKkt5G3iC+JvKmuDCr1sNlrsj",
	"0luu9N1g9YhpJrN3qXCOOKI2JoiBpYkCUvgxQqJn2IYEGoiCX1RINAu5mPwKsIYIx3wdr0YC7kwIlKcu",
	"pX7mEObJjIMQJh2rkIt141yFDKgWRoRvjTERmZBIdiK+CysUClKc/bHa4N67QjtaLsof7Ui8Sx0RNe54",
	"NitV1fQ3hxp5xowwyRng8xZOUjE7xtcJF0jTv0HT2C5ie7OOzLOFp37YuQkyGOH475vV9nfchZdqdlZF",
	"rrPnzRcdAzIbm74JbNhadd8rAkP/ZY/bnPJigSjDxzTVBLYxoE44bYNuNrwzE+AYo9tf1XgTMv0n9NqE",
	"2dE9vTb+X/GOsHw+n/9HOnC+XrB49Ir///TlpCAzRMJhEf5IyoXb2KtDDfTh0PQ14m0xh7tC/sGmkMN1",
	"kR9u/dCQDj2LR6FL0l51ZBsIkx0Ysm4iDIQwUNGdoqj1JzQSe+zCpi1kNwoxiEPRG2NWOtL/W/pK9SwO",
	"VK/ksDSZHW0VPLaMjcrxQvI4F/ArkY1gSKWIy1cxTF3I2NKhqS1sQnxzqedg9xiktsARhg1z6y4wpx5K",
	"kzKHGpAEpbnEhJJSUcqlSjat8dNUDx8EPxsMLaBb0BBxqccQoKbq31fz4yH/YptMdWd9n9wv8UBrCdcM",
	"oOAsdYMNbUWo+7bEEF0gukvBuL+YF8yOEfKgJk/QKbvN9MSiMQ7GmJEmWMmYePfiwCahDsn6uPs9qRn5",
	"z+zBeXvuvx+aua8GcHDFvRdo5b2kYxIs/uwgw5LuHYUE3E/7fTmDGOmPvlqVDMKPJ/mRM7ZToj9A4nDG",
	"9z+R0qAeIUHeYq8b+2fZFPWnb/Mr4s+eXIWfhAgzFnDJ8qyciqGs6u6NSja6wWOIFlPvrzLzbUetM2bm",
	"KIOg2Ww2W+WbD9guHluJDeGlieTjxvlP4nt0VBAO/P75KQ2B7qQkEYNSUFAisYSm9bOA0h+O7odIj1FF",
	"QZzgkyzTdKFqIlDKK5kgco3ciuVymYfytbTlwVxW6HfbnZtRJ1fKK/JjI7HEtp+PCv3wsEgVi2fOMsW8",
	"ErZYQBdnzjLlvJIX1HYhNyVxCvHcISv8EXfSP8UAA/lXJF3kd1l3tcxZ5hLx5OcBZCIG2ojLBoXft6mW",
	"+OSB7tDAXHEHWI4zB54Lgu/DWCiRnGY7CRS/aI6J9AK4GQZxZ9s3XDZ89Q2df6DSZOC7vNYuQzpJkZKi",
	"xNJg0ny4rhU4ooVZcGljA+/YryGIA/y5bechCJs39hBA5kD8Tg3ImKPizWcOAI/UQpQPEOzyy7J7gMRm",
	"xpbUZYpr9/MUEnhBlfcNC39gLS4RWyV4qYzkRoAcLxXSlszIe4KjUG19KTFdTcCSkEAAmztALJ3K/ehO",
	"QTrP//JLuD9TaLbS0TsyEydKCvcTnAhup/kc8Znp/yTVpMNSOBndaAvS00kuBpn+8DsUgbprOdr6L9v/",
	"zvWRHQoEF6yiYo4QjWl0F29XFD53uFX867ENskJpDAsoakImuEM50oRWrvyFMpOsWKbgID+SEuARMA1g",
	"BmxoCVEXCCUEKSkEccFhXxmF8K7SodNtwxWAsldGnvJgVhYEQREoykMoz/m7h+h6c9BlhikTP9tRICWv",
	"gdpwhW3h7Ph/+XW7+JXJWDZoj+Qz4AqZ8rNXG5z2YeSPS0cpjoKSgsLPVCM7FwW/ND8Rd3cVilAjloXU",
	"MBHjUrTAjse25WnznSPLMQz5nTXZLJIUn8IfwVPXtyYashBHaaUL8TvbKDG/QSRcU5YVGBf/Bv1HzhJS",
	"jYF3z+HQj3WT4ukDDKiSSSf8VhDe26KGj+sGJZloOmANSaCi1GjhfadmtLlv+nNF4gvTElD3GOOyvbHP",
	"4yx6RIYUKx5Jxj/ZmO+TT9/z2W8q/Q8xbOQhD26JtY7Okt+jJO8awiX7FvO9dvsppInGxEiTXLnMRnCP",
	"p7Kwi6Ez9m9E7p/kNiQ/QvGV0yBYQtAyos0/0VtIfDJmj3OHiZH0FZKmWbp/MR30tfSyvS77EHGPEiG+",
	"UQxiWb6S9eU6KMsjikJUgkAhWCNFVDfazD8bPyyuYfwSoODo/1aimz3gyEik/+VujE+6/xlOTPK7Rl+Y",
	"rEDYd01WJElHnRk7VhZPPTVRc4I8Csdb96je/kMnIlrtq+D3X6nHf66nsvmOzn7G25sx26zfNBCl+StC",
	"BrTtqxv7IpvkHY+fuPP0OxZHpo6S29mTGfpidCHIFOZDnPeR49Yfd82CZNs/QIzt6vvORmlgp2TDkeao",
	"ni3gpm8uwB+IZaL7A2HZiUODRRX973K/8Ytk+/YaNn78UJIzltqMPjqgO3SP+j06efkDX2faNQyJtt8f",
	"Q3Crw/QLLXN8P/AughEiIXL7EWIo6NA5PtF7wHiHi/+rzXdEhP8RBnyna+pLTRYdx085rEAR9COEfWdz",
	"03TzE/ewWSRVO21exjWSr7WCrpX4kEKsHpXqYYS6LLx1tGlP29n+Y6xz7SdtPlwilW/bKKYr5d1RUZ+B",
	"r0f9Ulhqb5ks1H7xPq9kPr9//r8AAAD//wU51wwKYQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
