// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for Distributions.
const (
	Centos8  Distributions = "centos-8"
	Centos9  Distributions = "centos-9"
	Fedora35 Distributions = "fedora-35"
	Fedora36 Distributions = "fedora-36"
	Fedora37 Distributions = "fedora-37"
	Fedora38 Distributions = "fedora-38"
	Rhel8    Distributions = "rhel-8"
	Rhel84   Distributions = "rhel-84"
	Rhel85   Distributions = "rhel-85"
	Rhel86   Distributions = "rhel-86"
	Rhel87   Distributions = "rhel-87"
	Rhel9    Distributions = "rhel-9"
	Rhel90   Distributions = "rhel-90"
	Rhel91   Distributions = "rhel-91"
	Rhel92   Distributions = "rhel-92"
)

// Defines values for ImageRequestArchitecture.
const (
	Aarch64 ImageRequestArchitecture = "aarch64"
	X8664   ImageRequestArchitecture = "x86_64"
)

// Defines values for ImageStatusStatus.
const (
	ImageStatusStatusBuilding    ImageStatusStatus = "building"
	ImageStatusStatusFailure     ImageStatusStatus = "failure"
	ImageStatusStatusPending     ImageStatusStatus = "pending"
	ImageStatusStatusRegistering ImageStatusStatus = "registering"
	ImageStatusStatusSuccess     ImageStatusStatus = "success"
	ImageStatusStatusUploading   ImageStatusStatus = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAmi               ImageTypes = "ami"
	ImageTypesAws               ImageTypes = "aws"
	ImageTypesAzure             ImageTypes = "azure"
	ImageTypesEdgeCommit        ImageTypes = "edge-commit"
	ImageTypesEdgeInstaller     ImageTypes = "edge-installer"
	ImageTypesGcp               ImageTypes = "gcp"
	ImageTypesGuestImage        ImageTypes = "guest-image"
	ImageTypesImageInstaller    ImageTypes = "image-installer"
	ImageTypesRhelEdgeCommit    ImageTypes = "rhel-edge-commit"
	ImageTypesRhelEdgeInstaller ImageTypes = "rhel-edge-installer"
	ImageTypesVhd               ImageTypes = "vhd"
	ImageTypesVsphere           ImageTypes = "vsphere"
)

// Defines values for UploadStatusStatus.
const (
	UploadStatusStatusFailure UploadStatusStatus = "failure"
	UploadStatusStatusPending UploadStatusStatus = "pending"
	UploadStatusStatusRunning UploadStatusStatus = "running"
	UploadStatusStatusSuccess UploadStatusStatus = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws   UploadTypes = "aws"
	UploadTypesAwsS3 UploadTypes = "aws.s3"
	UploadTypesAzure UploadTypes = "azure"
	UploadTypesGcp   UploadTypes = "gcp"
)

// AWSEC2Clone defines model for AWSEC2Clone.
type AWSEC2Clone struct {
	// A region as described in
	// https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-regions
	Region string `json:"region"`

	// An array of AWS account IDs as described in
	// https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions = map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`

	// Base repositories for the given distribution and architecture.
	Repositories []Repository `json:"repositories"`
}

// Architectures defines model for Architectures.
type Architectures = []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {
	// Name of the created image.
	// Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens.
	// The total length is limited to 60 characters.
	ImageName *string `json:"image_name,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of the source that will be used to resolve the tenant and subscription IDs.
	// Do not provide a tenant_id or subscription_id when providing a source_id.
	SourceId *string `json:"source_id,omitempty"`

	// ID of subscription where the image should be uploaded.
	// When providing a subscription_id, also be sure to provide a tenant_id and do not include a source_id.
	SubscriptionId *string `json:"subscription_id,omitempty"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	// When providing a tenant_id, also be sure to provide a subscription_id and do not include a source_id.
	TenantId *string `json:"tenant_id,omitempty"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneRequest defines model for CloneRequest.
type CloneRequest interface{}

// CloneResponse defines model for CloneResponse.
type CloneResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ClonesResponse defines model for ClonesResponse.
type ClonesResponse struct {
	Data  []ClonesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ClonesResponseItem defines model for ClonesResponseItem.
type ClonesResponseItem struct {
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Request   interface{}        `json:"request"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   Distributions   `json:"distribution"`
	ImageName      *string         `json:"image_name,omitempty"`

	// Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus    `json:"image_status"`
	Request     ComposeRequest `json:"request"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	ImageName *string            `json:"image_name,omitempty"`
	Request   interface{}        `json:"request"`
}

// Repository configuration for custom repositories.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above. Id is required.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg *bool     `json:"check_repo_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`

	// GPG key used to sign packages in this repository. Can be a gpg key or a URL
	Gpgkey     *[]string `json:"gpgkey,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`
	Name       *string   `json:"name,omitempty"`
	Priority   *int      `json:"priority,omitempty"`
	SslVerify  *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	CustomRepositories  *[]CustomRepository `json:"custom_repositories,omitempty"`
	Filesystem          *[]Filesystem       `json:"filesystem,omitempty"`
	Packages            *[]string           `json:"packages,omitempty"`
	PayloadRepositories *[]Repository       `json:"payload_repositories,omitempty"`
	Subscription        *Subscription       `json:"subscription,omitempty"`

	// list of users that a customer can add, also specifying their respective groups and SSH keys
	Users *[]User `json:"users,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions string

// DistributionsResponse defines model for DistributionsResponse.
type DistributionsResponse = []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {
	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	// CPU architecture of the image, x86_64 and aarch64 are currently supported.
	Architecture  ImageRequestArchitecture `json:"architecture"`
	ImageType     ImageTypes               `json:"image_type"`
	Ostree        *OSTree                  `json:"ostree,omitempty"`
	UploadRequest UploadRequest            `json:"upload_request"`
}

// CPU architecture of the image, x86_64 and aarch64 are currently supported.
type ImageRequestArchitecture string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusStatus   `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusStatus defines model for ImageStatus.Status.
type ImageStatusStatus string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool   `json:"check_repo_gpg,omitempty"`
	Gpgkey       *string `json:"gpgkey,omitempty"`
	IgnoreSsl    *bool   `json:"ignore_ssl,omitempty"`
	Metalink     *string `json:"metalink,omitempty"`
	Mirrorlist   *string `json:"mirrorlist,omitempty"`
	Rhsm         bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}        `json:"options"`
	Status  UploadStatusStatus `json:"status"`
	Type    UploadTypes        `json:"type"`
}

// UploadStatusStatus defines model for UploadStatus.Status.
type UploadStatusStatus string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Name   string `json:"name"`
	SshKey string `json:"ssh_key"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody = ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {
	// max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// CloneComposeJSONBody defines parameters for CloneCompose.
type CloneComposeJSONBody = CloneRequest

// GetComposeClonesParams defines parameters for GetComposeClones.
type GetComposeClonesParams struct {
	// max amount of clones, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// clones page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	// distribution to look up packages for
	Distribution Distributions `form:"distribution" json:"distribution"`

	// architecture to look up packages for
	Architecture GetPackagesParamsArchitecture `form:"architecture" json:"architecture"`

	// packages to look for
	Search string `form:"search" json:"search"`

	// max amount of packages, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParamsArchitecture defines parameters for GetPackages.
type GetPackagesParamsArchitecture string

// ComposeImageJSONRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody = ComposeImageJSONBody

// CloneComposeJSONRequestBody defines body for CloneCompose for application/json ContentType.
type CloneComposeJSONRequestBody = CloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// get status of a compose clone
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id openapi_types.UUID) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId openapi_types.UUID) error
	// clone a compose
	// (POST /composes/{composeId}/clone)
	CloneCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get clones of a compose
	// (GET /composes/{composeId}/clones)
	GetComposeClones(ctx echo.Context, composeId openapi_types.UUID, params GetComposeClonesParams) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId openapi_types.UUID) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// CloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) CloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CloneCompose(ctx, composeId)
	return err
}

// GetComposeClones converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeClones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposeClonesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeClones(ctx, composeId, params)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/architectures/:distribution", wrapper.GetArchitectures)
	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.ComposeImage)
	router.GET(baseURL+"/composes", wrapper.GetComposes)
	router.GET(baseURL+"/composes/:composeId", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:composeId/clone", wrapper.CloneCompose)
	router.GET(baseURL+"/composes/:composeId/clones", wrapper.GetComposeClones)
	router.GET(baseURL+"/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/distributions", wrapper.GetDistributions)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)
	router.GET(baseURL+"/packages", wrapper.GetPackages)
	router.GET(baseURL+"/ready", wrapper.GetReadiness)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/3ON4U3RXQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
