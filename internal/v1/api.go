// Package v1 provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`
}

// Architectures defines model for Architectures.
type Architectures []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {

	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   Distributions   `json:"distribution"`
	ImageName      *string         `json:"image_name,omitempty"`

	// Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id string `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus `json:"image_status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string      `json:"created_at"`
	Id        string      `json:"id"`
	ImageName *string     `json:"image_name,omitempty"`
	Request   interface{} `json:"request"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Filesystem          *[]Filesystem `json:"filesystem,omitempty"`
	Packages            *[]string     `json:"packages,omitempty"`
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Subscription        *Subscription `json:"subscription,omitempty"`

	// list of users that a customer can add, also specifying their respective groups and SSH keys
	Users *[]User `json:"users,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions string

// List of Distributions
const (
	Distributions_centos_8 Distributions = "centos-8"
	Distributions_centos_9 Distributions = "centos-9"
	Distributions_rhel_8   Distributions = "rhel-8"
	Distributions_rhel_84  Distributions = "rhel-84"
	Distributions_rhel_85  Distributions = "rhel-85"
	Distributions_rhel_86  Distributions = "rhel-86"
	Distributions_rhel_9   Distributions = "rhel-9"
	Distributions_rhel_90  Distributions = "rhel-90"
)

// DistributionsResponse defines model for DistributionsResponse.
type DistributionsResponse []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {

	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {

	// CPU architecture of the image, only x86_64 is currently supported.
	Architecture  string        `json:"architecture"`
	ImageType     ImageTypes    `json:"image_type"`
	Ostree        *OSTree       `json:"ostree,omitempty"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       string              `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// List of ImageTypes
const (
	ImageTypes_ami                 ImageTypes = "ami"
	ImageTypes_aws                 ImageTypes = "aws"
	ImageTypes_azure               ImageTypes = "azure"
	ImageTypes_edge_commit         ImageTypes = "edge-commit"
	ImageTypes_edge_installer      ImageTypes = "edge-installer"
	ImageTypes_gcp                 ImageTypes = "gcp"
	ImageTypes_guest_image         ImageTypes = "guest-image"
	ImageTypes_image_installer     ImageTypes = "image-installer"
	ImageTypes_rhel_edge_commit    ImageTypes = "rhel-edge-commit"
	ImageTypes_rhel_edge_installer ImageTypes = "rhel-edge-installer"
	ImageTypes_vhd                 ImageTypes = "vhd"
	ImageTypes_vsphere             ImageTypes = "vsphere"
)

// OSTree defines model for OSTree.
type OSTree struct {

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`
	Url    *string `json:"url,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl    *string `json:"baseurl,omitempty"`
	CheckGpg   *bool   `json:"check_gpg,omitempty"`
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`
	Rhsm       bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`
	ServerUrl     string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{} `json:"options"`
	Status  string      `json:"status"`
	Type    UploadTypes `json:"type"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// List of UploadTypes
const (
	UploadTypes_aws    UploadTypes = "aws"
	UploadTypes_aws_s3 UploadTypes = "aws.s3"
	UploadTypes_azure  UploadTypes = "azure"
	UploadTypes_gcp    UploadTypes = "gcp"
)

// User defines model for User.
type User struct {
	SSHKey string `json:"SSHKey"`
	Name   string `json:"name"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {

	// max amount of composes, default 100
	Limit *int `json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {

	// distribution to look up packages for
	Distribution Distributions `json:"distribution"`

	// architecture to look up packages for
	Architecture string `json:"architecture"`

	// packages to look for
	Search string `json:"search"`

	// max amount of packages, default 100
	Limit *int `json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// ComposeImageRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody ComposeImageJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId string) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId string) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameter("simple", false, "distribution", ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameter("simple", false, "composeId", ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameter("simple", false, "composeId", ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/architectures/:distribution", wrapper.GetArchitectures)
	router.POST("/compose", wrapper.ComposeImage)
	router.GET("/composes", wrapper.GetComposes)
	router.GET("/composes/:composeId", wrapper.GetComposeStatus)
	router.GET("/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET("/distributions", wrapper.GetDistributions)
	router.GET("/openapi.json", wrapper.GetOpenapiJson)
	router.GET("/packages", wrapper.GetPackages)
	router.GET("/ready", wrapper.GetReadiness)
	router.GET("/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"tXHe9emO4p7xSejtbnb/HQAA//9mwIWC8jsAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
