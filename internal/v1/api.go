// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for Distributions.
const (
	Centos8  Distributions = "centos-8"
	Centos9  Distributions = "centos-9"
	Fedora35 Distributions = "fedora-35"
	Fedora36 Distributions = "fedora-36"
	Fedora37 Distributions = "fedora-37"
	Fedora38 Distributions = "fedora-38"
	Rhel8    Distributions = "rhel-8"
	Rhel84   Distributions = "rhel-84"
	Rhel85   Distributions = "rhel-85"
	Rhel86   Distributions = "rhel-86"
	Rhel87   Distributions = "rhel-87"
	Rhel9    Distributions = "rhel-9"
	Rhel90   Distributions = "rhel-90"
	Rhel91   Distributions = "rhel-91"
	Rhel92   Distributions = "rhel-92"
)

// Defines values for ImageRequestArchitecture.
const (
	Aarch64 ImageRequestArchitecture = "aarch64"
	X8664   ImageRequestArchitecture = "x86_64"
)

// Defines values for ImageStatusStatus.
const (
	ImageStatusStatusBuilding    ImageStatusStatus = "building"
	ImageStatusStatusFailure     ImageStatusStatus = "failure"
	ImageStatusStatusPending     ImageStatusStatus = "pending"
	ImageStatusStatusRegistering ImageStatusStatus = "registering"
	ImageStatusStatusSuccess     ImageStatusStatus = "success"
	ImageStatusStatusUploading   ImageStatusStatus = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAmi               ImageTypes = "ami"
	ImageTypesAws               ImageTypes = "aws"
	ImageTypesAzure             ImageTypes = "azure"
	ImageTypesEdgeCommit        ImageTypes = "edge-commit"
	ImageTypesEdgeInstaller     ImageTypes = "edge-installer"
	ImageTypesGcp               ImageTypes = "gcp"
	ImageTypesGuestImage        ImageTypes = "guest-image"
	ImageTypesImageInstaller    ImageTypes = "image-installer"
	ImageTypesRhelEdgeCommit    ImageTypes = "rhel-edge-commit"
	ImageTypesRhelEdgeInstaller ImageTypes = "rhel-edge-installer"
	ImageTypesVhd               ImageTypes = "vhd"
	ImageTypesVsphere           ImageTypes = "vsphere"
)

// Defines values for UploadStatusStatus.
const (
	UploadStatusStatusFailure UploadStatusStatus = "failure"
	UploadStatusStatusPending UploadStatusStatus = "pending"
	UploadStatusStatusRunning UploadStatusStatus = "running"
	UploadStatusStatusSuccess UploadStatusStatus = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws   UploadTypes = "aws"
	UploadTypesAwsS3 UploadTypes = "aws.s3"
	UploadTypesAzure UploadTypes = "azure"
	UploadTypesGcp   UploadTypes = "gcp"
)

// AWSEC2Clone defines model for AWSEC2Clone.
type AWSEC2Clone struct {
	// A region as described in
	// https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-regions
	Region string `json:"region"`

	// An array of AWS account IDs as described in
	// https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions = map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`

	// Base repositories for the given distribution and architecture.
	Repositories []Repository `json:"repositories"`
}

// Architectures defines model for Architectures.
type Architectures = []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {
	// Name of the created image.
	// Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens.
	// The total length is limited to 60 characters.
	ImageName *string `json:"image_name,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of the source that will be used to resolve the tenant and subscription IDs.
	// Do not provide a tenant_id or subscription_id when providing a source_id.
	SourceId *string `json:"source_id,omitempty"`

	// ID of subscription where the image should be uploaded.
	// When providing a subscription_id, also be sure to provide a tenant_id and do not include a source_id.
	SubscriptionId *string `json:"subscription_id,omitempty"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	// When providing a tenant_id, also be sure to provide a subscription_id and do not include a source_id.
	TenantId *string `json:"tenant_id,omitempty"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneRequest defines model for CloneRequest.
type CloneRequest interface{}

// CloneResponse defines model for CloneResponse.
type CloneResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ClonesResponse defines model for ClonesResponse.
type ClonesResponse struct {
	Data  []ClonesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ClonesResponseItem defines model for ClonesResponseItem.
type ClonesResponseItem struct {
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Request   interface{}        `json:"request"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   Distributions   `json:"distribution"`
	ImageName      *string         `json:"image_name,omitempty"`

	// Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus    `json:"image_status"`
	Request     ComposeRequest `json:"request"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	ImageName *string            `json:"image_name,omitempty"`
	Request   interface{}        `json:"request"`
}

// Repository configuration for custom repositories.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above. Id is required.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg *bool     `json:"check_repo_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`

	// GPG key used to sign packages in this repository. Can be a gpg key or a URL
	Gpgkey     *[]string `json:"gpgkey,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`
	Name       *string   `json:"name,omitempty"`
	Priority   *int      `json:"priority,omitempty"`
	SslVerify  *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	CustomRepositories  *[]CustomRepository `json:"custom_repositories,omitempty"`
	Filesystem          *[]Filesystem       `json:"filesystem,omitempty"`
	Packages            *[]string           `json:"packages,omitempty"`
	PayloadRepositories *[]Repository       `json:"payload_repositories,omitempty"`
	Subscription        *Subscription       `json:"subscription,omitempty"`

	// list of users that a customer can add, also specifying their respective groups and SSH keys
	Users *[]User `json:"users,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions string

// DistributionsResponse defines model for DistributionsResponse.
type DistributionsResponse = []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {
	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	// CPU architecture of the image, x86_64 and aarch64 are currently supported.
	Architecture  ImageRequestArchitecture `json:"architecture"`
	ImageType     ImageTypes               `json:"image_type"`
	Ostree        *OSTree                  `json:"ostree,omitempty"`
	UploadRequest UploadRequest            `json:"upload_request"`
}

// CPU architecture of the image, x86_64 and aarch64 are currently supported.
type ImageRequestArchitecture string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusStatus   `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusStatus defines model for ImageStatus.Status.
type ImageStatusStatus string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool   `json:"check_repo_gpg,omitempty"`
	Gpgkey       *string `json:"gpgkey,omitempty"`
	IgnoreSsl    *bool   `json:"ignore_ssl,omitempty"`
	Metalink     *string `json:"metalink,omitempty"`
	Mirrorlist   *string `json:"mirrorlist,omitempty"`
	Rhsm         bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}        `json:"options"`
	Status  UploadStatusStatus `json:"status"`
	Type    UploadTypes        `json:"type"`
}

// UploadStatusStatus defines model for UploadStatus.Status.
type UploadStatusStatus string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Name   string `json:"name"`
	SshKey string `json:"ssh_key"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody = ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {
	// max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// CloneComposeJSONBody defines parameters for CloneCompose.
type CloneComposeJSONBody = CloneRequest

// GetComposeClonesParams defines parameters for GetComposeClones.
type GetComposeClonesParams struct {
	// max amount of clones, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// clones page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	// distribution to look up packages for
	Distribution Distributions `form:"distribution" json:"distribution"`

	// architecture to look up packages for
	Architecture GetPackagesParamsArchitecture `form:"architecture" json:"architecture"`

	// packages to look for
	Search string `form:"search" json:"search"`

	// max amount of packages, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParamsArchitecture defines parameters for GetPackages.
type GetPackagesParamsArchitecture string

// ComposeImageJSONRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody = ComposeImageJSONBody

// CloneComposeJSONRequestBody defines body for CloneCompose for application/json ContentType.
type CloneComposeJSONRequestBody = CloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// get status of a compose clone
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id openapi_types.UUID) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// delete a compose
	// (DELETE /composes/{composeId})
	DeleteCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId openapi_types.UUID) error
	// clone a compose
	// (POST /composes/{composeId}/clone)
	CloneCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get clones of a compose
	// (GET /composes/{composeId}/clones)
	GetComposeClones(ctx echo.Context, composeId openapi_types.UUID, params GetComposeClonesParams) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId openapi_types.UUID) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// DeleteCompose converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompose(ctx, composeId)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// CloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) CloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CloneCompose(ctx, composeId)
	return err
}

// GetComposeClones converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeClones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposeClonesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeClones(ctx, composeId, params)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/architectures/:distribution", wrapper.GetArchitectures)
	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.ComposeImage)
	router.GET(baseURL+"/composes", wrapper.GetComposes)
	router.DELETE(baseURL+"/composes/:composeId", wrapper.DeleteCompose)
	router.GET(baseURL+"/composes/:composeId", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:composeId/clone", wrapper.CloneCompose)
	router.GET(baseURL+"/composes/:composeId/clones", wrapper.GetComposeClones)
	router.GET(baseURL+"/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/distributions", wrapper.GetDistributions)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)
	router.GET(baseURL+"/packages", wrapper.GetPackages)
	router.GET(baseURL+"/ready", wrapper.GetReadiness)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"qN3zPqukvt6+/l8AAAD//4qbQSCDXgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
