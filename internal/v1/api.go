// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for Distributions.
const (
	Centos8 Distributions = "centos-8"
	Centos9 Distributions = "centos-9"
	Rhel8   Distributions = "rhel-8"
	Rhel84  Distributions = "rhel-84"
	Rhel85  Distributions = "rhel-85"
	Rhel86  Distributions = "rhel-86"
	Rhel9   Distributions = "rhel-9"
	Rhel90  Distributions = "rhel-90"
)

// Defines values for ImageRequestArchitecture.
const (
	X8664 ImageRequestArchitecture = "x86_64"
)

// Defines values for ImageStatusStatus.
const (
	ImageStatusStatusBuilding    ImageStatusStatus = "building"
	ImageStatusStatusFailure     ImageStatusStatus = "failure"
	ImageStatusStatusPending     ImageStatusStatus = "pending"
	ImageStatusStatusRegistering ImageStatusStatus = "registering"
	ImageStatusStatusSuccess     ImageStatusStatus = "success"
	ImageStatusStatusUploading   ImageStatusStatus = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAmi               ImageTypes = "ami"
	ImageTypesAws               ImageTypes = "aws"
	ImageTypesAzure             ImageTypes = "azure"
	ImageTypesEdgeCommit        ImageTypes = "edge-commit"
	ImageTypesEdgeInstaller     ImageTypes = "edge-installer"
	ImageTypesGcp               ImageTypes = "gcp"
	ImageTypesGuestImage        ImageTypes = "guest-image"
	ImageTypesImageInstaller    ImageTypes = "image-installer"
	ImageTypesRhelEdgeCommit    ImageTypes = "rhel-edge-commit"
	ImageTypesRhelEdgeInstaller ImageTypes = "rhel-edge-installer"
	ImageTypesVhd               ImageTypes = "vhd"
	ImageTypesVsphere           ImageTypes = "vsphere"
)

// Defines values for UploadStatusStatus.
const (
	UploadStatusStatusFailure UploadStatusStatus = "failure"
	UploadStatusStatusPending UploadStatusStatus = "pending"
	UploadStatusStatusRunning UploadStatusStatus = "running"
	UploadStatusStatusSuccess UploadStatusStatus = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws   UploadTypes = "aws"
	UploadTypesAwsS3 UploadTypes = "aws.s3"
	UploadTypesAzure UploadTypes = "azure"
	UploadTypesGcp   UploadTypes = "gcp"
)

// AWSEC2Clone defines model for AWSEC2Clone.
type AWSEC2Clone struct {
	// A region as described in
	// https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-regions
	Region string `json:"region"`

	// An array of AWS account IDs as described in
	// https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions = map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`
}

// Architectures defines model for Architectures.
type Architectures = []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {
	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneRequest defines model for CloneRequest.
type CloneRequest interface{}

// CloneResponse defines model for CloneResponse.
type CloneResponse struct {
	Id string `json:"id"`
}

// ClonesResponse defines model for ClonesResponse.
type ClonesResponse struct {
	Data  []ClonesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ClonesResponseItem defines model for ClonesResponseItem.
type ClonesResponseItem struct {
	CreatedAt string      `json:"created_at"`
	Id        string      `json:"id"`
	Request   interface{} `json:"request"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   Distributions   `json:"distribution"`
	ImageName      *string         `json:"image_name,omitempty"`

	// Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id string `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus `json:"image_status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string      `json:"created_at"`
	Id        string      `json:"id"`
	ImageName *string     `json:"image_name,omitempty"`
	Request   interface{} `json:"request"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Filesystem          *[]Filesystem `json:"filesystem,omitempty"`
	Packages            *[]string     `json:"packages,omitempty"`
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Subscription        *Subscription `json:"subscription,omitempty"`

	// list of users that a customer can add, also specifying their respective groups and SSH keys
	Users *[]User `json:"users,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions string

// DistributionsResponse defines model for DistributionsResponse.
type DistributionsResponse = []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {
	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	// CPU architecture of the image, only x86_64 is currently supported.
	Architecture  ImageRequestArchitecture `json:"architecture"`
	ImageType     ImageTypes               `json:"image_type"`
	Ostree        *OSTree                  `json:"ostree,omitempty"`
	UploadRequest UploadRequest            `json:"upload_request"`
}

// CPU architecture of the image, only x86_64 is currently supported.
type ImageRequestArchitecture string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusStatus   `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusStatus defines model for ImageStatus.Status.
type ImageStatusStatus string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// OSTree defines model for OSTree.
type OSTree struct {
	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`
	Url    *string `json:"url,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl    *string `json:"baseurl,omitempty"`
	CheckGpg   *bool   `json:"check_gpg,omitempty"`
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`
	Rhsm       bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`
	ServerUrl     string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}        `json:"options"`
	Status  UploadStatusStatus `json:"status"`
	Type    UploadTypes        `json:"type"`
}

// UploadStatusStatus defines model for UploadStatus.Status.
type UploadStatusStatus string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Name   string `json:"name"`
	SshKey string `json:"ssh_key"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody = ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {
	// max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// CloneComposeJSONBody defines parameters for CloneCompose.
type CloneComposeJSONBody = CloneRequest

// GetComposeClonesParams defines parameters for GetComposeClones.
type GetComposeClonesParams struct {
	// max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	// distribution to look up packages for
	Distribution Distributions `form:"distribution" json:"distribution"`

	// architecture to look up packages for
	Architecture GetPackagesParamsArchitecture `form:"architecture" json:"architecture"`

	// packages to look for
	Search string `form:"search" json:"search"`

	// max amount of packages, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParamsArchitecture defines parameters for GetPackages.
type GetPackagesParamsArchitecture string

// ComposeImageJSONRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody = ComposeImageJSONBody

// CloneComposeJSONRequestBody defines body for CloneCompose for application/json ContentType.
type CloneComposeJSONRequestBody = CloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// get status of a compose clone
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId string) error
	// clone a compose
	// (POST /composes/{composeId}/clone)
	CloneCompose(ctx echo.Context, composeId string) error
	// get clones of a compose
	// (GET /composes/{composeId}/clones)
	GetComposeClones(ctx echo.Context, composeId string, params GetComposeClonesParams) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId string) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// CloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) CloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CloneCompose(ctx, composeId)
	return err
}

// GetComposeClones converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeClones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposeClonesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeClones(ctx, composeId, params)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/architectures/:distribution", wrapper.GetArchitectures)
	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.ComposeImage)
	router.GET(baseURL+"/composes", wrapper.GetComposes)
	router.GET(baseURL+"/composes/:composeId", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:composeId/clone", wrapper.CloneCompose)
	router.GET(baseURL+"/composes/:composeId/clones", wrapper.GetComposeClones)
	router.GET(baseURL+"/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/distributions", wrapper.GetDistributions)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)
	router.GET(baseURL+"/packages", wrapper.GetPackages)
	router.GET(baseURL+"/ready", wrapper.GetReadiness)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
