// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for Distributions.
const (
	Centos8  Distributions = "centos-8"
	Centos9  Distributions = "centos-9"
	Fedora35 Distributions = "fedora-35"
	Fedora36 Distributions = "fedora-36"
	Fedora37 Distributions = "fedora-37"
	Fedora38 Distributions = "fedora-38"
	Rhel8    Distributions = "rhel-8"
	Rhel84   Distributions = "rhel-84"
	Rhel85   Distributions = "rhel-85"
	Rhel86   Distributions = "rhel-86"
	Rhel87   Distributions = "rhel-87"
	Rhel9    Distributions = "rhel-9"
	Rhel90   Distributions = "rhel-90"
	Rhel91   Distributions = "rhel-91"
)

// Defines values for ImageRequestArchitecture.
const (
	Aarch64 ImageRequestArchitecture = "aarch64"
	X8664   ImageRequestArchitecture = "x86_64"
)

// Defines values for ImageStatusStatus.
const (
	ImageStatusStatusBuilding    ImageStatusStatus = "building"
	ImageStatusStatusFailure     ImageStatusStatus = "failure"
	ImageStatusStatusPending     ImageStatusStatus = "pending"
	ImageStatusStatusRegistering ImageStatusStatus = "registering"
	ImageStatusStatusSuccess     ImageStatusStatus = "success"
	ImageStatusStatusUploading   ImageStatusStatus = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAmi               ImageTypes = "ami"
	ImageTypesAws               ImageTypes = "aws"
	ImageTypesAzure             ImageTypes = "azure"
	ImageTypesEdgeCommit        ImageTypes = "edge-commit"
	ImageTypesEdgeInstaller     ImageTypes = "edge-installer"
	ImageTypesGcp               ImageTypes = "gcp"
	ImageTypesGuestImage        ImageTypes = "guest-image"
	ImageTypesImageInstaller    ImageTypes = "image-installer"
	ImageTypesRhelEdgeCommit    ImageTypes = "rhel-edge-commit"
	ImageTypesRhelEdgeInstaller ImageTypes = "rhel-edge-installer"
	ImageTypesVhd               ImageTypes = "vhd"
	ImageTypesVsphere           ImageTypes = "vsphere"
)

// Defines values for UploadStatusStatus.
const (
	UploadStatusStatusFailure UploadStatusStatus = "failure"
	UploadStatusStatusPending UploadStatusStatus = "pending"
	UploadStatusStatusRunning UploadStatusStatus = "running"
	UploadStatusStatusSuccess UploadStatusStatus = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws   UploadTypes = "aws"
	UploadTypesAwsS3 UploadTypes = "aws.s3"
	UploadTypesAzure UploadTypes = "azure"
	UploadTypesGcp   UploadTypes = "gcp"
)

// AWSEC2Clone defines model for AWSEC2Clone.
type AWSEC2Clone struct {
	// A region as described in
	// https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-regions
	Region string `json:"region"`

	// An array of AWS account IDs as described in
	// https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions = map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`

	// Base repositories for the given distribution and architecture.
	Repositories []Repository `json:"repositories"`
}

// Architectures defines model for Architectures.
type Architectures = []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {
	// Name of the created image.
	// Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens.
	// The total length is limited to 60 characters.
	ImageName *string `json:"image_name,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneRequest defines model for CloneRequest.
type CloneRequest interface{}

// CloneResponse defines model for CloneResponse.
type CloneResponse struct {
	Id string `json:"id"`
}

// ClonesResponse defines model for ClonesResponse.
type ClonesResponse struct {
	Data  []ClonesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ClonesResponseItem defines model for ClonesResponseItem.
type ClonesResponseItem struct {
	CreatedAt string      `json:"created_at"`
	Id        string      `json:"id"`
	Request   interface{} `json:"request"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   Distributions   `json:"distribution"`
	ImageName      *string         `json:"image_name,omitempty"`

	// Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id string `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus `json:"image_status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string      `json:"created_at"`
	Id        string      `json:"id"`
	ImageName *string     `json:"image_name,omitempty"`
	Request   interface{} `json:"request"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Filesystem          *[]Filesystem `json:"filesystem,omitempty"`
	Packages            *[]string     `json:"packages,omitempty"`
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Subscription        *Subscription `json:"subscription,omitempty"`

	// list of users that a customer can add, also specifying their respective groups and SSH keys
	Users *[]User `json:"users,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions string

// DistributionsResponse defines model for DistributionsResponse.
type DistributionsResponse = []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {
	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	// CPU architecture of the image, x86_64 and aarch64 are currently supported.
	Architecture  ImageRequestArchitecture `json:"architecture"`
	ImageType     ImageTypes               `json:"image_type"`
	Ostree        *OSTree                  `json:"ostree,omitempty"`
	UploadRequest UploadRequest            `json:"upload_request"`
}

// CPU architecture of the image, x86_64 and aarch64 are currently supported.
type ImageRequestArchitecture string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusStatus   `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusStatus defines model for ImageStatus.Status.
type ImageStatusStatus string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl    *string `json:"baseurl,omitempty"`
	CheckGpg   *bool   `json:"check_gpg,omitempty"`
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`
	Rhsm       bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`
	ServerUrl     string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}        `json:"options"`
	Status  UploadStatusStatus `json:"status"`
	Type    UploadTypes        `json:"type"`
}

// UploadStatusStatus defines model for UploadStatus.Status.
type UploadStatusStatus string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Name   string `json:"name"`
	SshKey string `json:"ssh_key"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody = ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {
	// max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// CloneComposeJSONBody defines parameters for CloneCompose.
type CloneComposeJSONBody = CloneRequest

// GetComposeClonesParams defines parameters for GetComposeClones.
type GetComposeClonesParams struct {
	// max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	// distribution to look up packages for
	Distribution Distributions `form:"distribution" json:"distribution"`

	// architecture to look up packages for
	Architecture GetPackagesParamsArchitecture `form:"architecture" json:"architecture"`

	// packages to look for
	Search string `form:"search" json:"search"`

	// max amount of packages, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParamsArchitecture defines parameters for GetPackages.
type GetPackagesParamsArchitecture string

// ComposeImageJSONRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody = ComposeImageJSONBody

// CloneComposeJSONRequestBody defines body for CloneCompose for application/json ContentType.
type CloneComposeJSONRequestBody = CloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// get status of a compose clone
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId string) error
	// clone a compose
	// (POST /composes/{composeId}/clone)
	CloneCompose(ctx echo.Context, composeId string) error
	// get clones of a compose
	// (GET /composes/{composeId}/clones)
	GetComposeClones(ctx echo.Context, composeId string, params GetComposeClonesParams) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId string) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// CloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) CloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CloneCompose(ctx, composeId)
	return err
}

// GetComposeClones converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeClones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposeClonesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeClones(ctx, composeId, params)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/architectures/:distribution", wrapper.GetArchitectures)
	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.ComposeImage)
	router.GET(baseURL+"/composes", wrapper.GetComposes)
	router.GET(baseURL+"/composes/:composeId", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:composeId/clone", wrapper.CloneCompose)
	router.GET(baseURL+"/composes/:composeId/clones", wrapper.GetComposeClones)
	router.GET(baseURL+"/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/distributions", wrapper.GetDistributions)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)
	router.GET(baseURL+"/packages", wrapper.GetPackages)
	router.GET(baseURL+"/ready", wrapper.GetReadiness)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
