// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for Distributions.
const (
	Centos8      Distributions = "centos-8"
	Centos9      Distributions = "centos-9"
	Fedora37     Distributions = "fedora-37"
	Fedora38     Distributions = "fedora-38"
	Fedora39     Distributions = "fedora-39"
	Fedora40     Distributions = "fedora-40"
	Rhel8        Distributions = "rhel-8"
	Rhel84       Distributions = "rhel-84"
	Rhel85       Distributions = "rhel-85"
	Rhel86       Distributions = "rhel-86"
	Rhel87       Distributions = "rhel-87"
	Rhel88       Distributions = "rhel-88"
	Rhel8Nightly Distributions = "rhel-8-nightly"
	Rhel9        Distributions = "rhel-9"
	Rhel90       Distributions = "rhel-90"
	Rhel91       Distributions = "rhel-91"
	Rhel92       Distributions = "rhel-92"
	Rhel9Nightly Distributions = "rhel-9-nightly"
)

// Defines values for ImageRequestArchitecture.
const (
	Aarch64 ImageRequestArchitecture = "aarch64"
	X8664   ImageRequestArchitecture = "x86_64"
)

// Defines values for ImageStatusStatus.
const (
	ImageStatusStatusBuilding    ImageStatusStatus = "building"
	ImageStatusStatusFailure     ImageStatusStatus = "failure"
	ImageStatusStatusPending     ImageStatusStatus = "pending"
	ImageStatusStatusRegistering ImageStatusStatus = "registering"
	ImageStatusStatusSuccess     ImageStatusStatus = "success"
	ImageStatusStatusUploading   ImageStatusStatus = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAmi               ImageTypes = "ami"
	ImageTypesAws               ImageTypes = "aws"
	ImageTypesAzure             ImageTypes = "azure"
	ImageTypesEdgeCommit        ImageTypes = "edge-commit"
	ImageTypesEdgeInstaller     ImageTypes = "edge-installer"
	ImageTypesGcp               ImageTypes = "gcp"
	ImageTypesGuestImage        ImageTypes = "guest-image"
	ImageTypesImageInstaller    ImageTypes = "image-installer"
	ImageTypesRhelEdgeCommit    ImageTypes = "rhel-edge-commit"
	ImageTypesRhelEdgeInstaller ImageTypes = "rhel-edge-installer"
	ImageTypesVhd               ImageTypes = "vhd"
	ImageTypesVsphere           ImageTypes = "vsphere"
	ImageTypesVsphereOva        ImageTypes = "vsphere-ova"
	ImageTypesWsl               ImageTypes = "wsl"
)

// Defines values for UploadStatusStatus.
const (
	UploadStatusStatusFailure UploadStatusStatus = "failure"
	UploadStatusStatusPending UploadStatusStatus = "pending"
	UploadStatusStatusRunning UploadStatusStatus = "running"
	UploadStatusStatusSuccess UploadStatusStatus = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws   UploadTypes = "aws"
	UploadTypesAwsS3 UploadTypes = "aws.s3"
	UploadTypesAzure UploadTypes = "azure"
	UploadTypesGcp   UploadTypes = "gcp"
)

// AWSEC2Clone defines model for AWSEC2Clone.
type AWSEC2Clone struct {
	// A region as described in
	// https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-regions
	Region string `json:"region"`

	// An array of AWS account IDs as described in
	// https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions = map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`

	// Base repositories for the given distribution and architecture.
	Repositories []Repository `json:"repositories"`
}

// Architectures defines model for Architectures.
type Architectures = []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {
	// Name of the created image.
	// Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens.
	// The total length is limited to 60 characters.
	ImageName *string `json:"image_name,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of the source that will be used to resolve the tenant and subscription IDs.
	// Do not provide a tenant_id or subscription_id when providing a source_id.
	SourceId *string `json:"source_id,omitempty"`

	// ID of subscription where the image should be uploaded.
	// When providing a subscription_id, also be sure to provide a tenant_id and do not include a source_id.
	SubscriptionId *string `json:"subscription_id,omitempty"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	// When providing a tenant_id, also be sure to provide a subscription_id and do not include a source_id.
	TenantId *string `json:"tenant_id,omitempty"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneRequest defines model for CloneRequest.
type CloneRequest interface{}

// CloneResponse defines model for CloneResponse.
type CloneResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ClonesResponse defines model for ClonesResponse.
type ClonesResponse struct {
	Data  []ClonesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ClonesResponseItem defines model for ClonesResponseItem.
type ClonesResponseItem struct {
	// UUID of the parent compose of the clone
	ComposeId openapi_types.UUID `json:"compose_id"`
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Request   CloneRequest       `json:"request"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`

	// List of all distributions that image builder supports. A user might not have access to
	// restricted distributions.
	//
	// Restricted distributions include the RHEL nightlies and the Fedora distributions.
	Distribution     Distributions `json:"distribution"`
	ImageDescription *string       `json:"image_description,omitempty"`
	ImageName        *string       `json:"image_name,omitempty"`

	// Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus    `json:"image_status"`
	Request     ComposeRequest `json:"request"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	ImageName *string            `json:"image_name,omitempty"`
	Request   ComposeRequest     `json:"request"`
}

// Repository configuration for custom repositories.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above. Id is required.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg *bool     `json:"check_repo_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`

	// GPG key used to sign packages in this repository. Can be a gpg key or a URL
	Gpgkey     *[]string `json:"gpgkey,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`
	Name       *string   `json:"name,omitempty"`
	Priority   *int      `json:"priority,omitempty"`
	SslVerify  *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	CustomRepositories  *[]CustomRepository `json:"custom_repositories,omitempty"`
	Filesystem          *[]Filesystem       `json:"filesystem,omitempty"`
	Openscap            *OpenSCAP           `json:"openscap,omitempty"`
	Packages            *[]string           `json:"packages,omitempty"`
	PayloadRepositories *[]Repository       `json:"payload_repositories,omitempty"`
	Subscription        *Subscription       `json:"subscription,omitempty"`

	// list of users that a customer can add, also specifying their respective groups and SSH keys
	Users *[]User `json:"users,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// List of all distributions that image builder supports. A user might not have access to
// restricted distributions.
//
// Restricted distributions include the RHEL nightlies and the Fedora distributions.
type Distributions string

// List of distributions this user is allowed to build.
type DistributionsResponse = []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {
	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	// CPU architecture of the image, x86_64 and aarch64 are currently supported.
	Architecture ImageRequestArchitecture `json:"architecture"`
	ImageType    ImageTypes               `json:"image_type"`
	Ostree       *OSTree                  `json:"ostree,omitempty"`

	// Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size          *uint64       `json:"size,omitempty"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// CPU architecture of the image, x86_64 and aarch64 are currently supported.
type ImageRequestArchitecture string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusStatus   `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusStatus defines model for ImageStatus.Status.
type ImageStatusStatus string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	ProfileId string `json:"profile_id"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool   `json:"check_repo_gpg,omitempty"`
	Gpgkey       *string `json:"gpgkey,omitempty"`
	IgnoreSsl    *bool   `json:"ignore_ssl,omitempty"`
	Metalink     *string `json:"metalink,omitempty"`
	Mirrorlist   *string `json:"mirrorlist,omitempty"`
	Rhsm         bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}        `json:"options"`
	Status  UploadStatusStatus `json:"status"`
	Type    UploadTypes        `json:"type"`
}

// UploadStatusStatus defines model for UploadStatus.Status.
type UploadStatusStatus string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Name   string `json:"name"`
	SshKey string `json:"ssh_key"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody = ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {
	// max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// CloneComposeJSONBody defines parameters for CloneCompose.
type CloneComposeJSONBody = CloneRequest

// GetComposeClonesParams defines parameters for GetComposeClones.
type GetComposeClonesParams struct {
	// max amount of clones, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// clones page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	// distribution to look up packages for
	Distribution Distributions `form:"distribution" json:"distribution"`

	// architecture to look up packages for
	Architecture GetPackagesParamsArchitecture `form:"architecture" json:"architecture"`

	// packages to look for
	Search string `form:"search" json:"search"`

	// max amount of packages, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParamsArchitecture defines parameters for GetPackages.
type GetPackagesParamsArchitecture string

// ComposeImageJSONRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody = ComposeImageJSONBody

// CloneComposeJSONRequestBody defines body for CloneCompose for application/json ContentType.
type CloneComposeJSONRequestBody = CloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution Distributions) error
	// get status of a compose clone
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id openapi_types.UUID) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// delete a compose
	// (DELETE /composes/{composeId})
	DeleteCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId openapi_types.UUID) error
	// clone a compose
	// (POST /composes/{composeId}/clone)
	CloneCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get clones of a compose
	// (GET /composes/{composeId}/clones)
	GetComposeClones(ctx echo.Context, composeId openapi_types.UUID, params GetComposeClonesParams) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId openapi_types.UUID) error
	// get the distributions available to this user
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution Distributions

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// DeleteCompose converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompose(ctx, composeId)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// CloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) CloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CloneCompose(ctx, composeId)
	return err
}

// GetComposeClones converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeClones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposeClonesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeClones(ctx, composeId, params)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/architectures/:distribution", wrapper.GetArchitectures)
	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.ComposeImage)
	router.GET(baseURL+"/composes", wrapper.GetComposes)
	router.DELETE(baseURL+"/composes/:composeId", wrapper.DeleteCompose)
	router.GET(baseURL+"/composes/:composeId", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:composeId/clone", wrapper.CloneCompose)
	router.GET(baseURL+"/composes/:composeId/clones", wrapper.GetComposeClones)
	router.GET(baseURL+"/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/distributions", wrapper.GetDistributions)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)
	router.GET(baseURL+"/packages", wrapper.GetPackages)
	router.GET(baseURL+"/ready", wrapper.GetReadiness)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"2Xh27mfj8oXVHfaK3cfjJXwoWjqxm+Hv+vnFHDr3U6NVnY+I7ugH+Pbi+vi4d9xqNiunuN1G5zWHWafn",
	"de+e33Z7vZL2VNWfLfL21DhtOuoMtc4WjdPWYtYZkeNF5+z0ll60mrx1fPzUai7arXOz3TqtNJstc3a7",
	"mn1w9dQs1I+fXNNeDprPT+fWdHlpjUjhYFJ7v5ncz8fnJa39Wp516tenx1ca6T4eHN8VHW8+OHgdeoPy",
	"Q5cdl53ymWcL97LfvrjsCqfaPhmRIjt7f2zSYXHpHj51Gt3midFrta6X0+aU04e7Rv3pzmsdFMZkyoao",
	"X+r2r1uT5U2rXns4bFTx9f2IONXBwZjfnizqrVKX2UazV+mdeHT5XBxgcQafK5e33XtxMGzDYgXzp8FZ",
	"a/pO6zdPjfvyxfWsqo2I+fpgNkpXhbFTar8P6sNG+aF9Mi7a82mlY8/fzM7rJTKLxffHpzeHPQ2eLy5a",
	"k/n75MC+GtS8N/N8RKZvhQttaT+Xunh8xmpnzeby+vDugTWfB4tBT2vr02Fj0W6Rt9ngxFu+Og+L+/nV",
	"8aPX7tw3rlH5aUR6+K44ubhqcKN+4vLTt2rv4NEgPXI7ODhn0+HN5UnZeWB20yDtoWU83TemzzP3wTpZ",
	"8nLh8BBdj4g101iXLLXp1WIGvUkB3zWu9drjvDebdvu9C7N6d3h/ubzwHh7E++KRTHtX1Yf+6fHrZYU/",
	"U6fXG5GJGA/PiwfV5bj/UGiW58dj+NZ/KIn63fvVVH9Hs8FzG8Pu1WG3cK5ftDr94u1po9YonRhNu316",
	"aIzIrGTe4qfBbRPCC+3iovl+Pu/P+hfdrnlZerp9wudX98uSKF8sTyecQae6GLQerifWDeosu8fD54sR",
	"mTP3yr4ZowkfHlbrw0np+Krjme/PrFW9fzsZXM6ezb5VvD+bDzq3pLV8n90ua+270uuNix+qh1JHWTed",
	"x2d2SfXL8mV3cFjA7xe3w74tpr3m7yPy+81kWB8RZV3aVyefmZ4v1K3X45NY20PgAyUd8NDH8P0lnp8g",
	"gzLoMio92jxlZiGc93dpWX/33+fKJd8lh0y3fo+qwrvcjJVTtolEhIN8ndcREZSr9f/OkPT00O+NHBcM",
	"QSe2MpT/1ir+Lwq/Y8jR9WAPXLa6Hy7DlGGxTA/yOLdf5ojhyTLNs0kJjtMC8Y0ET1oC6GW9Dr5f9Lfu",
	"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",
	"wGSPTmUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
