// Package v1 provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`
}

// Architectures defines model for Architectures.
type Architectures []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {

	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequests  []ImageRequest  `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id string `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus `json:"image_status"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string      `json:"created_at"`
	Id        string      `json:"id"`
	Request   interface{} `json:"request"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Packages     *[]string     `json:"packages,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions []DistributionItem

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {

	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture  string        `json:"architecture"`
	ImageType     string        `json:"image_type"`
	Ostree        *OSTree       `json:"ostree,omitempty"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Status       string        `json:"status"`
	UploadStatus *UploadStatus `json:"upload_status,omitempty"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	Ref *string `json:"ref,omitempty"`
	Url *string `json:"url,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`
	ServerUrl     string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{} `json:"options"`
	Status  string      `json:"status"`
	Type    UploadTypes `json:"type"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// List of UploadTypes
const (
	UploadTypes_aws    UploadTypes = "aws"
	UploadTypes_aws_s3 UploadTypes = "aws.s3"
	UploadTypes_azure  UploadTypes = "azure"
	UploadTypes_gcp    UploadTypes = "gcp"
)

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {

	// max amount of composes, default 100
	Limit *int `json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {

	// distribution to look up packages for
	Distribution string `json:"distribution"`

	// architecture to look up packages for
	Architecture string `json:"architecture"`

	// packages to look for
	Search string `json:"search"`

	// max amount of packages, default 100
	Limit *int `json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// ComposeImageRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody ComposeImageJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId string) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId string) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameter("simple", false, "distribution", ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameter("simple", false, "composeId", ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameter("simple", false, "composeId", ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/architectures/:distribution", wrapper.GetArchitectures)
	router.POST("/compose", wrapper.ComposeImage)
	router.GET("/composes", wrapper.GetComposes)
	router.GET("/composes/:composeId", wrapper.GetComposeStatus)
	router.GET("/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET("/distributions", wrapper.GetDistributions)
	router.GET("/openapi.json", wrapper.GetOpenapiJson)
	router.GET("/packages", wrapper.GetPackages)
	router.GET("/ready", wrapper.GetReadiness)
	router.GET("/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xae28buRH/KsS2QO6AfUnyKwIOvTTn5lykSRC76R+JYVC7Iy0vu+SG5FrxBfruBR/7",
	"5kryXdL2+pdlcTjz48xwXtQXL2FFyShQKbzlF08kGRRYf3z2r+vrxT/LnOH0LXyqQMjXpSSM6kX5UIK3",
	"9NjqF0ikt/O71NcSy0pTlZyVwCUB/V/F885WITmhG2+38z0OnyrCIfWW7zXRre/kP4WlL0VkmMPdlsjs",
	"DicJq+zB4DMuyhyUiNl8cXJ6dn7xNJ7NlSwioRAOZA0KzDl+8HyvouRTBVeGXPIKhuBdsvceZkpVuCA9",
	"0OqLIE4uFvH508X5+enp09P0ZOX5Y8gcNoTR/maogi0IGczGGwYHUHIbHk7kPMmIhERWXCvCAZ0nWV/8",
	"54uzu7MTF1hS4A3cqa/11sYQ7d5PCdvOXVt7phkdQ2Hosz90mD6AP3NYe0vvT1F7OyJ7NaKRCkZofO/Z",
	"rxWH4/yVg2AVT+Buw1lVqm9SEAknmt5beq9wAYitkcwA1bRI06JtBhz0gj4pEhmr8hStAFVaNKThB+r5",
	"HXXesCrB9K1l80JLdChXVKsGwh1Jx6CuflKQumS/AcwJnKYXq3kS4NX8JDg5mS2Cp3FyGpzN5ov4DC7i",
	"p+A2PVBM5R5cCoQhOgYVusmIQDmhHxF8LnNMqEAZ236gkqE1oSkiEhGqeWizojeMS5wvP9BMylIsoyhl",
	"iQgLknAm2FqGCSsioEElIqzoI5xIcg9BSjgkkvGHaF3RFBdAJc7FaDXI2DaQLFCiA3OKgd5Ok3NYn67O",
	"glmyWAcnKY4DfDafB/EqPovni6fpeXp+8Ka3Shyb2x86pfPytC4+FcXM/aO4gP6lLh4CvXQQZIeBC8Jz",
	"dTkF/AMkTrHEYwBMSA5wl7CiINLpLd9lWGTf106zqkgukSV3eF6Jk494Y3j3Wb0xKygnQnlLklcpoRv0",
	"6vLd22eef1xgsTya47ii3JQObJQZqyCphGQF+RU34WcfhOd96p3vpUQdf1XJUVbhGeTBxXRY5wbS8YH1",
	"Sm2rD/Ibsm8P6gjF7T7liZJRAQ4PTg9XLCT1blte+++CaFYPKsIycl8Jy6cjV0wfor4bRxlhyG4qw6l4",
	"6TjmmnDjha2fRLgkkYYdqPuVAo/uZ0a0APGXnBRE/jCLP1RxPD9j67UA+UPscqscfw3Ws/hg2DGHsAJd",
	"flOAK9rogq/jL4RK2AAfsTd0Y74DMi2kVrRvrOgyuLsMSzhgCekdls7K1unYRr4JIw4vb5f9LnuNaRRl",
	"+mi6gbNTiZdMyA0H8Sl/RB0+qE8OOfR1l9YZQn/qxA23MnuxvuuAbyFFP2OJLqkEXnIiAL0ktPqMvnv7",
	"8+XL79FF6KxgxilxKpgOrKA3+j08twdOdHz8HenBofkXz9/8rjasnzVfqmzJ1uge5yRFLxjb5IBqciQZ",
	"0lxs+VYyLiFFyv0rCegVS+uiTkkJP9BLnGTIKA4VlVCJnEpMKMJIlJCQNQFeZ3orBKnzheidlr9mvMBS",
	"IMxh+YEiFKAnlQC+/AIFJjlJd0+W6BlF+j+E05SDEEhmWCIOJQehlNnKShQLNDhUiP7GOLJm99ETnJME",
	"frT/q8LxSWglC+D3JIFnZt8jMRjRlsWU7OIhYDIDHuCy/BGXpSiZDDd2U72nC0nXgo/Vhj2/3hsaXAMV",
	"pAWhwqmDlBWY0OUX81cJvMkAvUDXFZGAzLfou5KTAvOH78fC89wIVAZXlhTG+ljavUONbDRWDQExjp6M",
	"MCF0tUaUycafUv+gcxJhdihPTrWrIkwfDLday/0C/72n3W7kG6pS73vFsSb0fM8Yb6xsFU2Mmrtf/lem",
	"Ik1s+Xr9hK84KP62W+wMVEQCNMVUBiuOSRos4sXpbHEwAHfY+Yfak59vbt5ccs64K6FITHK3donM4XDV",
	"acj8mtNtV54Kq2OZoJaOzwYt+kPTFstYQeiV8M7RUD05cVclzcDGuWzauUPAX1/fKKqd75kW/64tavbu",
	"6+U150ipwd5DOpLTKGLKj9suAGhV6CtSJQkIVeatMcmNiBKo6iE939O1rfloRJnPHDZESNDaue0OCFpu",
	"IxVaqMf1Ib3bOLrVbQtiNe4Yba3HVU50EZmBYASp+8pOzolHN8x2zGPJdYxwTLYKlSwO3y9badX0t620",
	"6XFDPfocSYWSTaxMAuWQAxYThyCbIj2dWqJ48n5N3qx74MIWtwfCjvF4q516WwvXr2evFmNHb1+rQ62N",
	"/g2a0rpNmWhKzX/dMUMYhuHvaVX3C5wdLfGP08A6wLwFFdFUwHJEkM7S/jO3pC4Z14OOcXBxE0nude8a",
	"fISHUXEhIOEg9ZLvmS7BW3olFmLLeOqy/woLCGwca1llUpbLKEpSGnJIM2xGxc4JGhVkkw1erlRt1dCu",
	"GMsBU50W+QZT23v3Nszjk3gxP/FH9jSFJPAxxG5nHfJMFB2kB92uB8QfarUntKOizmldluun5fGIt21A",
	"MX14vfaW7w8830w8JO78g/smnkMP7ZzqmQ9KnHxE2t12gvnhDH6jX8AmQnmtwGndT5UxHdUzCo9RfV1S",
	"HK/yI3cMW4hHqLjeoVT72AKNV5TaKmwy5/5WM1ks/shejX1u6vfTGizeKvpNUqpL+KsBi7ciFAsnwndt",
	"8u8b+OiqoCa83e108Fqz8azn2k4jbJee4wdhO2SdD1EzqFcZIwFbJ5j6yHtW4iQDNA9jz9aHXv34tt1u",
	"Q6yXQ8Y3kd0ropdXzy9fXV8G8zAOM1nknd7KVOd1Hq7nJJ16ZunNwliH1hIoLom39BZhHM6U0bHMtHKi",
	"bkcgoi/dJL1TBBuQ5pYA10HwKvWW3guQ/VdnxZHjAiSo3uz9UGtdrmjNONpmJMmQZChn7COqSoTvMcnx",
	"KgeEB4wd00VCdeKSWV3DLYevJq1ZTboxLupygVv9TKgrOq2QeRybIoJKMGUELsucJPrw0S/COFLL79g3",
	"dnUldv5AL9i8tLH11PkRpimSGRCOsBAsIVhCah1ONhetaQeUtcxgcIJJZ2dHpLIIRhtyDxT1FKmY1w8R",
	"+mIx4XiAtASonl70fcUO+q/sor0gf2Xpw1fT8+D10KFoM1/QkzOrAoZWgCzydOQxu5FXzL4+WttHOODW",
	"Gs2wQEJiLiFV9/jkK/pmf8ziwKDcqMZhjYaIQAXOVe2oAPU8r+8EXccR+8JI/Qx0KIIU+DPChR52s3WN",
	"S/gohTWucolmcVwHhk8V8Ic2MuiexOuGALvHW87i2PcKQkmhMs7Md3QME74uUKm8yHQ4LYopDIbODaIL",
	"IXZA+JYBavTqujdGNfYcxxyMEpbnkOgAz9ao5HBPWCWGHiR0rFGulbPNRoUyqmfafYeJvthPV2k3B/Vx",
	"mYpCx05qL3UdqfxJP7uuy5C9znaVdo6LrCDJ0Ebb0JF9Grj/M6mnf949IUa0c7G+Sffod9JYUdGZKjmt",
	"VhOYnHO84Zpx1aNM10j7Qxqv/QnNtPmKlmZowObwkyZMhw+sU1G6/xL7DU/eF3RkxZQONjkLoj3Uka2P",
	"wxrrlBpeG7q/C1tjjpXQB8tBVpwKJDMiUMqSqlAKcgO0GJDC0Dy+1jMIiTeimUXdaszd3yJM4a1Hlo8q",
	"zztFeS1DXdaJzHZ03V13dU0Rbz6ceL6XAJVMBBeOtm6cgLuV7SOxDh4/DmO1P/k9BlYjvoY0DUOAHS4f",
	"H2z8/eVQLfw/Xw41x/6/KIdGI/69Aai5gTtNFnHApqeZuo7thPgbnqEV4gDPO4vdIGQClf1xdpck6gxP",
	"nPm8Dl/1rzTat5TR8d91nlm+0eFrEU67DSG64/CYqpkzm9Bp5jbOhxA9qNuzHsbe7nb37wAAAP//OmNP",
	"Ba0yAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
