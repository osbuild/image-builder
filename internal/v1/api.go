// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for Distributions.
const (
	Centos8  Distributions = "centos-8"
	Centos9  Distributions = "centos-9"
	Fedora35 Distributions = "fedora-35"
	Fedora36 Distributions = "fedora-36"
	Fedora37 Distributions = "fedora-37"
	Fedora38 Distributions = "fedora-38"
	Rhel8    Distributions = "rhel-8"
	Rhel84   Distributions = "rhel-84"
	Rhel85   Distributions = "rhel-85"
	Rhel86   Distributions = "rhel-86"
	Rhel87   Distributions = "rhel-87"
	Rhel9    Distributions = "rhel-9"
	Rhel90   Distributions = "rhel-90"
	Rhel91   Distributions = "rhel-91"
)

// Defines values for ImageRequestArchitecture.
const (
	Aarch64 ImageRequestArchitecture = "aarch64"
	X8664   ImageRequestArchitecture = "x86_64"
)

// Defines values for ImageStatusStatus.
const (
	ImageStatusStatusBuilding    ImageStatusStatus = "building"
	ImageStatusStatusFailure     ImageStatusStatus = "failure"
	ImageStatusStatusPending     ImageStatusStatus = "pending"
	ImageStatusStatusRegistering ImageStatusStatus = "registering"
	ImageStatusStatusSuccess     ImageStatusStatus = "success"
	ImageStatusStatusUploading   ImageStatusStatus = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAmi               ImageTypes = "ami"
	ImageTypesAws               ImageTypes = "aws"
	ImageTypesAzure             ImageTypes = "azure"
	ImageTypesEdgeCommit        ImageTypes = "edge-commit"
	ImageTypesEdgeInstaller     ImageTypes = "edge-installer"
	ImageTypesGcp               ImageTypes = "gcp"
	ImageTypesGuestImage        ImageTypes = "guest-image"
	ImageTypesImageInstaller    ImageTypes = "image-installer"
	ImageTypesRhelEdgeCommit    ImageTypes = "rhel-edge-commit"
	ImageTypesRhelEdgeInstaller ImageTypes = "rhel-edge-installer"
	ImageTypesVhd               ImageTypes = "vhd"
	ImageTypesVsphere           ImageTypes = "vsphere"
)

// Defines values for UploadStatusStatus.
const (
	UploadStatusStatusFailure UploadStatusStatus = "failure"
	UploadStatusStatusPending UploadStatusStatus = "pending"
	UploadStatusStatusRunning UploadStatusStatus = "running"
	UploadStatusStatusSuccess UploadStatusStatus = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws   UploadTypes = "aws"
	UploadTypesAwsS3 UploadTypes = "aws.s3"
	UploadTypesAzure UploadTypes = "azure"
	UploadTypesGcp   UploadTypes = "gcp"
)

// AWSEC2Clone defines model for AWSEC2Clone.
type AWSEC2Clone struct {
	// A region as described in
	// https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-regions
	Region string `json:"region"`

	// An array of AWS account IDs as described in
	// https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions = map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`

	// Base repositories for the given distribution and architecture.
	Repositories []Repository `json:"repositories"`
}

// Architectures defines model for Architectures.
type Architectures = []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {
	// Name of the created image.
	// Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens.
	// The total length is limited to 60 characters.
	ImageName *string `json:"image_name,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneRequest defines model for CloneRequest.
type CloneRequest interface{}

// CloneResponse defines model for CloneResponse.
type CloneResponse struct {
	Id string `json:"id"`
}

// ClonesResponse defines model for ClonesResponse.
type ClonesResponse struct {
	Data  []ClonesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ClonesResponseItem defines model for ClonesResponseItem.
type ClonesResponseItem struct {
	CreatedAt string      `json:"created_at"`
	Id        string      `json:"id"`
	Request   interface{} `json:"request"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   Distributions   `json:"distribution"`
	ImageName      *string         `json:"image_name,omitempty"`

	// Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id string `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus `json:"image_status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string      `json:"created_at"`
	Id        string      `json:"id"`
	ImageName *string     `json:"image_name,omitempty"`
	Request   interface{} `json:"request"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Filesystem          *[]Filesystem `json:"filesystem,omitempty"`
	Packages            *[]string     `json:"packages,omitempty"`
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Subscription        *Subscription `json:"subscription,omitempty"`

	// list of users that a customer can add, also specifying their respective groups and SSH keys
	Users *[]User `json:"users,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions string

// DistributionsResponse defines model for DistributionsResponse.
type DistributionsResponse = []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {
	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	// CPU architecture of the image, x86_64 and aarch64 are currently supported.
	Architecture  ImageRequestArchitecture `json:"architecture"`
	ImageType     ImageTypes               `json:"image_type"`
	Ostree        *OSTree                  `json:"ostree,omitempty"`
	UploadRequest UploadRequest            `json:"upload_request"`
}

// CPU architecture of the image, x86_64 and aarch64 are currently supported.
type ImageRequestArchitecture string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusStatus   `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusStatus defines model for ImageStatus.Status.
type ImageStatusStatus string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl    *string `json:"baseurl,omitempty"`
	CheckGpg   *bool   `json:"check_gpg,omitempty"`
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`
	Rhsm       bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}        `json:"options"`
	Status  UploadStatusStatus `json:"status"`
	Type    UploadTypes        `json:"type"`
}

// UploadStatusStatus defines model for UploadStatus.Status.
type UploadStatusStatus string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Name   string `json:"name"`
	SshKey string `json:"ssh_key"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody = ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {
	// max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// CloneComposeJSONBody defines parameters for CloneCompose.
type CloneComposeJSONBody = CloneRequest

// GetComposeClonesParams defines parameters for GetComposeClones.
type GetComposeClonesParams struct {
	// max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	// distribution to look up packages for
	Distribution Distributions `form:"distribution" json:"distribution"`

	// architecture to look up packages for
	Architecture GetPackagesParamsArchitecture `form:"architecture" json:"architecture"`

	// packages to look for
	Search string `form:"search" json:"search"`

	// max amount of packages, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParamsArchitecture defines parameters for GetPackages.
type GetPackagesParamsArchitecture string

// ComposeImageJSONRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody = ComposeImageJSONBody

// CloneComposeJSONRequestBody defines body for CloneCompose for application/json ContentType.
type CloneComposeJSONRequestBody = CloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// get status of a compose clone
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId string) error
	// clone a compose
	// (POST /composes/{composeId}/clone)
	CloneCompose(ctx echo.Context, composeId string) error
	// get clones of a compose
	// (GET /composes/{composeId}/clones)
	GetComposeClones(ctx echo.Context, composeId string, params GetComposeClonesParams) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId string) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// CloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) CloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CloneCompose(ctx, composeId)
	return err
}

// GetComposeClones converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeClones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposeClonesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeClones(ctx, composeId, params)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/architectures/:distribution", wrapper.GetArchitectures)
	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.ComposeImage)
	router.GET(baseURL+"/composes", wrapper.GetComposes)
	router.GET(baseURL+"/composes/:composeId", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:composeId/clone", wrapper.CloneCompose)
	router.GET(baseURL+"/composes/:composeId/clones", wrapper.GetComposeClones)
	router.GET(baseURL+"/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/distributions", wrapper.GetDistributions)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)
	router.GET(baseURL+"/packages", wrapper.GetPackages)
	router.GET(baseURL+"/ready", wrapper.GetReadiness)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
