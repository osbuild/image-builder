// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for Distributions.
const (
	Centos8  Distributions = "centos-8"
	Centos9  Distributions = "centos-9"
	Fedora35 Distributions = "fedora-35"
	Fedora36 Distributions = "fedora-36"
	Fedora37 Distributions = "fedora-37"
	Fedora38 Distributions = "fedora-38"
	Rhel8    Distributions = "rhel-8"
	Rhel84   Distributions = "rhel-84"
	Rhel85   Distributions = "rhel-85"
	Rhel86   Distributions = "rhel-86"
	Rhel87   Distributions = "rhel-87"
	Rhel9    Distributions = "rhel-9"
	Rhel90   Distributions = "rhel-90"
	Rhel91   Distributions = "rhel-91"
)

// Defines values for ImageRequestArchitecture.
const (
	Aarch64 ImageRequestArchitecture = "aarch64"
	X8664   ImageRequestArchitecture = "x86_64"
)

// Defines values for ImageStatusStatus.
const (
	ImageStatusStatusBuilding    ImageStatusStatus = "building"
	ImageStatusStatusFailure     ImageStatusStatus = "failure"
	ImageStatusStatusPending     ImageStatusStatus = "pending"
	ImageStatusStatusRegistering ImageStatusStatus = "registering"
	ImageStatusStatusSuccess     ImageStatusStatus = "success"
	ImageStatusStatusUploading   ImageStatusStatus = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAmi               ImageTypes = "ami"
	ImageTypesAws               ImageTypes = "aws"
	ImageTypesAzure             ImageTypes = "azure"
	ImageTypesEdgeCommit        ImageTypes = "edge-commit"
	ImageTypesEdgeInstaller     ImageTypes = "edge-installer"
	ImageTypesGcp               ImageTypes = "gcp"
	ImageTypesGuestImage        ImageTypes = "guest-image"
	ImageTypesImageInstaller    ImageTypes = "image-installer"
	ImageTypesRhelEdgeCommit    ImageTypes = "rhel-edge-commit"
	ImageTypesRhelEdgeInstaller ImageTypes = "rhel-edge-installer"
	ImageTypesVhd               ImageTypes = "vhd"
	ImageTypesVsphere           ImageTypes = "vsphere"
)

// Defines values for UploadStatusStatus.
const (
	UploadStatusStatusFailure UploadStatusStatus = "failure"
	UploadStatusStatusPending UploadStatusStatus = "pending"
	UploadStatusStatusRunning UploadStatusStatus = "running"
	UploadStatusStatusSuccess UploadStatusStatus = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws   UploadTypes = "aws"
	UploadTypesAwsS3 UploadTypes = "aws.s3"
	UploadTypesAzure UploadTypes = "azure"
	UploadTypesGcp   UploadTypes = "gcp"
)

// AWSEC2Clone defines model for AWSEC2Clone.
type AWSEC2Clone struct {
	// A region as described in
	// https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-regions
	Region string `json:"region"`

	// An array of AWS account IDs as described in
	// https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions = map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`

	// Base repositories for the given distribution and architecture.
	Repositories []Repository `json:"repositories"`
}

// Architectures defines model for Architectures.
type Architectures = []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {
	// Name of the created image.
	// Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens.
	// The total length is limited to 60 characters.
	ImageName *string `json:"image_name,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneRequest defines model for CloneRequest.
type CloneRequest interface{}

// CloneResponse defines model for CloneResponse.
type CloneResponse struct {
	Id string `json:"id"`
}

// ClonesResponse defines model for ClonesResponse.
type ClonesResponse struct {
	Data  []ClonesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ClonesResponseItem defines model for ClonesResponseItem.
type ClonesResponseItem struct {
	CreatedAt string      `json:"created_at"`
	Id        string      `json:"id"`
	Request   interface{} `json:"request"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   Distributions   `json:"distribution"`
	ImageName      *string         `json:"image_name,omitempty"`

	// Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id string `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus `json:"image_status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string      `json:"created_at"`
	Id        string      `json:"id"`
	ImageName *string     `json:"image_name,omitempty"`
	Request   interface{} `json:"request"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Filesystem          *[]Filesystem `json:"filesystem,omitempty"`
	Packages            *[]string     `json:"packages,omitempty"`
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Subscription        *Subscription `json:"subscription,omitempty"`

	// list of users that a customer can add, also specifying their respective groups and SSH keys
	Users *[]User `json:"users,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions string

// DistributionsResponse defines model for DistributionsResponse.
type DistributionsResponse = []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {
	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	// CPU architecture of the image, x86_64 and aarch64 are currently supported.
	Architecture  ImageRequestArchitecture `json:"architecture"`
	ImageType     ImageTypes               `json:"image_type"`
	Ostree        *OSTree                  `json:"ostree,omitempty"`
	UploadRequest UploadRequest            `json:"upload_request"`
}

// CPU architecture of the image, x86_64 and aarch64 are currently supported.
type ImageRequestArchitecture string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusStatus   `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusStatus defines model for ImageStatus.Status.
type ImageStatusStatus string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl    *string `json:"baseurl,omitempty"`
	CheckGpg   *bool   `json:"check_gpg,omitempty"`
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`
	Rhsm       bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}        `json:"options"`
	Status  UploadStatusStatus `json:"status"`
	Type    UploadTypes        `json:"type"`
}

// UploadStatusStatus defines model for UploadStatus.Status.
type UploadStatusStatus string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Name   string `json:"name"`
	SshKey string `json:"ssh_key"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody = ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {
	// max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// CloneComposeJSONBody defines parameters for CloneCompose.
type CloneComposeJSONBody = CloneRequest

// GetComposeClonesParams defines parameters for GetComposeClones.
type GetComposeClonesParams struct {
	// max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	// distribution to look up packages for
	Distribution Distributions `form:"distribution" json:"distribution"`

	// architecture to look up packages for
	Architecture GetPackagesParamsArchitecture `form:"architecture" json:"architecture"`

	// packages to look for
	Search string `form:"search" json:"search"`

	// max amount of packages, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParamsArchitecture defines parameters for GetPackages.
type GetPackagesParamsArchitecture string

// ComposeImageJSONRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody = ComposeImageJSONBody

// CloneComposeJSONRequestBody defines body for CloneCompose for application/json ContentType.
type CloneComposeJSONRequestBody = CloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// get status of a compose clone
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId string) error
	// clone a compose
	// (POST /composes/{composeId}/clone)
	CloneCompose(ctx echo.Context, composeId string) error
	// get clones of a compose
	// (GET /composes/{composeId}/clones)
	GetComposeClones(ctx echo.Context, composeId string, params GetComposeClonesParams) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId string) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// CloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) CloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CloneCompose(ctx, composeId)
	return err
}

// GetComposeClones converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeClones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposeClonesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeClones(ctx, composeId, params)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/architectures/:distribution", wrapper.GetArchitectures)
	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.ComposeImage)
	router.GET(baseURL+"/composes", wrapper.GetComposes)
	router.GET(baseURL+"/composes/:composeId", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:composeId/clone", wrapper.CloneCompose)
	router.GET(baseURL+"/composes/:composeId/clones", wrapper.GetComposeClones)
	router.GET(baseURL+"/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/distributions", wrapper.GetDistributions)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)
	router.GET(baseURL+"/packages", wrapper.GetPackages)
	router.GET(baseURL+"/ready", wrapper.GetReadiness)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+w8a2/cNrZ/hdAWSHIhaZ4eP4Ci66Zp6ou0KeK0BW7t9XKkMyNuJFIhKU8mufPfL/jQ",
	"m5oZN07v7mK/tPKIPG+eF4/yyYtYljMKVArv4pMnogQyrB8vf7t+8Xz6PGUU1J85ZzlwSUC/5LAmjKqn",
	"GETESS71n94lMm8QFsi8WUKMCL2hiZS5uBiNYhaJEG9EiDP8kdEwYtnIoBqlWIKQo18E8JcFiWFUCELX",
	"gYEoAnyPSYqXJCVyG3xkFESYyCz9S8RoBLkU5cIb6vme3ObgXXhCckLX3s73RII53G2ITO5wFLHCMtwh",
	"nyLMOd4itkKXv10juxJdfScextHV5Y99diJGBUuhxB/glGDDgyYZPuAsT8G7+N2bTGfzk8Xp2fl4MvVu",
	"fY9IyDS5OZYSuCL1b7+Pg/PbT5Pp7isXu/YHzY232/keh/cF4RAr8FZ7t9UytvwHRFLtu/zt+nr2S54y",
	"HL+B9wUI+VoLR2Pft/paYlmIvqUUPG1sLQnsEKQWDVAzREsby4B2jxHpftH5XkHJ+wKuzHLJC2gbk2AF",
	"j8CJ7TPR7PYJZEjcOCMtUtQPwTg6m41Pz2enpycn5yfxfOmymPpI15uhCDYgZDDpb+hoUOH19xoWjxIi",
	"IZIF11w6SOdR0kb/4Wxxt5i7iCUZXsOd+llvraRc730fsc308MlQNOdMEMm4JaPtEb7FAlBzCVoxjmQC",
	"aE3ugaKYKMjLQmqnR2OEG3yGXsMAvuKw8i68v4xqjzuy7nb0pkSwPXh2tZTaAujwcEj6bYntI6unM4f4",
	"Lj8WHI47pIZmijPoy/knnIHyukqyEQcslZNV68Mb+mMhJFrCmlCkjhzCKAXlBhHjiBbZEriPgMbtl759",
	"pRYVNAYuIsbB1zrK8BZFjEpMKGI03dototwj/MYW4aMcOGGx8BWsZJsnQEV4Q98mgCSTOEUp0LVMEBEo",
	"JRlRpEuGFmMUJZjjSEEO2x7ee0Vo8eFK8ef5XoY/vNIQvIvF2PcyQss/J37D4z/92+84+HgZ/I9y/F89",
	"+9/W3/Xj3c1NGNz+V+OH26+euQ+88V13a86KfL9KyrVIr0WbBDjoF1pHSCSsSGO0BFRoS4C4y/BbVkSY",
	"vrFgXmqMrihdLCsS7kjcJ+rqO0VSc9kfIGYOJ/HZchoFeDmdB/P5ZBacj6OTYDGZzsYLOBufg9t1AMVU",
	"7qFLEWEWHUMVeptok6HvEHzIU0yoQAnb3FDJ0IrQGBGJCNUw9ClDPzMucXrRST0yEnEm2ErqzANoUIgR",
	"VutHOJLkHoKYcIiUcxmtChrjDKjEqei9DRK2CSQLFOrAcNGR20l0CquT5SKYRLNVMI/xOMCL6TQYL8eL",
	"8XR2Hp/GpwcjRS3Evrp7Run0ZbXHGYqCbU9TM5BtA2IP3X4iGwBcJOis2Lo7hYFReL3yLn4/4E4bGfXu",
	"tgYjckaFI8k2dlZTP5nOQOUwAZydL4PJNJ4FeH6yCObTxeLkZD4fj8fjw5zFXoVaDOOOscRHx4k2sKFI",
	"oQzdoasV4UaINaMjnJORVkGwLEgaAx/dTwxiAeIb7WS/noxvivF4umCrlQD59dh1YFP8GKAnh6VqmLAI",
	"XRaTgZFnm3edqTayQ0IlrIH3wJt1fbidZRpJKWjf6LCvbHf2ZYPuHZbObNXYoiOGlGfAYWf1a78JXlNk",
	"BP4jSFxaWpscJiQHuItYlhHpdLdPEyySZ6XXVcqUyC53WEKOo3d47crwfjZvUEqEcrdRWsSErtFPL359",
	"c3ls/mZhVOy4kri+EzEyaLiRjkYKIVlGPuIqndp7Bturd77XTE0P7f6usVbUCXbfg/641VmLyg3amctk",
	"PB7M060ZuArustqGDziS6RYxWgZMuylEP+B7pZCM8c4rgXT+BsgeX5WARQXnQBUkyiQSRZ4zLssM4Chd",
	"av5Kpew0j7Yqm+jcrP7jmAqueSRaCunJ5nafiewPEcd5fANrf8gU1duDIrKA3JHTwunhfcE5445oAxKT",
	"VD12XU3lERUWLIwlH+S3Wtwg4NGCXQfcf8LdP124c2nokQJe2y8+Xjzs+fqu1aQgtsIycpSdfl9vcVhn",
	"Mx42+lY5E3LNQbxPH9C80uC2Kh+/6zZTPrv70a4RDkG6bq7d+V4hgDuijg71bIX0ayQTLBFGJtwCRxGm",
	"CMexj3AqGBI5RGS1VRFIJkC4KoVz0KWTKYaFbilcX/+A3sFWHBtlfhHGqR1OE5qh2W3JLeaap/8NxOgH",
	"LNELKoHnnAhAuvGAnr754cWrZ+gsdDbX+lGfJ5AGZ/ODfoGatKBJ0O0BlowF0iLTjWmNRx2UCqF5Oqme",
	"FtXTafl0Xj2Mq6eJOmNAJRMann1UK1cQM46D2UnjedF4Pm08nzXIr+XTIr8ZVY7SfE+fDpv/vnXc29rO",
	"CL0T5GNbQ5PxdO57H4I1CyysglC5mGtfrLxpzgjtxoZ7zA9qtLHZr1G7lPry+c+f1atvH9FX9oje45TE",
	"6CVj6xTK6xiBJEMaiu2vmBwPKb9fSEA/sbjMFBWW8Ia+wFGCDIcoK4Ssun/Ynm8CvKwkyjsfxWCIftX4",
	"V4xnWAqEOVzcUIQC9ET5jotPkGGSknj35AJdUqT/Ur6Dg7B+hUPOQSgDqHFFCgTqMBWi7xlHVjs+eoJT",
	"EsFf7d9hxLInocUsgN+TCC7NvgfSYFBbEEO4s23AZAI8wHn+V5znImcyXNtN5Z4mSdoRPlQaln+9NzR0",
	"dUQQZ4QKpwxilmFCLz6Z/yuEbxNAL9F1QSQg8yt6mnOSYb591keepgahUriJAlr7WNq9XYmsNa2aBMQ4",
	"etKjCaGrlSk5rD3F/kHjJMLsUJZcdq/p1kArpdy9GdRm17MNz/c6VnGsCj3fM8rrC1s5ciPm5o+ffafV",
	"9C4uV7DXtzxew89XEBT8u26bDYsIaIypDJYckziYjWcnk9lBT9kA5x/qH/7w9u3Pe0sht3SJTOFw/WOW",
	"+SWk2yY+5Vb7OEG9Oj5fq6k/dFllASsSWmW18+6vvGnqB4PnP//SulcrXbWWso/MNaG5fVPL1DOHRiug",
	"0wYos43qetHucgb7+qLtqKr4rb6R2/m2gXVoz+vrt2qVSlVzm0BXEtqbPjYjrfOOsJJmi4Uenko1QycL",
	"SjM9oiZu1vgqc69AlhIXRRSBUEnyCpPUUJcDjZWsfU9XqObRUGmeOayJkKAVctu8jqih9bRmuTyundFy",
	"LT0XVXcyGgpu8IQ3igJ94aJsK15DULUh9V+EConTFFSytY5y9V8l+soxmfK8uepe5AlocPZaXaW0bcj1",
	"T62NSew0YmtmjoKcSqDSzmh0R3l+efMKbRISJT4iKyRA+ipkFQJ0QoRWIKNEZVQWSoiusjwlYGP93wue",
	"/l1tECARFmgDaerfUA0QbUia6ruwElhmW6f6PjZ0j/DkWJ1nh3vAVMECogKequS0kNBTaykXaDxdjOfL",
	"aYwXcH4yX8az+fJseTbFZ7MTOMGnp/F0uRivVviZvuHFaMkxjZIgJe8AcVgBBxpBA54S/uhsZPzHSGnh",
	"WeemrL/CfQO76tdZR2xLRNaXwncggWeEgkCbBKwoTPrcui7NMMVr4OhphGmcQk7oM0RioJLIrVJXafxI",
	"shuK9QlDMtEvyjI9RM8ZFYUulpUxrUiEpcLb1CoWKEoJUNlZkwC9oZXtVHpX3rs0pKb6l4ylgE01PzRK",
	"1Iuvth/fN/jBxo0oMpUqHo6utsQt19/W2IYvM8rJlh5WyNnAmz0dphSwGGCCrLP4ZOgVxWV0HcjbHC/u",
	"gQtyTNPVRhcrnXJbTa5fDq5YGhtye6zGbKn0L9CLLbtlA71Y81ezvR+GYfg5Hdr9CCdHY/zX6ds6iHkD",
	"KgVQEd4xf9p4tZ/neqkbR9V77CFZYgHW59T6KkcvopiGHOIEm7EL67pGSiUj5cbPaj+u4DAxYmKkEh/d",
	"SvAuvIITl4VECUTv7tb5usFZwweu8/U72Lpb02vKONwJkbq3KrErmbv5yYjO1UPT+rLFTMj4elTu+0YF",
	"gK/L1tjUmKA61V9XifQh5gySlHQPgSKiokG9Dk3DTuP/xvqQr88ClVPjrIHZZu7mF03ft1jA6+sjaCmj",
	"aFdQXfNRy1yWc93pS3dcfiTJve7mB1ZfraJUQMRB6lcNSnMsxIbx2EWuMqLAaY19Y3ROTFJB1klnLFbV",
	"5K5Iy/gaU3sb0dowHc/Hs+ncd13PJZFJSla4SKV3scKpAL+TpJimIE7RKsVrJJlKFRBPIvVY5vm6tDPd",
	"T9/kn6YTj9MN3goEFC9TEOjKMtRpkQyxJIDfA+9LsJkbhUrZDUEe9KctOfldpbeQNjTYUIbLsNq1XX8y",
	"ou6rYro9buzI2Zjd+Qf3DYyCH9o51Ao+iHFwllSPSx1ThJvdtgp35yilAIdlP1QLN0R/9MRXu7g8XuRH",
	"7uh2xh4g4nLH7R8o1XlBqa3HB5PJP6omS4vf01eln4Ea3BTXZSWONyIUMyeF+vJtsDaofUMhgE+cY6oi",
	"ueu5dSGSgAuMLi8vL7+d/fQRP58ce2FWwnOZ5K91Ct6m9+jcvFx4u9vpQLBi/erx2t4I2E55qjyt6VLr",
	"rLQaudF5WwQ2Wzci8y5zHCWApuHYs1ValVZsNpsQ69c6ltu9YvTq6vmLn65fBNNwrL+AafQ3TZ+lzIbL",
	"u4pGVXHhTcKxDlM5UJwT78KbheNQSTvHMtHCGTV7YGL0qZkq79SCNZjJzRy49thXsXfhvQTZnpTXTQec",
	"qdJa6NPellpr+n/FuA1XkqGUsXeoyJH9aCmFVgNT9JoF5rKTUJ0FyKQspS66Q0O1Xk2gMwfKZQO3ephW",
	"F1ZaItPxuNHy0eEjz1NVlRNGR/+wozU1vGM/DFAHeNeN8xiVd+wDAtD1vrlQx0KwiNQT/0hWbqGqypW6",
	"zO3cAJDGzgbKlW7n9L/U0MBHkR6LHH0icdMi2owYZ6QZQXq9dkgdm9Hzldel29prMVexgqUhIQtbMqRQ",
	"O7VfTY24df7Zs8Ff0kg6bdWejTSF4NB2S/J2wM9owCjP/KTdIhMOzVVDgbbN2taa7ViXn2BY9/Yti7eP",
	"xn9nvtMhATv2pni09svQshpn7Kt+19PW5PGptb0Yl8KsRBMslHa4hFh54fkj2kz7ospBg/4+yNJhlYaI",
	"QBlOVRWlCGoZUtsImoYj9gWBcoLs0GnO8AeE9YiEPtV2l49sEYQm+tDpc/2+AL6tD7bu63jNs1wVTnqS",
	"NiOUZCq5mfiOrsuArQuUKysyXaKaiiEazDo3EU0Sxg4SvqTj6A1s7g0wlT77LkQ5jjSFSIdntkI5h3vC",
	"CtG1oPqjvpSt1/rzXj0V0DaY0Sf7dHVcvKD2UJeeyh+0sweFDkv6EcGjIvefJm9o87vHxRwTFbryHVSW",
	"CfTDkcJ8HlGHmRC9pum2MiwzmaGs4wneiCeNVKN/xawjFKFr05TohByF5nllDA/QtWRV7vGH1fw4qcIX",
	"iJLNT6n2x0ilAgqbShZ/YnBsfag1kMsQum6HxnYk0tkOPtZaxaCHeQOy4FSZa5Vip6n5btbYsb1hBQ4l",
	"KTYPtjgcplm7InMWHmyeZXpuSWCr/1dT9f8Tp/+UON3+hnCPO7cm3Xfnlb0cdTKyxg2r82xUt8na4I8P",
	"wNXV7YPsvsL2LxmE64/VhvWW1Wu6mqsHNoZCcdyd8h7Kttvj4F+Qc/fg9pHtizY7A92JPatHtlsVljQP",
	"ieO1WfffwjZ8+sJoE8ttQNBDGjGLikwJyk2gpQEpGqpx5PL6QuK1qO5nbzXNzc9Ehugtr/Ef1CxrtMhK",
	"HOrQDnjAo5tgD/jGse+dWyOGDyOwM3G3J7YdP3vYJ7AipCRumCABdt7ieJ9zIGqWyP/8qFmx/W8RNXtT",
	"L3v9T3UAd3rZiAM2yffQaayHJr4gDzUSB/G88bLpg4yfsv+cSHPJqHGT4QzrpfcqP1uox4t67P/amDz6",
	"QsyXKJx665LodsP9VdUNtfGc5hLFORukr/j2vA/H3u52938BAAD//xHl1JDZTQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
