// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for Distributions.
const (
	Centos8  Distributions = "centos-8"
	Centos9  Distributions = "centos-9"
	Fedora35 Distributions = "fedora-35"
	Fedora36 Distributions = "fedora-36"
	Fedora37 Distributions = "fedora-37"
	Fedora38 Distributions = "fedora-38"
	Rhel8    Distributions = "rhel-8"
	Rhel84   Distributions = "rhel-84"
	Rhel85   Distributions = "rhel-85"
	Rhel86   Distributions = "rhel-86"
	Rhel87   Distributions = "rhel-87"
	Rhel9    Distributions = "rhel-9"
	Rhel90   Distributions = "rhel-90"
	Rhel91   Distributions = "rhel-91"
)

// Defines values for ImageRequestArchitecture.
const (
	Aarch64 ImageRequestArchitecture = "aarch64"
	X8664   ImageRequestArchitecture = "x86_64"
)

// Defines values for ImageStatusStatus.
const (
	ImageStatusStatusBuilding    ImageStatusStatus = "building"
	ImageStatusStatusFailure     ImageStatusStatus = "failure"
	ImageStatusStatusPending     ImageStatusStatus = "pending"
	ImageStatusStatusRegistering ImageStatusStatus = "registering"
	ImageStatusStatusSuccess     ImageStatusStatus = "success"
	ImageStatusStatusUploading   ImageStatusStatus = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAmi               ImageTypes = "ami"
	ImageTypesAws               ImageTypes = "aws"
	ImageTypesAzure             ImageTypes = "azure"
	ImageTypesEdgeCommit        ImageTypes = "edge-commit"
	ImageTypesEdgeInstaller     ImageTypes = "edge-installer"
	ImageTypesGcp               ImageTypes = "gcp"
	ImageTypesGuestImage        ImageTypes = "guest-image"
	ImageTypesImageInstaller    ImageTypes = "image-installer"
	ImageTypesRhelEdgeCommit    ImageTypes = "rhel-edge-commit"
	ImageTypesRhelEdgeInstaller ImageTypes = "rhel-edge-installer"
	ImageTypesVhd               ImageTypes = "vhd"
	ImageTypesVsphere           ImageTypes = "vsphere"
)

// Defines values for UploadStatusStatus.
const (
	UploadStatusStatusFailure UploadStatusStatus = "failure"
	UploadStatusStatusPending UploadStatusStatus = "pending"
	UploadStatusStatusRunning UploadStatusStatus = "running"
	UploadStatusStatusSuccess UploadStatusStatus = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws   UploadTypes = "aws"
	UploadTypesAwsS3 UploadTypes = "aws.s3"
	UploadTypesAzure UploadTypes = "azure"
	UploadTypesGcp   UploadTypes = "gcp"
)

// AWSEC2Clone defines model for AWSEC2Clone.
type AWSEC2Clone struct {
	// A region as described in
	// https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-regions
	Region string `json:"region"`

	// An array of AWS account IDs as described in
	// https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions = map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`

	// Base repositories for the given distribution and architecture.
	Repositories []Repository `json:"repositories"`
}

// Architectures defines model for Architectures.
type Architectures = []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {
	// Name of the created image.
	// Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens.
	// The total length is limited to 60 characters.
	ImageName *string `json:"image_name,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneRequest defines model for CloneRequest.
type CloneRequest interface{}

// CloneResponse defines model for CloneResponse.
type CloneResponse struct {
	Id string `json:"id"`
}

// ClonesResponse defines model for ClonesResponse.
type ClonesResponse struct {
	Data  []ClonesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ClonesResponseItem defines model for ClonesResponseItem.
type ClonesResponseItem struct {
	CreatedAt string      `json:"created_at"`
	Id        string      `json:"id"`
	Request   interface{} `json:"request"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   Distributions   `json:"distribution"`
	ImageName      *string         `json:"image_name,omitempty"`

	// Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id string `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus `json:"image_status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string      `json:"created_at"`
	Id        string      `json:"id"`
	ImageName *string     `json:"image_name,omitempty"`
	Request   interface{} `json:"request"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Filesystem          *[]Filesystem `json:"filesystem,omitempty"`
	Packages            *[]string     `json:"packages,omitempty"`
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Subscription        *Subscription `json:"subscription,omitempty"`

	// list of users that a customer can add, also specifying their respective groups and SSH keys
	Users *[]User `json:"users,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions string

// DistributionsResponse defines model for DistributionsResponse.
type DistributionsResponse = []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {
	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	// CPU architecture of the image, x86_64 and aarch64 are currently supported.
	Architecture  ImageRequestArchitecture `json:"architecture"`
	ImageType     ImageTypes               `json:"image_type"`
	Ostree        *OSTree                  `json:"ostree,omitempty"`
	UploadRequest UploadRequest            `json:"upload_request"`
}

// CPU architecture of the image, x86_64 and aarch64 are currently supported.
type ImageRequestArchitecture string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusStatus   `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusStatus defines model for ImageStatus.Status.
type ImageStatusStatus string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl    *string `json:"baseurl,omitempty"`
	CheckGpg   *bool   `json:"check_gpg,omitempty"`
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`
	Rhsm       bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`
	ServerUrl     string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}        `json:"options"`
	Status  UploadStatusStatus `json:"status"`
	Type    UploadTypes        `json:"type"`
}

// UploadStatusStatus defines model for UploadStatus.Status.
type UploadStatusStatus string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Name   string `json:"name"`
	SshKey string `json:"ssh_key"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody = ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {
	// max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// CloneComposeJSONBody defines parameters for CloneCompose.
type CloneComposeJSONBody = CloneRequest

// GetComposeClonesParams defines parameters for GetComposeClones.
type GetComposeClonesParams struct {
	// max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	// distribution to look up packages for
	Distribution Distributions `form:"distribution" json:"distribution"`

	// architecture to look up packages for
	Architecture GetPackagesParamsArchitecture `form:"architecture" json:"architecture"`

	// packages to look for
	Search string `form:"search" json:"search"`

	// max amount of packages, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParamsArchitecture defines parameters for GetPackages.
type GetPackagesParamsArchitecture string

// ComposeImageJSONRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody = ComposeImageJSONBody

// CloneComposeJSONRequestBody defines body for CloneCompose for application/json ContentType.
type CloneComposeJSONRequestBody = CloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// get status of a compose clone
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId string) error
	// clone a compose
	// (POST /composes/{composeId}/clone)
	CloneCompose(ctx echo.Context, composeId string) error
	// get clones of a compose
	// (GET /composes/{composeId}/clones)
	GetComposeClones(ctx echo.Context, composeId string, params GetComposeClonesParams) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId string) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// CloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) CloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CloneCompose(ctx, composeId)
	return err
}

// GetComposeClones converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeClones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposeClonesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeClones(ctx, composeId, params)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/architectures/:distribution", wrapper.GetArchitectures)
	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.ComposeImage)
	router.GET(baseURL+"/composes", wrapper.GetComposes)
	router.GET(baseURL+"/composes/:composeId", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:composeId/clone", wrapper.CloneCompose)
	router.GET(baseURL+"/composes/:composeId/clones", wrapper.GetComposeClones)
	router.GET(baseURL+"/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/distributions", wrapper.GetDistributions)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)
	router.GET(baseURL+"/packages", wrapper.GetPackages)
	router.GET(baseURL+"/ready", wrapper.GetReadiness)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
