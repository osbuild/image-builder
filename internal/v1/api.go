// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for ClientId.
const (
	Api ClientId = "api"
	Ui  ClientId = "ui"
)

// Defines values for CustomizationsPartitioningMode.
const (
	AutoLvm CustomizationsPartitioningMode = "auto-lvm"
	Lvm     CustomizationsPartitioningMode = "lvm"
	Raw     CustomizationsPartitioningMode = "raw"
)

// Defines values for DistributionProfileItem.
const (
	XccdfOrgSsgprojectContentProfileAnssiBp28Enhanced     DistributionProfileItem = "xccdf_org.ssgproject.content_profile_anssi_bp28_enhanced"
	XccdfOrgSsgprojectContentProfileAnssiBp28High         DistributionProfileItem = "xccdf_org.ssgproject.content_profile_anssi_bp28_high"
	XccdfOrgSsgprojectContentProfileAnssiBp28Intermediary DistributionProfileItem = "xccdf_org.ssgproject.content_profile_anssi_bp28_intermediary"
	XccdfOrgSsgprojectContentProfileAnssiBp28Minimal      DistributionProfileItem = "xccdf_org.ssgproject.content_profile_anssi_bp28_minimal"
	XccdfOrgSsgprojectContentProfileCis                   DistributionProfileItem = "xccdf_org.ssgproject.content_profile_cis"
	XccdfOrgSsgprojectContentProfileCisServerL1           DistributionProfileItem = "xccdf_org.ssgproject.content_profile_cis_server_l1"
	XccdfOrgSsgprojectContentProfileCisWorkstationL1      DistributionProfileItem = "xccdf_org.ssgproject.content_profile_cis_workstation_l1"
	XccdfOrgSsgprojectContentProfileCisWorkstationL2      DistributionProfileItem = "xccdf_org.ssgproject.content_profile_cis_workstation_l2"
	XccdfOrgSsgprojectContentProfileCui                   DistributionProfileItem = "xccdf_org.ssgproject.content_profile_cui"
	XccdfOrgSsgprojectContentProfileE8                    DistributionProfileItem = "xccdf_org.ssgproject.content_profile_e8"
	XccdfOrgSsgprojectContentProfileHipaa                 DistributionProfileItem = "xccdf_org.ssgproject.content_profile_hipaa"
	XccdfOrgSsgprojectContentProfileIsmO                  DistributionProfileItem = "xccdf_org.ssgproject.content_profile_ism_o"
	XccdfOrgSsgprojectContentProfileOspp                  DistributionProfileItem = "xccdf_org.ssgproject.content_profile_ospp"
	XccdfOrgSsgprojectContentProfilePciDss                DistributionProfileItem = "xccdf_org.ssgproject.content_profile_pci-dss"
	XccdfOrgSsgprojectContentProfileStandard              DistributionProfileItem = "xccdf_org.ssgproject.content_profile_standard"
	XccdfOrgSsgprojectContentProfileStig                  DistributionProfileItem = "xccdf_org.ssgproject.content_profile_stig"
	XccdfOrgSsgprojectContentProfileStigGui               DistributionProfileItem = "xccdf_org.ssgproject.content_profile_stig_gui"
)

// Defines values for Distributions.
const (
	Centos8      Distributions = "centos-8"
	Centos9      Distributions = "centos-9"
	Fedora37     Distributions = "fedora-37"
	Fedora38     Distributions = "fedora-38"
	Fedora39     Distributions = "fedora-39"
	Fedora40     Distributions = "fedora-40"
	Rhel8        Distributions = "rhel-8"
	Rhel84       Distributions = "rhel-84"
	Rhel85       Distributions = "rhel-85"
	Rhel86       Distributions = "rhel-86"
	Rhel87       Distributions = "rhel-87"
	Rhel88       Distributions = "rhel-88"
	Rhel89       Distributions = "rhel-89"
	Rhel8Nightly Distributions = "rhel-8-nightly"
	Rhel9        Distributions = "rhel-9"
	Rhel90       Distributions = "rhel-90"
	Rhel91       Distributions = "rhel-91"
	Rhel92       Distributions = "rhel-92"
	Rhel93       Distributions = "rhel-93"
	Rhel9Nightly Distributions = "rhel-9-nightly"
)

// Defines values for ImageRequestArchitecture.
const (
	ImageRequestArchitectureAarch64 ImageRequestArchitecture = "aarch64"
	ImageRequestArchitectureX8664   ImageRequestArchitecture = "x86_64"
)

// Defines values for ImageStatusStatus.
const (
	ImageStatusStatusBuilding    ImageStatusStatus = "building"
	ImageStatusStatusFailure     ImageStatusStatus = "failure"
	ImageStatusStatusPending     ImageStatusStatus = "pending"
	ImageStatusStatusRegistering ImageStatusStatus = "registering"
	ImageStatusStatusSuccess     ImageStatusStatus = "success"
	ImageStatusStatusUploading   ImageStatusStatus = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAmi               ImageTypes = "ami"
	ImageTypesAws               ImageTypes = "aws"
	ImageTypesAzure             ImageTypes = "azure"
	ImageTypesEdgeCommit        ImageTypes = "edge-commit"
	ImageTypesEdgeInstaller     ImageTypes = "edge-installer"
	ImageTypesGcp               ImageTypes = "gcp"
	ImageTypesGuestImage        ImageTypes = "guest-image"
	ImageTypesImageInstaller    ImageTypes = "image-installer"
	ImageTypesOci               ImageTypes = "oci"
	ImageTypesRhelEdgeCommit    ImageTypes = "rhel-edge-commit"
	ImageTypesRhelEdgeInstaller ImageTypes = "rhel-edge-installer"
	ImageTypesVhd               ImageTypes = "vhd"
	ImageTypesVsphere           ImageTypes = "vsphere"
	ImageTypesVsphereOva        ImageTypes = "vsphere-ova"
	ImageTypesWsl               ImageTypes = "wsl"
)

// Defines values for UploadStatusStatus.
const (
	UploadStatusStatusFailure UploadStatusStatus = "failure"
	UploadStatusStatusPending UploadStatusStatus = "pending"
	UploadStatusStatusRunning UploadStatusStatus = "running"
	UploadStatusStatusSuccess UploadStatusStatus = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws              UploadTypes = "aws"
	UploadTypesAwsS3            UploadTypes = "aws.s3"
	UploadTypesAzure            UploadTypes = "azure"
	UploadTypesGcp              UploadTypes = "gcp"
	UploadTypesOciObjectstorage UploadTypes = "oci.objectstorage"
)

// Defines values for GetPackagesParamsArchitecture.
const (
	GetPackagesParamsArchitectureAarch64 GetPackagesParamsArchitecture = "aarch64"
	GetPackagesParamsArchitectureX8664   GetPackagesParamsArchitecture = "x86_64"
)

// AWSEC2Clone defines model for AWSEC2Clone.
type AWSEC2Clone struct {
	// Region A region as described in
	// https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-regions
	Region string `json:"region"`

	// ShareWithAccounts An array of AWS account IDs as described in
	// https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions = map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`

	// Repositories Base repositories for the given distribution and architecture.
	Repositories []Repository `json:"repositories"`
}

// Architectures defines model for Architectures.
type Architectures = []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {
	// ImageName Name of the created image.
	// Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens.
	// The total length is limited to 60 characters.
	ImageName *string `json:"image_name,omitempty"`

	// ResourceGroup Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// SourceId ID of the source that will be used to resolve the tenant and subscription IDs.
	// Do not provide a tenant_id or subscription_id when providing a source_id.
	SourceId *string `json:"source_id,omitempty"`

	// SubscriptionId ID of subscription where the image should be uploaded.
	// When providing a subscription_id, also be sure to provide a tenant_id and do not include a source_id.
	SubscriptionId *string `json:"subscription_id,omitempty"`

	// TenantId ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	// When providing a tenant_id, also be sure to provide a subscription_id and do not include a source_id.
	TenantId *string `json:"tenant_id,omitempty"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// ClientId defines model for ClientId.
type ClientId string

// CloneRequest defines model for CloneRequest.
type CloneRequest struct {
	union json.RawMessage
}

// CloneResponse defines model for CloneResponse.
type CloneResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ClonesResponse defines model for ClonesResponse.
type ClonesResponse struct {
	Data  []ClonesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ClonesResponseItem defines model for ClonesResponseItem.
type ClonesResponseItem struct {
	// ComposeId UUID of the parent compose of the clone
	ComposeId openapi_types.UUID `json:"compose_id"`
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Request   CloneRequest       `json:"request"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// OstreeCommit ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Packages Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	ClientId       *ClientId       `json:"client_id,omitempty"`
	Customizations *Customizations `json:"customizations,omitempty"`

	// Distribution List of all distributions that image builder supports. A user might not have access to
	// restricted distributions.
	//
	// Restricted distributions include the RHEL nightlies and the Fedora distributions.
	Distribution     Distributions `json:"distribution"`
	ImageDescription *string       `json:"image_description,omitempty"`
	ImageName        *string       `json:"image_name,omitempty"`

	// ImageRequests Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus    `json:"image_status"`
	Request     ComposeRequest `json:"request"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	ClientId  *ClientId          `json:"client_id,omitempty"`
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	ImageName *string            `json:"image_name,omitempty"`
	Request   ComposeRequest     `json:"request"`
}

// CreateBlueprintRequest defines model for CreateBlueprintRequest.
type CreateBlueprintRequest struct {
	Customizations Customizations `json:"customizations"`
	Description    string         `json:"description"`

	// Distribution List of all distributions that image builder supports. A user might not have access to
	// restricted distributions.
	//
	// Restricted distributions include the RHEL nightlies and the Fedora distributions.
	Distribution Distributions `json:"distribution"`

	// ImageRequests Array of image requests. Having more image requests in a single blueprint is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
	Name          string         `json:"name"`
}

// CreateBlueprintResponse defines model for CreateBlueprintResponse.
type CreateBlueprintResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// CustomRepository Repository configuration for custom repositories.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above. Id is required.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg *bool     `json:"check_repo_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`

	// Gpgkey GPG key used to sign packages in this repository. Can be a gpg key or a URL
	Gpgkey     *[]string `json:"gpgkey,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`
	Name       *string   `json:"name,omitempty"`
	Priority   *int      `json:"priority,omitempty"`
	SslVerify  *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Filesystem         *[]Filesystem       `json:"filesystem,omitempty"`
	Openscap           *OpenSCAP           `json:"openscap,omitempty"`
	Packages           *[]string           `json:"packages,omitempty"`

	// PartitioningMode Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode    *CustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`
	PayloadRepositories *[]Repository                   `json:"payload_repositories,omitempty"`
	Subscription        *Subscription                   `json:"subscription,omitempty"`

	// Users list of users that a customer can add, also specifying their respective groups and SSH keys
	Users *[]User `json:"users,omitempty"`
}

// CustomizationsPartitioningMode Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type CustomizationsPartitioningMode string

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// DistributionProfileItem defines model for DistributionProfileItem.
type DistributionProfileItem string

// DistributionProfileResponse List of profiles for a given distribution
type DistributionProfileResponse = []DistributionProfileItem

// Distributions List of all distributions that image builder supports. A user might not have access to
// restricted distributions.
//
// Restricted distributions include the RHEL nightlies and the Fedora distributions.
type Distributions string

// DistributionsResponse List of distributions this user is allowed to build.
type DistributionsResponse = []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// MinSize size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {
	// ShareWithAccounts List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	// Architecture CPU architecture of the image, x86_64 and aarch64 are currently supported.
	Architecture ImageRequestArchitecture `json:"architecture"`
	ImageType    ImageTypes               `json:"image_type"`
	Ostree       *OSTree                  `json:"ostree,omitempty"`

	// Size Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size          *uint64       `json:"size,omitempty"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// ImageRequestArchitecture CPU architecture of the image, x86_64 and aarch64 are currently supported.
type ImageRequestArchitecture string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusStatus   `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusStatus defines model for ImageStatus.Status.
type ImageStatusStatus string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// OCIUploadRequestOptions defines model for OCIUploadRequestOptions.
type OCIUploadRequestOptions = map[string]interface{}

// OCIUploadStatus defines model for OCIUploadStatus.
type OCIUploadStatus struct {
	Url string `json:"url"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// Contenturl A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Parent Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Rhsm Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	ProfileId string `json:"profile_id"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// CheckRepoGpg Enables gpg verification of the repository metadata
	CheckRepoGpg *bool   `json:"check_repo_gpg,omitempty"`
	Gpgkey       *string `json:"gpgkey,omitempty"`
	IgnoreSsl    *bool   `json:"ignore_ssl,omitempty"`
	Metalink     *string `json:"metalink,omitempty"`
	Mirrorlist   *string `json:"mirrorlist,omitempty"`
	Rhsm         bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`

	// Rhc Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options UploadRequest_Options `json:"options"`
	Type    UploadTypes           `json:"type"`
}

// UploadRequest_Options defines model for UploadRequest.Options.
type UploadRequest_Options struct {
	union json.RawMessage
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options UploadStatus_Options `json:"options"`
	Status  UploadStatusStatus   `json:"status"`
	Type    UploadTypes          `json:"type"`
}

// UploadStatus_Options defines model for UploadStatus.Options.
type UploadStatus_Options struct {
	union json.RawMessage
}

// UploadStatusStatus defines model for UploadStatus.Status.
type UploadStatusStatus string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Name   string `json:"name"`
	SshKey string `json:"ssh_key"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {
	// Limit max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// IgnoreImageTypes Filter the composes on image type. The filter is optional and can be specified multiple times.
	IgnoreImageTypes *[]ImageTypes `form:"ignoreImageTypes,omitempty" json:"ignoreImageTypes,omitempty"`
}

// GetComposeClonesParams defines parameters for GetComposeClones.
type GetComposeClonesParams struct {
	// Limit max amount of clones, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset clones page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	// Distribution distribution to look up packages for
	Distribution Distributions `form:"distribution" json:"distribution"`

	// Architecture architecture to look up packages for
	Architecture GetPackagesParamsArchitecture `form:"architecture" json:"architecture"`

	// Search packages to look for
	Search string `form:"search" json:"search"`

	// Limit max amount of packages, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset packages page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParamsArchitecture defines parameters for GetPackages.
type GetPackagesParamsArchitecture string

// ComposeImageJSONRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody = ComposeRequest

// CloneComposeJSONRequestBody defines body for CloneCompose for application/json ContentType.
type CloneComposeJSONRequestBody = CloneRequest

// CreateBlueprintJSONRequestBody defines body for CreateBlueprint for application/json ContentType.
type CreateBlueprintJSONRequestBody = CreateBlueprintRequest

// AsAWSEC2Clone returns the union data inside the CloneRequest as a AWSEC2Clone
func (t CloneRequest) AsAWSEC2Clone() (AWSEC2Clone, error) {
	var body AWSEC2Clone
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSEC2Clone overwrites any union data inside the CloneRequest as the provided AWSEC2Clone
func (t *CloneRequest) FromAWSEC2Clone(v AWSEC2Clone) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSEC2Clone performs a merge with any union data inside the CloneRequest, using the provided AWSEC2Clone
func (t *CloneRequest) MergeAWSEC2Clone(v AWSEC2Clone) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t CloneRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CloneRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAWSUploadRequestOptions returns the union data inside the UploadRequest_Options as a AWSUploadRequestOptions
func (t UploadRequest_Options) AsAWSUploadRequestOptions() (AWSUploadRequestOptions, error) {
	var body AWSUploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSUploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided AWSUploadRequestOptions
func (t *UploadRequest_Options) FromAWSUploadRequestOptions(v AWSUploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSUploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided AWSUploadRequestOptions
func (t *UploadRequest_Options) MergeAWSUploadRequestOptions(v AWSUploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAWSS3UploadRequestOptions returns the union data inside the UploadRequest_Options as a AWSS3UploadRequestOptions
func (t UploadRequest_Options) AsAWSS3UploadRequestOptions() (AWSS3UploadRequestOptions, error) {
	var body AWSS3UploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSS3UploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided AWSS3UploadRequestOptions
func (t *UploadRequest_Options) FromAWSS3UploadRequestOptions(v AWSS3UploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSS3UploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided AWSS3UploadRequestOptions
func (t *UploadRequest_Options) MergeAWSS3UploadRequestOptions(v AWSS3UploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsGCPUploadRequestOptions returns the union data inside the UploadRequest_Options as a GCPUploadRequestOptions
func (t UploadRequest_Options) AsGCPUploadRequestOptions() (GCPUploadRequestOptions, error) {
	var body GCPUploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGCPUploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided GCPUploadRequestOptions
func (t *UploadRequest_Options) FromGCPUploadRequestOptions(v GCPUploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGCPUploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided GCPUploadRequestOptions
func (t *UploadRequest_Options) MergeGCPUploadRequestOptions(v GCPUploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAzureUploadRequestOptions returns the union data inside the UploadRequest_Options as a AzureUploadRequestOptions
func (t UploadRequest_Options) AsAzureUploadRequestOptions() (AzureUploadRequestOptions, error) {
	var body AzureUploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureUploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided AzureUploadRequestOptions
func (t *UploadRequest_Options) FromAzureUploadRequestOptions(v AzureUploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureUploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided AzureUploadRequestOptions
func (t *UploadRequest_Options) MergeAzureUploadRequestOptions(v AzureUploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsOCIUploadRequestOptions returns the union data inside the UploadRequest_Options as a OCIUploadRequestOptions
func (t UploadRequest_Options) AsOCIUploadRequestOptions() (OCIUploadRequestOptions, error) {
	var body OCIUploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOCIUploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided OCIUploadRequestOptions
func (t *UploadRequest_Options) FromOCIUploadRequestOptions(v OCIUploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOCIUploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided OCIUploadRequestOptions
func (t *UploadRequest_Options) MergeOCIUploadRequestOptions(v OCIUploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t UploadRequest_Options) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UploadRequest_Options) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAWSUploadStatus returns the union data inside the UploadStatus_Options as a AWSUploadStatus
func (t UploadStatus_Options) AsAWSUploadStatus() (AWSUploadStatus, error) {
	var body AWSUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSUploadStatus overwrites any union data inside the UploadStatus_Options as the provided AWSUploadStatus
func (t *UploadStatus_Options) FromAWSUploadStatus(v AWSUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSUploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided AWSUploadStatus
func (t *UploadStatus_Options) MergeAWSUploadStatus(v AWSUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAWSS3UploadStatus returns the union data inside the UploadStatus_Options as a AWSS3UploadStatus
func (t UploadStatus_Options) AsAWSS3UploadStatus() (AWSS3UploadStatus, error) {
	var body AWSS3UploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSS3UploadStatus overwrites any union data inside the UploadStatus_Options as the provided AWSS3UploadStatus
func (t *UploadStatus_Options) FromAWSS3UploadStatus(v AWSS3UploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSS3UploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided AWSS3UploadStatus
func (t *UploadStatus_Options) MergeAWSS3UploadStatus(v AWSS3UploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsGCPUploadStatus returns the union data inside the UploadStatus_Options as a GCPUploadStatus
func (t UploadStatus_Options) AsGCPUploadStatus() (GCPUploadStatus, error) {
	var body GCPUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGCPUploadStatus overwrites any union data inside the UploadStatus_Options as the provided GCPUploadStatus
func (t *UploadStatus_Options) FromGCPUploadStatus(v GCPUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGCPUploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided GCPUploadStatus
func (t *UploadStatus_Options) MergeGCPUploadStatus(v GCPUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAzureUploadStatus returns the union data inside the UploadStatus_Options as a AzureUploadStatus
func (t UploadStatus_Options) AsAzureUploadStatus() (AzureUploadStatus, error) {
	var body AzureUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureUploadStatus overwrites any union data inside the UploadStatus_Options as the provided AzureUploadStatus
func (t *UploadStatus_Options) FromAzureUploadStatus(v AzureUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureUploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided AzureUploadStatus
func (t *UploadStatus_Options) MergeAzureUploadStatus(v AzureUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsOCIUploadStatus returns the union data inside the UploadStatus_Options as a OCIUploadStatus
func (t UploadStatus_Options) AsOCIUploadStatus() (OCIUploadStatus, error) {
	var body OCIUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOCIUploadStatus overwrites any union data inside the UploadStatus_Options as the provided OCIUploadStatus
func (t *UploadStatus_Options) FromOCIUploadStatus(v OCIUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOCIUploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided OCIUploadStatus
func (t *UploadStatus_Options) MergeOCIUploadStatus(v OCIUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t UploadStatus_Options) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UploadStatus_Options) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution Distributions) error
	// get status of a compose clone
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id openapi_types.UUID) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// delete a compose
	// (DELETE /composes/{composeId})
	DeleteCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId openapi_types.UUID) error
	// clone a compose
	// (POST /composes/{composeId}/clone)
	CloneCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get clones of a compose
	// (GET /composes/{composeId}/clones)
	GetComposeClones(ctx echo.Context, composeId openapi_types.UUID, params GetComposeClonesParams) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId openapi_types.UUID) error
	// get the distributions available to this user
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// create blueprint
	// (POST /experimental/blueprint)
	CreateBlueprint(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error
	// get the available profiles for a given distribution. This is a temporary endpoint meant to be removed soon.
	// (GET /oscap/{distribution}/profiles)
	GetOscapProfiles(ctx echo.Context, distribution Distributions) error
	// get the customizations for a given distribution and profile. This is a temporary endpoint meant to be removed soon.
	// (GET /oscap/{distribution}/{profile}/customizations)
	GetOscapCustomizations(ctx echo.Context, distribution Distributions, profile DistributionProfileItem) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution Distributions

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "ignoreImageTypes" -------------

	err = runtime.BindQueryParameter("form", true, false, "ignoreImageTypes", ctx.QueryParams(), &params.IgnoreImageTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ignoreImageTypes: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// DeleteCompose converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompose(ctx, composeId)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// CloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) CloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CloneCompose(ctx, composeId)
	return err
}

// GetComposeClones converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeClones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposeClonesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeClones(ctx, composeId, params)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// CreateBlueprint converts echo context to params.
func (w *ServerInterfaceWrapper) CreateBlueprint(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateBlueprint(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetOscapProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) GetOscapProfiles(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution Distributions

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOscapProfiles(ctx, distribution)
	return err
}

// GetOscapCustomizations converts echo context to params.
func (w *ServerInterfaceWrapper) GetOscapCustomizations(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution Distributions

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Path parameter "profile" -------------
	var profile DistributionProfileItem

	err = runtime.BindStyledParameterWithLocation("simple", false, "profile", runtime.ParamLocationPath, ctx.Param("profile"), &profile)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter profile: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOscapCustomizations(ctx, distribution, profile)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/architectures/:distribution", wrapper.GetArchitectures)
	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.ComposeImage)
	router.GET(baseURL+"/composes", wrapper.GetComposes)
	router.DELETE(baseURL+"/composes/:composeId", wrapper.DeleteCompose)
	router.GET(baseURL+"/composes/:composeId", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:composeId/clone", wrapper.CloneCompose)
	router.GET(baseURL+"/composes/:composeId/clones", wrapper.GetComposeClones)
	router.GET(baseURL+"/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/distributions", wrapper.GetDistributions)
	router.POST(baseURL+"/experimental/blueprint", wrapper.CreateBlueprint)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)
	router.GET(baseURL+"/oscap/:distribution/profiles", wrapper.GetOscapProfiles)
	router.GET(baseURL+"/oscap/:distribution/:profile/customizations", wrapper.GetOscapCustomizations)
	router.GET(baseURL+"/packages", wrapper.GetPackages)
	router.GET(baseURL+"/ready", wrapper.GetReadiness)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
