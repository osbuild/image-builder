// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for Distributions.
const (
	Centos8      Distributions = "centos-8"
	Centos9      Distributions = "centos-9"
	Fedora37     Distributions = "fedora-37"
	Fedora38     Distributions = "fedora-38"
	Fedora39     Distributions = "fedora-39"
	Rhel8        Distributions = "rhel-8"
	Rhel84       Distributions = "rhel-84"
	Rhel85       Distributions = "rhel-85"
	Rhel86       Distributions = "rhel-86"
	Rhel87       Distributions = "rhel-87"
	Rhel88       Distributions = "rhel-88"
	Rhel8Nightly Distributions = "rhel-8-nightly"
	Rhel9        Distributions = "rhel-9"
	Rhel90       Distributions = "rhel-90"
	Rhel91       Distributions = "rhel-91"
	Rhel92       Distributions = "rhel-92"
	Rhel9Nightly Distributions = "rhel-9-nightly"
)

// Defines values for ImageRequestArchitecture.
const (
	Aarch64 ImageRequestArchitecture = "aarch64"
	X8664   ImageRequestArchitecture = "x86_64"
)

// Defines values for ImageStatusStatus.
const (
	ImageStatusStatusBuilding    ImageStatusStatus = "building"
	ImageStatusStatusFailure     ImageStatusStatus = "failure"
	ImageStatusStatusPending     ImageStatusStatus = "pending"
	ImageStatusStatusRegistering ImageStatusStatus = "registering"
	ImageStatusStatusSuccess     ImageStatusStatus = "success"
	ImageStatusStatusUploading   ImageStatusStatus = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAmi               ImageTypes = "ami"
	ImageTypesAws               ImageTypes = "aws"
	ImageTypesAzure             ImageTypes = "azure"
	ImageTypesEdgeCommit        ImageTypes = "edge-commit"
	ImageTypesEdgeInstaller     ImageTypes = "edge-installer"
	ImageTypesGcp               ImageTypes = "gcp"
	ImageTypesGuestImage        ImageTypes = "guest-image"
	ImageTypesImageInstaller    ImageTypes = "image-installer"
	ImageTypesRhelEdgeCommit    ImageTypes = "rhel-edge-commit"
	ImageTypesRhelEdgeInstaller ImageTypes = "rhel-edge-installer"
	ImageTypesVhd               ImageTypes = "vhd"
	ImageTypesVsphere           ImageTypes = "vsphere"
	ImageTypesVsphereOva        ImageTypes = "vsphere-ova"
)

// Defines values for UploadStatusStatus.
const (
	UploadStatusStatusFailure UploadStatusStatus = "failure"
	UploadStatusStatusPending UploadStatusStatus = "pending"
	UploadStatusStatusRunning UploadStatusStatus = "running"
	UploadStatusStatusSuccess UploadStatusStatus = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws   UploadTypes = "aws"
	UploadTypesAwsS3 UploadTypes = "aws.s3"
	UploadTypesAzure UploadTypes = "azure"
	UploadTypesGcp   UploadTypes = "gcp"
)

// AWSEC2Clone defines model for AWSEC2Clone.
type AWSEC2Clone struct {
	// A region as described in
	// https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-regions
	Region string `json:"region"`

	// An array of AWS account IDs as described in
	// https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions = map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`

	// Base repositories for the given distribution and architecture.
	Repositories []Repository `json:"repositories"`
}

// Architectures defines model for Architectures.
type Architectures = []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {
	// Name of the created image.
	// Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens.
	// The total length is limited to 60 characters.
	ImageName *string `json:"image_name,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of the source that will be used to resolve the tenant and subscription IDs.
	// Do not provide a tenant_id or subscription_id when providing a source_id.
	SourceId *string `json:"source_id,omitempty"`

	// ID of subscription where the image should be uploaded.
	// When providing a subscription_id, also be sure to provide a tenant_id and do not include a source_id.
	SubscriptionId *string `json:"subscription_id,omitempty"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	// When providing a tenant_id, also be sure to provide a subscription_id and do not include a source_id.
	TenantId *string `json:"tenant_id,omitempty"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneRequest defines model for CloneRequest.
type CloneRequest interface{}

// CloneResponse defines model for CloneResponse.
type CloneResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ClonesResponse defines model for ClonesResponse.
type ClonesResponse struct {
	Data  []ClonesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ClonesResponseItem defines model for ClonesResponseItem.
type ClonesResponseItem struct {
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Request   interface{}        `json:"request"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   Distributions   `json:"distribution"`
	ImageName      *string         `json:"image_name,omitempty"`

	// Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus    `json:"image_status"`
	Request     ComposeRequest `json:"request"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	ImageName *string            `json:"image_name,omitempty"`
	Request   interface{}        `json:"request"`
}

// Repository configuration for custom repositories.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above. Id is required.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg *bool     `json:"check_repo_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`

	// GPG key used to sign packages in this repository. Can be a gpg key or a URL
	Gpgkey     *[]string `json:"gpgkey,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`
	Name       *string   `json:"name,omitempty"`
	Priority   *int      `json:"priority,omitempty"`
	SslVerify  *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	CustomRepositories  *[]CustomRepository `json:"custom_repositories,omitempty"`
	Filesystem          *[]Filesystem       `json:"filesystem,omitempty"`
	Openscap            *OpenSCAP           `json:"openscap,omitempty"`
	Packages            *[]string           `json:"packages,omitempty"`
	PayloadRepositories *[]Repository       `json:"payload_repositories,omitempty"`
	Subscription        *Subscription       `json:"subscription,omitempty"`

	// list of users that a customer can add, also specifying their respective groups and SSH keys
	Users *[]User `json:"users,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions string

// DistributionsResponse defines model for DistributionsResponse.
type DistributionsResponse = []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {
	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	// CPU architecture of the image, x86_64 and aarch64 are currently supported.
	Architecture  ImageRequestArchitecture `json:"architecture"`
	ImageType     ImageTypes               `json:"image_type"`
	Ostree        *OSTree                  `json:"ostree,omitempty"`
	UploadRequest UploadRequest            `json:"upload_request"`
}

// CPU architecture of the image, x86_64 and aarch64 are currently supported.
type ImageRequestArchitecture string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusStatus   `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusStatus defines model for ImageStatus.Status.
type ImageStatusStatus string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	ProfileId string `json:"profile_id"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool   `json:"check_repo_gpg,omitempty"`
	Gpgkey       *string `json:"gpgkey,omitempty"`
	IgnoreSsl    *bool   `json:"ignore_ssl,omitempty"`
	Metalink     *string `json:"metalink,omitempty"`
	Mirrorlist   *string `json:"mirrorlist,omitempty"`
	Rhsm         bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}        `json:"options"`
	Status  UploadStatusStatus `json:"status"`
	Type    UploadTypes        `json:"type"`
}

// UploadStatusStatus defines model for UploadStatus.Status.
type UploadStatusStatus string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Name   string `json:"name"`
	SshKey string `json:"ssh_key"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody = ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {
	// max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// CloneComposeJSONBody defines parameters for CloneCompose.
type CloneComposeJSONBody = CloneRequest

// GetComposeClonesParams defines parameters for GetComposeClones.
type GetComposeClonesParams struct {
	// max amount of clones, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// clones page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	// distribution to look up packages for
	Distribution Distributions `form:"distribution" json:"distribution"`

	// architecture to look up packages for
	Architecture GetPackagesParamsArchitecture `form:"architecture" json:"architecture"`

	// packages to look for
	Search string `form:"search" json:"search"`

	// max amount of packages, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParamsArchitecture defines parameters for GetPackages.
type GetPackagesParamsArchitecture string

// ComposeImageJSONRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody = ComposeImageJSONBody

// CloneComposeJSONRequestBody defines body for CloneCompose for application/json ContentType.
type CloneComposeJSONRequestBody = CloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// get status of a compose clone
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id openapi_types.UUID) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// delete a compose
	// (DELETE /composes/{composeId})
	DeleteCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId openapi_types.UUID) error
	// clone a compose
	// (POST /composes/{composeId}/clone)
	CloneCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get clones of a compose
	// (GET /composes/{composeId}/clones)
	GetComposeClones(ctx echo.Context, composeId openapi_types.UUID, params GetComposeClonesParams) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId openapi_types.UUID) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// DeleteCompose converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompose(ctx, composeId)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// CloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) CloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CloneCompose(ctx, composeId)
	return err
}

// GetComposeClones converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeClones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposeClonesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeClones(ctx, composeId, params)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/architectures/:distribution", wrapper.GetArchitectures)
	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.ComposeImage)
	router.GET(baseURL+"/composes", wrapper.GetComposes)
	router.DELETE(baseURL+"/composes/:composeId", wrapper.DeleteCompose)
	router.GET(baseURL+"/composes/:composeId", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:composeId/clone", wrapper.CloneCompose)
	router.GET(baseURL+"/composes/:composeId/clones", wrapper.GetComposeClones)
	router.GET(baseURL+"/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/distributions", wrapper.GetDistributions)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)
	router.GET(baseURL+"/packages", wrapper.GetPackages)
	router.GET(baseURL+"/ready", wrapper.GetReadiness)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
