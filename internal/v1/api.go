// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for Distributions.
const (
	Centos8      Distributions = "centos-8"
	Centos9      Distributions = "centos-9"
	Fedora37     Distributions = "fedora-37"
	Fedora38     Distributions = "fedora-38"
	Fedora39     Distributions = "fedora-39"
	Rhel8        Distributions = "rhel-8"
	Rhel84       Distributions = "rhel-84"
	Rhel85       Distributions = "rhel-85"
	Rhel86       Distributions = "rhel-86"
	Rhel87       Distributions = "rhel-87"
	Rhel88       Distributions = "rhel-88"
	Rhel8Nightly Distributions = "rhel-8-nightly"
	Rhel9        Distributions = "rhel-9"
	Rhel90       Distributions = "rhel-90"
	Rhel91       Distributions = "rhel-91"
	Rhel92       Distributions = "rhel-92"
	Rhel9Nightly Distributions = "rhel-9-nightly"
)

// Defines values for ImageRequestArchitecture.
const (
	Aarch64 ImageRequestArchitecture = "aarch64"
	X8664   ImageRequestArchitecture = "x86_64"
)

// Defines values for ImageStatusStatus.
const (
	ImageStatusStatusBuilding    ImageStatusStatus = "building"
	ImageStatusStatusFailure     ImageStatusStatus = "failure"
	ImageStatusStatusPending     ImageStatusStatus = "pending"
	ImageStatusStatusRegistering ImageStatusStatus = "registering"
	ImageStatusStatusSuccess     ImageStatusStatus = "success"
	ImageStatusStatusUploading   ImageStatusStatus = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAmi               ImageTypes = "ami"
	ImageTypesAws               ImageTypes = "aws"
	ImageTypesAzure             ImageTypes = "azure"
	ImageTypesEdgeCommit        ImageTypes = "edge-commit"
	ImageTypesEdgeInstaller     ImageTypes = "edge-installer"
	ImageTypesGcp               ImageTypes = "gcp"
	ImageTypesGuestImage        ImageTypes = "guest-image"
	ImageTypesImageInstaller    ImageTypes = "image-installer"
	ImageTypesRhelEdgeCommit    ImageTypes = "rhel-edge-commit"
	ImageTypesRhelEdgeInstaller ImageTypes = "rhel-edge-installer"
	ImageTypesVhd               ImageTypes = "vhd"
	ImageTypesVsphere           ImageTypes = "vsphere"
	ImageTypesVsphereOva        ImageTypes = "vsphere-ova"
	ImageTypesWsl               ImageTypes = "wsl"
)

// Defines values for UploadStatusStatus.
const (
	UploadStatusStatusFailure UploadStatusStatus = "failure"
	UploadStatusStatusPending UploadStatusStatus = "pending"
	UploadStatusStatusRunning UploadStatusStatus = "running"
	UploadStatusStatusSuccess UploadStatusStatus = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws   UploadTypes = "aws"
	UploadTypesAwsS3 UploadTypes = "aws.s3"
	UploadTypesAzure UploadTypes = "azure"
	UploadTypesGcp   UploadTypes = "gcp"
)

// AWSEC2Clone defines model for AWSEC2Clone.
type AWSEC2Clone struct {
	// A region as described in
	// https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-regions
	Region string `json:"region"`

	// An array of AWS account IDs as described in
	// https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions = map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`

	// Base repositories for the given distribution and architecture.
	Repositories []Repository `json:"repositories"`
}

// Architectures defines model for Architectures.
type Architectures = []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {
	// Name of the created image.
	// Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens.
	// The total length is limited to 60 characters.
	ImageName *string `json:"image_name,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of the source that will be used to resolve the tenant and subscription IDs.
	// Do not provide a tenant_id or subscription_id when providing a source_id.
	SourceId *string `json:"source_id,omitempty"`

	// ID of subscription where the image should be uploaded.
	// When providing a subscription_id, also be sure to provide a tenant_id and do not include a source_id.
	SubscriptionId *string `json:"subscription_id,omitempty"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	// When providing a tenant_id, also be sure to provide a subscription_id and do not include a source_id.
	TenantId *string `json:"tenant_id,omitempty"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneRequest defines model for CloneRequest.
type CloneRequest interface{}

// CloneResponse defines model for CloneResponse.
type CloneResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ClonesResponse defines model for ClonesResponse.
type ClonesResponse struct {
	Data  []ClonesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ClonesResponseItem defines model for ClonesResponseItem.
type ClonesResponseItem struct {
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Request   interface{}        `json:"request"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations   *Customizations `json:"customizations,omitempty"`
	Distribution     Distributions   `json:"distribution"`
	ImageDescription *string         `json:"image_description,omitempty"`
	ImageName        *string         `json:"image_name,omitempty"`

	// Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus    `json:"image_status"`
	Request     ComposeRequest `json:"request"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	ImageName *string            `json:"image_name,omitempty"`
	Request   ComposeRequest     `json:"request"`
}

// Repository configuration for custom repositories.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above. Id is required.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg *bool     `json:"check_repo_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`

	// GPG key used to sign packages in this repository. Can be a gpg key or a URL
	Gpgkey     *[]string `json:"gpgkey,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`
	Name       *string   `json:"name,omitempty"`
	Priority   *int      `json:"priority,omitempty"`
	SslVerify  *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	CustomRepositories  *[]CustomRepository `json:"custom_repositories,omitempty"`
	Filesystem          *[]Filesystem       `json:"filesystem,omitempty"`
	Openscap            *OpenSCAP           `json:"openscap,omitempty"`
	Packages            *[]string           `json:"packages,omitempty"`
	PayloadRepositories *[]Repository       `json:"payload_repositories,omitempty"`
	Subscription        *Subscription       `json:"subscription,omitempty"`

	// list of users that a customer can add, also specifying their respective groups and SSH keys
	Users *[]User `json:"users,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions string

// DistributionsResponse defines model for DistributionsResponse.
type DistributionsResponse = []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {
	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	// CPU architecture of the image, x86_64 and aarch64 are currently supported.
	Architecture ImageRequestArchitecture `json:"architecture"`
	ImageType    ImageTypes               `json:"image_type"`
	Ostree       *OSTree                  `json:"ostree,omitempty"`

	// Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size          *uint64       `json:"size,omitempty"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// CPU architecture of the image, x86_64 and aarch64 are currently supported.
type ImageRequestArchitecture string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusStatus   `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusStatus defines model for ImageStatus.Status.
type ImageStatusStatus string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	ProfileId string `json:"profile_id"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool   `json:"check_repo_gpg,omitempty"`
	Gpgkey       *string `json:"gpgkey,omitempty"`
	IgnoreSsl    *bool   `json:"ignore_ssl,omitempty"`
	Metalink     *string `json:"metalink,omitempty"`
	Mirrorlist   *string `json:"mirrorlist,omitempty"`
	Rhsm         bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}        `json:"options"`
	Status  UploadStatusStatus `json:"status"`
	Type    UploadTypes        `json:"type"`
}

// UploadStatusStatus defines model for UploadStatus.Status.
type UploadStatusStatus string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Name   string `json:"name"`
	SshKey string `json:"ssh_key"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody = ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {
	// max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// CloneComposeJSONBody defines parameters for CloneCompose.
type CloneComposeJSONBody = CloneRequest

// GetComposeClonesParams defines parameters for GetComposeClones.
type GetComposeClonesParams struct {
	// max amount of clones, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// clones page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	// distribution to look up packages for
	Distribution Distributions `form:"distribution" json:"distribution"`

	// architecture to look up packages for
	Architecture GetPackagesParamsArchitecture `form:"architecture" json:"architecture"`

	// packages to look for
	Search string `form:"search" json:"search"`

	// max amount of packages, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParamsArchitecture defines parameters for GetPackages.
type GetPackagesParamsArchitecture string

// ComposeImageJSONRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody = ComposeImageJSONBody

// CloneComposeJSONRequestBody defines body for CloneCompose for application/json ContentType.
type CloneComposeJSONRequestBody = CloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// get status of a compose clone
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id openapi_types.UUID) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// delete a compose
	// (DELETE /composes/{composeId})
	DeleteCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId openapi_types.UUID) error
	// clone a compose
	// (POST /composes/{composeId}/clone)
	CloneCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get clones of a compose
	// (GET /composes/{composeId}/clones)
	GetComposeClones(ctx echo.Context, composeId openapi_types.UUID, params GetComposeClonesParams) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId openapi_types.UUID) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// DeleteCompose converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompose(ctx, composeId)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// CloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) CloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CloneCompose(ctx, composeId)
	return err
}

// GetComposeClones converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeClones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposeClonesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeClones(ctx, composeId, params)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/architectures/:distribution", wrapper.GetArchitectures)
	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.ComposeImage)
	router.GET(baseURL+"/composes", wrapper.GetComposes)
	router.DELETE(baseURL+"/composes/:composeId", wrapper.DeleteCompose)
	router.GET(baseURL+"/composes/:composeId", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:composeId/clone", wrapper.CloneCompose)
	router.GET(baseURL+"/composes/:composeId/clones", wrapper.GetComposeClones)
	router.GET(baseURL+"/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/distributions", wrapper.GetDistributions)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)
	router.GET(baseURL+"/packages", wrapper.GetPackages)
	router.GET(baseURL+"/ready", wrapper.GetReadiness)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"whJ7y2Shds/7rJL6evv6fwEAAP//P+xWZuBgAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
