// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for ClientId.
const (
	Api ClientId = "api"
	Ui  ClientId = "ui"
)

// Defines values for CloneStatusResponseStatus.
const (
	CloneStatusResponseStatusFailure CloneStatusResponseStatus = "failure"
	CloneStatusResponseStatusPending CloneStatusResponseStatus = "pending"
	CloneStatusResponseStatusRunning CloneStatusResponseStatus = "running"
	CloneStatusResponseStatusSuccess CloneStatusResponseStatus = "success"
)

// Defines values for CustomizationsPartitioningMode.
const (
	AutoLvm CustomizationsPartitioningMode = "auto-lvm"
	Lvm     CustomizationsPartitioningMode = "lvm"
	Raw     CustomizationsPartitioningMode = "raw"
)

// Defines values for DistributionProfileItem.
const (
	XccdfOrgSsgprojectContentProfileAnssiBp28Enhanced     DistributionProfileItem = "xccdf_org.ssgproject.content_profile_anssi_bp28_enhanced"
	XccdfOrgSsgprojectContentProfileAnssiBp28High         DistributionProfileItem = "xccdf_org.ssgproject.content_profile_anssi_bp28_high"
	XccdfOrgSsgprojectContentProfileAnssiBp28Intermediary DistributionProfileItem = "xccdf_org.ssgproject.content_profile_anssi_bp28_intermediary"
	XccdfOrgSsgprojectContentProfileAnssiBp28Minimal      DistributionProfileItem = "xccdf_org.ssgproject.content_profile_anssi_bp28_minimal"
	XccdfOrgSsgprojectContentProfileCis                   DistributionProfileItem = "xccdf_org.ssgproject.content_profile_cis"
	XccdfOrgSsgprojectContentProfileCisServerL1           DistributionProfileItem = "xccdf_org.ssgproject.content_profile_cis_server_l1"
	XccdfOrgSsgprojectContentProfileCisWorkstationL1      DistributionProfileItem = "xccdf_org.ssgproject.content_profile_cis_workstation_l1"
	XccdfOrgSsgprojectContentProfileCisWorkstationL2      DistributionProfileItem = "xccdf_org.ssgproject.content_profile_cis_workstation_l2"
	XccdfOrgSsgprojectContentProfileCui                   DistributionProfileItem = "xccdf_org.ssgproject.content_profile_cui"
	XccdfOrgSsgprojectContentProfileE8                    DistributionProfileItem = "xccdf_org.ssgproject.content_profile_e8"
	XccdfOrgSsgprojectContentProfileHipaa                 DistributionProfileItem = "xccdf_org.ssgproject.content_profile_hipaa"
	XccdfOrgSsgprojectContentProfileIsmO                  DistributionProfileItem = "xccdf_org.ssgproject.content_profile_ism_o"
	XccdfOrgSsgprojectContentProfileOspp                  DistributionProfileItem = "xccdf_org.ssgproject.content_profile_ospp"
	XccdfOrgSsgprojectContentProfilePciDss                DistributionProfileItem = "xccdf_org.ssgproject.content_profile_pci-dss"
	XccdfOrgSsgprojectContentProfileStandard              DistributionProfileItem = "xccdf_org.ssgproject.content_profile_standard"
	XccdfOrgSsgprojectContentProfileStig                  DistributionProfileItem = "xccdf_org.ssgproject.content_profile_stig"
	XccdfOrgSsgprojectContentProfileStigGui               DistributionProfileItem = "xccdf_org.ssgproject.content_profile_stig_gui"
)

// Defines values for Distributions.
const (
	Centos8      Distributions = "centos-8"
	Centos9      Distributions = "centos-9"
	Fedora37     Distributions = "fedora-37"
	Fedora38     Distributions = "fedora-38"
	Fedora39     Distributions = "fedora-39"
	Fedora40     Distributions = "fedora-40"
	Rhel8        Distributions = "rhel-8"
	Rhel84       Distributions = "rhel-84"
	Rhel85       Distributions = "rhel-85"
	Rhel86       Distributions = "rhel-86"
	Rhel87       Distributions = "rhel-87"
	Rhel88       Distributions = "rhel-88"
	Rhel89       Distributions = "rhel-89"
	Rhel8Nightly Distributions = "rhel-8-nightly"
	Rhel9        Distributions = "rhel-9"
	Rhel90       Distributions = "rhel-90"
	Rhel91       Distributions = "rhel-91"
	Rhel92       Distributions = "rhel-92"
	Rhel93       Distributions = "rhel-93"
	Rhel9Nightly Distributions = "rhel-9-nightly"
)

// Defines values for ImageRequestArchitecture.
const (
	ImageRequestArchitectureAarch64 ImageRequestArchitecture = "aarch64"
	ImageRequestArchitectureX8664   ImageRequestArchitecture = "x86_64"
)

// Defines values for ImageStatusStatus.
const (
	ImageStatusStatusBuilding    ImageStatusStatus = "building"
	ImageStatusStatusFailure     ImageStatusStatus = "failure"
	ImageStatusStatusPending     ImageStatusStatus = "pending"
	ImageStatusStatusRegistering ImageStatusStatus = "registering"
	ImageStatusStatusSuccess     ImageStatusStatus = "success"
	ImageStatusStatusUploading   ImageStatusStatus = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAmi               ImageTypes = "ami"
	ImageTypesAws               ImageTypes = "aws"
	ImageTypesAzure             ImageTypes = "azure"
	ImageTypesEdgeCommit        ImageTypes = "edge-commit"
	ImageTypesEdgeInstaller     ImageTypes = "edge-installer"
	ImageTypesGcp               ImageTypes = "gcp"
	ImageTypesGuestImage        ImageTypes = "guest-image"
	ImageTypesImageInstaller    ImageTypes = "image-installer"
	ImageTypesOci               ImageTypes = "oci"
	ImageTypesRhelEdgeCommit    ImageTypes = "rhel-edge-commit"
	ImageTypesRhelEdgeInstaller ImageTypes = "rhel-edge-installer"
	ImageTypesVhd               ImageTypes = "vhd"
	ImageTypesVsphere           ImageTypes = "vsphere"
	ImageTypesVsphereOva        ImageTypes = "vsphere-ova"
	ImageTypesWsl               ImageTypes = "wsl"
)

// Defines values for UploadStatusStatus.
const (
	Failure UploadStatusStatus = "failure"
	Pending UploadStatusStatus = "pending"
	Running UploadStatusStatus = "running"
	Success UploadStatusStatus = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws              UploadTypes = "aws"
	UploadTypesAwsS3            UploadTypes = "aws.s3"
	UploadTypesAzure            UploadTypes = "azure"
	UploadTypesGcp              UploadTypes = "gcp"
	UploadTypesOciObjectstorage UploadTypes = "oci.objectstorage"
)

// Defines values for GetPackagesParamsArchitecture.
const (
	GetPackagesParamsArchitectureAarch64 GetPackagesParamsArchitecture = "aarch64"
	GetPackagesParamsArchitectureX8664   GetPackagesParamsArchitecture = "x86_64"
)

// AWSEC2Clone defines model for AWSEC2Clone.
type AWSEC2Clone struct {
	// Region A region as described in
	// https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-regions
	Region string `json:"region"`

	// ShareWithAccounts An array of AWS account IDs as described in
	// https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions = map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`

	// Repositories Base repositories for the given distribution and architecture.
	Repositories []Repository `json:"repositories"`
}

// Architectures defines model for Architectures.
type Architectures = []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {
	// ImageName Name of the created image.
	// Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens.
	// The total length is limited to 60 characters.
	ImageName *string `json:"image_name,omitempty"`

	// ResourceGroup Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// SourceId ID of the source that will be used to resolve the tenant and subscription IDs.
	// Do not provide a tenant_id or subscription_id when providing a source_id.
	SourceId *string `json:"source_id,omitempty"`

	// SubscriptionId ID of subscription where the image should be uploaded.
	// When providing a subscription_id, also be sure to provide a tenant_id and do not include a source_id.
	SubscriptionId *string `json:"subscription_id,omitempty"`

	// TenantId ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	// When providing a tenant_id, also be sure to provide a subscription_id and do not include a source_id.
	TenantId *string `json:"tenant_id,omitempty"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// BlueprintItem defines model for BlueprintItem.
type BlueprintItem struct {
	Description    string             `json:"description"`
	Id             openapi_types.UUID `json:"id"`
	LastModifiedAt string             `json:"last_modified_at"`
	Name           string             `json:"name"`
	Version        int                `json:"version"`
}

// BlueprintsResponse defines model for BlueprintsResponse.
type BlueprintsResponse struct {
	Data  []BlueprintItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ClientId defines model for ClientId.
type ClientId string

// CloneRequest defines model for CloneRequest.
type CloneRequest struct {
	union json.RawMessage
}

// CloneResponse defines model for CloneResponse.
type CloneResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// CloneStatusResponse defines model for CloneStatusResponse.
type CloneStatusResponse struct {
	ComposeId *openapi_types.UUID         `json:"compose_id,omitempty"`
	Options   CloneStatusResponse_Options `json:"options"`
	Status    CloneStatusResponseStatus   `json:"status"`
	Type      UploadTypes                 `json:"type"`
}

// CloneStatusResponse_Options defines model for CloneStatusResponse.Options.
type CloneStatusResponse_Options struct {
	union json.RawMessage
}

// CloneStatusResponseStatus defines model for CloneStatusResponse.Status.
type CloneStatusResponseStatus string

// ClonesResponse defines model for ClonesResponse.
type ClonesResponse struct {
	Data  []ClonesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ClonesResponseItem defines model for ClonesResponseItem.
type ClonesResponseItem struct {
	// ComposeId UUID of the parent compose of the clone
	ComposeId openapi_types.UUID `json:"compose_id"`
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Request   CloneRequest       `json:"request"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// OstreeCommit ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Packages Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	ClientId       *ClientId       `json:"client_id,omitempty"`
	Customizations *Customizations `json:"customizations,omitempty"`

	// Distribution List of all distributions that image builder supports. A user might not have access to
	// restricted distributions.
	//
	// Restricted distributions include the RHEL nightlies and the Fedora distributions.
	Distribution     Distributions `json:"distribution"`
	ImageDescription *string       `json:"image_description,omitempty"`
	ImageName        *string       `json:"image_name,omitempty"`

	// ImageRequests Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus    `json:"image_status"`
	Request     ComposeRequest `json:"request"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	BlueprintId      *openapi_types.UUID `json:"blueprint_id"`
	BlueprintVersion *int                `json:"blueprint_version"`
	ClientId         *ClientId           `json:"client_id,omitempty"`
	CreatedAt        string              `json:"created_at"`
	Id               openapi_types.UUID  `json:"id"`
	ImageName        *string             `json:"image_name,omitempty"`
	Request          ComposeRequest      `json:"request"`
}

// Container defines model for Container.
type Container struct {
	// Name Name to use for the container from the image
	Name *string `json:"name,omitempty"`

	// Source Reference to the container to embed
	Source string `json:"source"`

	// TlsVerify Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// CreateBlueprintRequest defines model for CreateBlueprintRequest.
type CreateBlueprintRequest struct {
	Customizations Customizations `json:"customizations"`
	Description    string         `json:"description"`

	// Distribution List of all distributions that image builder supports. A user might not have access to
	// restricted distributions.
	//
	// Restricted distributions include the RHEL nightlies and the Fedora distributions.
	Distribution Distributions `json:"distribution"`

	// ImageRequests Array of image requests. Having more image requests in a single blueprint is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
	Name          string         `json:"name"`
}

// CreateBlueprintResponse defines model for CreateBlueprintResponse.
type CreateBlueprintResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// CustomRepository Repository configuration for custom repositories.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above. Id is required.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg *bool     `json:"check_repo_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`

	// Gpgkey GPG key used to sign packages in this repository. Can be a gpg key or a URL
	Gpgkey         *[]string `json:"gpgkey,omitempty"`
	Id             string    `json:"id"`
	Metalink       *string   `json:"metalink,omitempty"`
	Mirrorlist     *string   `json:"mirrorlist,omitempty"`
	ModuleHotfixes *bool     `json:"module_hotfixes,omitempty"`
	Name           *string   `json:"name,omitempty"`
	Priority       *int      `json:"priority,omitempty"`
	SslVerify      *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Containers         *[]Container        `json:"containers,omitempty"`
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Directories        *[]Directory        `json:"directories,omitempty"`

	// Fdo FIDO device onboard configuration
	Fdo        *FDO          `json:"fdo,omitempty"`
	Files      *[]File       `json:"files,omitempty"`
	Filesystem *[]Filesystem `json:"filesystem,omitempty"`

	// Fips System FIPS mode setup
	Fips *FIPS `json:"fips,omitempty"`

	// Firewall Firewalld configuration
	Firewall *FirewallCustomization `json:"firewall,omitempty"`

	// Groups List of groups to create
	Groups *[]Group `json:"groups,omitempty"`

	// Hostname Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// InstallationDevice Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string `json:"installation_device,omitempty"`
	Kernel             *Kernel `json:"kernel,omitempty"`

	// Locale Locale configuration
	Locale   *Locale   `json:"locale,omitempty"`
	Openscap *OpenSCAP `json:"openscap,omitempty"`
	Packages *[]string `json:"packages,omitempty"`

	// PartitioningMode Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode    *CustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`
	PayloadRepositories *[]Repository                   `json:"payload_repositories,omitempty"`
	Services            *Services                       `json:"services,omitempty"`
	Subscription        *Subscription                   `json:"subscription,omitempty"`

	// Timezone Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`

	// Users list of users that a customer can add, also specifying their respective groups and SSH keys
	Users *[]User `json:"users,omitempty"`
}

// CustomizationsPartitioningMode Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type CustomizationsPartitioningMode string

// Directory A custom directory to create in the final artifact.
type Directory struct {
	// EnsureParents Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group Group of the directory as a group name or a gid
	Group *Directory_Group `json:"group,omitempty"`

	// Mode Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path Path to the directory
	Path string `json:"path"`

	// User Owner of the directory as a user name or a uid
	User *Directory_User `json:"user,omitempty"`
}

// DirectoryGroup0 defines model for .
type DirectoryGroup0 = string

// DirectoryGroup1 defines model for .
type DirectoryGroup1 = int

// Directory_Group Group of the directory as a group name or a gid
type Directory_Group struct {
	union json.RawMessage
}

// DirectoryUser0 defines model for .
type DirectoryUser0 = string

// DirectoryUser1 defines model for .
type DirectoryUser1 = int

// Directory_User Owner of the directory as a user name or a uid
type Directory_User struct {
	union json.RawMessage
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// DistributionProfileItem defines model for DistributionProfileItem.
type DistributionProfileItem string

// DistributionProfileResponse List of profiles for a given distribution
type DistributionProfileResponse = []DistributionProfileItem

// Distributions List of all distributions that image builder supports. A user might not have access to
// restricted distributions.
//
// Restricted distributions include the RHEL nightlies and the Fedora distributions.
type Distributions string

// DistributionsResponse List of distributions this user is allowed to build.
type DistributionsResponse = []DistributionItem

// FDO FIDO device onboard configuration
type FDO struct {
	DiunPubKeyHash         *string `json:"diun_pub_key_hash,omitempty"`
	DiunPubKeyInsecure     *string `json:"diun_pub_key_insecure,omitempty"`
	DiunPubKeyRootCerts    *string `json:"diun_pub_key_root_certs,omitempty"`
	ManufacturingServerUrl *string `json:"manufacturing_server_url,omitempty"`
}

// FIPS System FIPS mode setup
type FIPS struct {
	// Enabled Enables the system FIPS mode
	Enabled *bool `json:"enabled,omitempty"`
}

// File A custom file to create in the final artifact.
type File struct {
	// Data Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// EnsureParents Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group Group of the file as a gid or a group name
	Group *File_Group `json:"group,omitempty"`

	// Mode Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path Path to the file
	Path string `json:"path"`

	// User Owner of the file as a uid or a user name
	User *File_User `json:"user,omitempty"`
}

// FileGroup0 defines model for .
type FileGroup0 = string

// FileGroup1 defines model for .
type FileGroup1 = int

// File_Group Group of the file as a gid or a group name
type File_Group struct {
	union json.RawMessage
}

// FileUser0 defines model for .
type FileUser0 = string

// FileUser1 defines model for .
type FileUser1 = int

// File_User Owner of the file as a uid or a user name
type File_User struct {
	union json.RawMessage
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// MinSize size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// FirewallCustomization Firewalld configuration
type FirewallCustomization struct {
	// Ports List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Services Firewalld services to enable or disable
	Services *struct {
		// Disabled List of services to disable
		Disabled *[]string `json:"disabled,omitempty"`

		// Enabled List of services to enable
		Enabled *[]string `json:"enabled,omitempty"`
	} `json:"services,omitempty"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {
	// ShareWithAccounts List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// Group defines model for Group.
type Group struct {
	// Gid Group id of the group to create (optional)
	Gid *int `json:"gid,omitempty"`

	// Name Name of the group to create
	Name string `json:"name"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// Ignition Ignition configuration
type Ignition struct {
	Embedded  *IgnitionEmbedded  `json:"embedded,omitempty"`
	Firstboot *IgnitionFirstboot `json:"firstboot,omitempty"`
}

// IgnitionEmbedded defines model for IgnitionEmbedded.
type IgnitionEmbedded struct {
	Config string `json:"config"`
}

// IgnitionFirstboot defines model for IgnitionFirstboot.
type IgnitionFirstboot struct {
	// Url Provisioning URL
	Url string `json:"url"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	// Architecture CPU architecture of the image, x86_64 and aarch64 are currently supported.
	Architecture ImageRequestArchitecture `json:"architecture"`
	ImageType    ImageTypes               `json:"image_type"`
	Ostree       *OSTree                  `json:"ostree,omitempty"`

	// Size Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size          *uint64       `json:"size,omitempty"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// ImageRequestArchitecture CPU architecture of the image, x86_64 and aarch64 are currently supported.
type ImageRequestArchitecture string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusStatus   `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusStatus defines model for ImageStatus.Status.
type ImageStatusStatus string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// Kernel defines model for Kernel.
type Kernel struct {
	// Append Appends arguments to the bootloader kernel command line
	Append *string `json:"append,omitempty"`

	// Name Name of the kernel to use
	Name *string `json:"name,omitempty"`
}

// Locale Locale configuration
type Locale struct {
	// Keyboard Sets the keyboard layout
	Keyboard *string `json:"keyboard,omitempty"`

	// Languages List of locales to be installed, the first one becomes primary, subsequent ones are secondary
	Languages *[]string `json:"languages,omitempty"`
}

// OCIUploadRequestOptions defines model for OCIUploadRequestOptions.
type OCIUploadRequestOptions = map[string]interface{}

// OCIUploadStatus defines model for OCIUploadStatus.
type OCIUploadStatus struct {
	Url string `json:"url"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// Contenturl A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Parent Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Rhsm Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	// ProfileDescription The longform policy description
	ProfileDescription *string `json:"profile_description,omitempty"`

	// ProfileId The policy reference ID
	ProfileId string `json:"profile_id"`

	// ProfileName The policy type
	ProfileName *string `json:"profile_name,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// CheckRepoGpg Enables gpg verification of the repository metadata
	CheckRepoGpg   *bool   `json:"check_repo_gpg,omitempty"`
	Gpgkey         *string `json:"gpgkey,omitempty"`
	IgnoreSsl      *bool   `json:"ignore_ssl,omitempty"`
	Metalink       *string `json:"metalink,omitempty"`
	Mirrorlist     *string `json:"mirrorlist,omitempty"`
	ModuleHotfixes *bool   `json:"module_hotfixes,omitempty"`
	Rhsm           bool    `json:"rhsm"`
}

// Services defines model for Services.
type Services struct {
	// Disabled List of services to disable by default
	Disabled *[]string `json:"disabled,omitempty"`

	// Enabled List of services to enable by default
	Enabled *[]string `json:"enabled,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`

	// Rhc Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server-url"`
}

// Timezone Timezone configuration
type Timezone struct {
	// Ntpservers List of ntp servers
	Ntpservers *[]string `json:"ntpservers,omitempty"`

	// Timezone Name of the timezone, defaults to UTC
	Timezone *string `json:"timezone,omitempty"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options UploadRequest_Options `json:"options"`
	Type    UploadTypes           `json:"type"`
}

// UploadRequest_Options defines model for UploadRequest.Options.
type UploadRequest_Options struct {
	union json.RawMessage
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options UploadStatus_Options `json:"options"`
	Status  UploadStatusStatus   `json:"status"`
	Type    UploadTypes          `json:"type"`
}

// UploadStatus_Options defines model for UploadStatus.Options.
type UploadStatus_Options struct {
	union json.RawMessage
}

// UploadStatusStatus defines model for UploadStatus.Status.
type UploadStatusStatus string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Name   string `json:"name"`
	SshKey string `json:"ssh_key"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {
	// Limit max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// IgnoreImageTypes Filter the composes on image type. The filter is optional and can be specified multiple times.
	IgnoreImageTypes *[]ImageTypes `form:"ignoreImageTypes,omitempty" json:"ignoreImageTypes,omitempty"`
}

// GetComposeClonesParams defines parameters for GetComposeClones.
type GetComposeClonesParams struct {
	// Limit max amount of clones, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset clones page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetBlueprintComposesParams defines parameters for GetBlueprintComposes.
type GetBlueprintComposesParams struct {
	// BlueprintVersion Filter by a specific version of the Blueprint we want to fetch composes for
	BlueprintVersion *int `form:"blueprint_version,omitempty" json:"blueprint_version,omitempty"`

	// Limit max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// IgnoreImageTypes Filter the composes on image type. The filter is optional and can be specified multiple times.
	IgnoreImageTypes *[]ImageTypes `form:"ignoreImageTypes,omitempty" json:"ignoreImageTypes,omitempty"`
}

// GetBlueprintsParams defines parameters for GetBlueprints.
type GetBlueprintsParams struct {
	// Search search for blueprints by name or description
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Limit max amount of blueprints, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset blueprint page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	// Distribution distribution to look up packages for
	Distribution Distributions `form:"distribution" json:"distribution"`

	// Architecture architecture to look up packages for
	Architecture GetPackagesParamsArchitecture `form:"architecture" json:"architecture"`

	// Search packages to look for
	Search string `form:"search" json:"search"`

	// Limit max amount of packages, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset packages page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParamsArchitecture defines parameters for GetPackages.
type GetPackagesParamsArchitecture string

// ComposeImageJSONRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody = ComposeRequest

// CloneComposeJSONRequestBody defines body for CloneCompose for application/json ContentType.
type CloneComposeJSONRequestBody = CloneRequest

// CreateBlueprintJSONRequestBody defines body for CreateBlueprint for application/json ContentType.
type CreateBlueprintJSONRequestBody = CreateBlueprintRequest

// UpdateBlueprintJSONRequestBody defines body for UpdateBlueprint for application/json ContentType.
type UpdateBlueprintJSONRequestBody = CreateBlueprintRequest

// AsAWSEC2Clone returns the union data inside the CloneRequest as a AWSEC2Clone
func (t CloneRequest) AsAWSEC2Clone() (AWSEC2Clone, error) {
	var body AWSEC2Clone
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSEC2Clone overwrites any union data inside the CloneRequest as the provided AWSEC2Clone
func (t *CloneRequest) FromAWSEC2Clone(v AWSEC2Clone) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSEC2Clone performs a merge with any union data inside the CloneRequest, using the provided AWSEC2Clone
func (t *CloneRequest) MergeAWSEC2Clone(v AWSEC2Clone) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t CloneRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CloneRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAWSUploadStatus returns the union data inside the CloneStatusResponse_Options as a AWSUploadStatus
func (t CloneStatusResponse_Options) AsAWSUploadStatus() (AWSUploadStatus, error) {
	var body AWSUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSUploadStatus overwrites any union data inside the CloneStatusResponse_Options as the provided AWSUploadStatus
func (t *CloneStatusResponse_Options) FromAWSUploadStatus(v AWSUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSUploadStatus performs a merge with any union data inside the CloneStatusResponse_Options, using the provided AWSUploadStatus
func (t *CloneStatusResponse_Options) MergeAWSUploadStatus(v AWSUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAWSS3UploadStatus returns the union data inside the CloneStatusResponse_Options as a AWSS3UploadStatus
func (t CloneStatusResponse_Options) AsAWSS3UploadStatus() (AWSS3UploadStatus, error) {
	var body AWSS3UploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSS3UploadStatus overwrites any union data inside the CloneStatusResponse_Options as the provided AWSS3UploadStatus
func (t *CloneStatusResponse_Options) FromAWSS3UploadStatus(v AWSS3UploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSS3UploadStatus performs a merge with any union data inside the CloneStatusResponse_Options, using the provided AWSS3UploadStatus
func (t *CloneStatusResponse_Options) MergeAWSS3UploadStatus(v AWSS3UploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsGCPUploadStatus returns the union data inside the CloneStatusResponse_Options as a GCPUploadStatus
func (t CloneStatusResponse_Options) AsGCPUploadStatus() (GCPUploadStatus, error) {
	var body GCPUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGCPUploadStatus overwrites any union data inside the CloneStatusResponse_Options as the provided GCPUploadStatus
func (t *CloneStatusResponse_Options) FromGCPUploadStatus(v GCPUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGCPUploadStatus performs a merge with any union data inside the CloneStatusResponse_Options, using the provided GCPUploadStatus
func (t *CloneStatusResponse_Options) MergeGCPUploadStatus(v GCPUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAzureUploadStatus returns the union data inside the CloneStatusResponse_Options as a AzureUploadStatus
func (t CloneStatusResponse_Options) AsAzureUploadStatus() (AzureUploadStatus, error) {
	var body AzureUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureUploadStatus overwrites any union data inside the CloneStatusResponse_Options as the provided AzureUploadStatus
func (t *CloneStatusResponse_Options) FromAzureUploadStatus(v AzureUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureUploadStatus performs a merge with any union data inside the CloneStatusResponse_Options, using the provided AzureUploadStatus
func (t *CloneStatusResponse_Options) MergeAzureUploadStatus(v AzureUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsOCIUploadStatus returns the union data inside the CloneStatusResponse_Options as a OCIUploadStatus
func (t CloneStatusResponse_Options) AsOCIUploadStatus() (OCIUploadStatus, error) {
	var body OCIUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOCIUploadStatus overwrites any union data inside the CloneStatusResponse_Options as the provided OCIUploadStatus
func (t *CloneStatusResponse_Options) FromOCIUploadStatus(v OCIUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOCIUploadStatus performs a merge with any union data inside the CloneStatusResponse_Options, using the provided OCIUploadStatus
func (t *CloneStatusResponse_Options) MergeOCIUploadStatus(v OCIUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t CloneStatusResponse_Options) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CloneStatusResponse_Options) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDirectoryGroup0 returns the union data inside the Directory_Group as a DirectoryGroup0
func (t Directory_Group) AsDirectoryGroup0() (DirectoryGroup0, error) {
	var body DirectoryGroup0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDirectoryGroup0 overwrites any union data inside the Directory_Group as the provided DirectoryGroup0
func (t *Directory_Group) FromDirectoryGroup0(v DirectoryGroup0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDirectoryGroup0 performs a merge with any union data inside the Directory_Group, using the provided DirectoryGroup0
func (t *Directory_Group) MergeDirectoryGroup0(v DirectoryGroup0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsDirectoryGroup1 returns the union data inside the Directory_Group as a DirectoryGroup1
func (t Directory_Group) AsDirectoryGroup1() (DirectoryGroup1, error) {
	var body DirectoryGroup1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDirectoryGroup1 overwrites any union data inside the Directory_Group as the provided DirectoryGroup1
func (t *Directory_Group) FromDirectoryGroup1(v DirectoryGroup1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDirectoryGroup1 performs a merge with any union data inside the Directory_Group, using the provided DirectoryGroup1
func (t *Directory_Group) MergeDirectoryGroup1(v DirectoryGroup1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t Directory_Group) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Directory_Group) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDirectoryUser0 returns the union data inside the Directory_User as a DirectoryUser0
func (t Directory_User) AsDirectoryUser0() (DirectoryUser0, error) {
	var body DirectoryUser0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDirectoryUser0 overwrites any union data inside the Directory_User as the provided DirectoryUser0
func (t *Directory_User) FromDirectoryUser0(v DirectoryUser0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDirectoryUser0 performs a merge with any union data inside the Directory_User, using the provided DirectoryUser0
func (t *Directory_User) MergeDirectoryUser0(v DirectoryUser0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsDirectoryUser1 returns the union data inside the Directory_User as a DirectoryUser1
func (t Directory_User) AsDirectoryUser1() (DirectoryUser1, error) {
	var body DirectoryUser1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDirectoryUser1 overwrites any union data inside the Directory_User as the provided DirectoryUser1
func (t *Directory_User) FromDirectoryUser1(v DirectoryUser1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDirectoryUser1 performs a merge with any union data inside the Directory_User, using the provided DirectoryUser1
func (t *Directory_User) MergeDirectoryUser1(v DirectoryUser1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t Directory_User) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Directory_User) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFileGroup0 returns the union data inside the File_Group as a FileGroup0
func (t File_Group) AsFileGroup0() (FileGroup0, error) {
	var body FileGroup0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFileGroup0 overwrites any union data inside the File_Group as the provided FileGroup0
func (t *File_Group) FromFileGroup0(v FileGroup0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFileGroup0 performs a merge with any union data inside the File_Group, using the provided FileGroup0
func (t *File_Group) MergeFileGroup0(v FileGroup0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsFileGroup1 returns the union data inside the File_Group as a FileGroup1
func (t File_Group) AsFileGroup1() (FileGroup1, error) {
	var body FileGroup1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFileGroup1 overwrites any union data inside the File_Group as the provided FileGroup1
func (t *File_Group) FromFileGroup1(v FileGroup1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFileGroup1 performs a merge with any union data inside the File_Group, using the provided FileGroup1
func (t *File_Group) MergeFileGroup1(v FileGroup1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t File_Group) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *File_Group) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFileUser0 returns the union data inside the File_User as a FileUser0
func (t File_User) AsFileUser0() (FileUser0, error) {
	var body FileUser0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFileUser0 overwrites any union data inside the File_User as the provided FileUser0
func (t *File_User) FromFileUser0(v FileUser0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFileUser0 performs a merge with any union data inside the File_User, using the provided FileUser0
func (t *File_User) MergeFileUser0(v FileUser0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsFileUser1 returns the union data inside the File_User as a FileUser1
func (t File_User) AsFileUser1() (FileUser1, error) {
	var body FileUser1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFileUser1 overwrites any union data inside the File_User as the provided FileUser1
func (t *File_User) FromFileUser1(v FileUser1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFileUser1 performs a merge with any union data inside the File_User, using the provided FileUser1
func (t *File_User) MergeFileUser1(v FileUser1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t File_User) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *File_User) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAWSUploadRequestOptions returns the union data inside the UploadRequest_Options as a AWSUploadRequestOptions
func (t UploadRequest_Options) AsAWSUploadRequestOptions() (AWSUploadRequestOptions, error) {
	var body AWSUploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSUploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided AWSUploadRequestOptions
func (t *UploadRequest_Options) FromAWSUploadRequestOptions(v AWSUploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSUploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided AWSUploadRequestOptions
func (t *UploadRequest_Options) MergeAWSUploadRequestOptions(v AWSUploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAWSS3UploadRequestOptions returns the union data inside the UploadRequest_Options as a AWSS3UploadRequestOptions
func (t UploadRequest_Options) AsAWSS3UploadRequestOptions() (AWSS3UploadRequestOptions, error) {
	var body AWSS3UploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSS3UploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided AWSS3UploadRequestOptions
func (t *UploadRequest_Options) FromAWSS3UploadRequestOptions(v AWSS3UploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSS3UploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided AWSS3UploadRequestOptions
func (t *UploadRequest_Options) MergeAWSS3UploadRequestOptions(v AWSS3UploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsGCPUploadRequestOptions returns the union data inside the UploadRequest_Options as a GCPUploadRequestOptions
func (t UploadRequest_Options) AsGCPUploadRequestOptions() (GCPUploadRequestOptions, error) {
	var body GCPUploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGCPUploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided GCPUploadRequestOptions
func (t *UploadRequest_Options) FromGCPUploadRequestOptions(v GCPUploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGCPUploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided GCPUploadRequestOptions
func (t *UploadRequest_Options) MergeGCPUploadRequestOptions(v GCPUploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAzureUploadRequestOptions returns the union data inside the UploadRequest_Options as a AzureUploadRequestOptions
func (t UploadRequest_Options) AsAzureUploadRequestOptions() (AzureUploadRequestOptions, error) {
	var body AzureUploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureUploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided AzureUploadRequestOptions
func (t *UploadRequest_Options) FromAzureUploadRequestOptions(v AzureUploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureUploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided AzureUploadRequestOptions
func (t *UploadRequest_Options) MergeAzureUploadRequestOptions(v AzureUploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsOCIUploadRequestOptions returns the union data inside the UploadRequest_Options as a OCIUploadRequestOptions
func (t UploadRequest_Options) AsOCIUploadRequestOptions() (OCIUploadRequestOptions, error) {
	var body OCIUploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOCIUploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided OCIUploadRequestOptions
func (t *UploadRequest_Options) FromOCIUploadRequestOptions(v OCIUploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOCIUploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided OCIUploadRequestOptions
func (t *UploadRequest_Options) MergeOCIUploadRequestOptions(v OCIUploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t UploadRequest_Options) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UploadRequest_Options) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAWSUploadStatus returns the union data inside the UploadStatus_Options as a AWSUploadStatus
func (t UploadStatus_Options) AsAWSUploadStatus() (AWSUploadStatus, error) {
	var body AWSUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSUploadStatus overwrites any union data inside the UploadStatus_Options as the provided AWSUploadStatus
func (t *UploadStatus_Options) FromAWSUploadStatus(v AWSUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSUploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided AWSUploadStatus
func (t *UploadStatus_Options) MergeAWSUploadStatus(v AWSUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAWSS3UploadStatus returns the union data inside the UploadStatus_Options as a AWSS3UploadStatus
func (t UploadStatus_Options) AsAWSS3UploadStatus() (AWSS3UploadStatus, error) {
	var body AWSS3UploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSS3UploadStatus overwrites any union data inside the UploadStatus_Options as the provided AWSS3UploadStatus
func (t *UploadStatus_Options) FromAWSS3UploadStatus(v AWSS3UploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSS3UploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided AWSS3UploadStatus
func (t *UploadStatus_Options) MergeAWSS3UploadStatus(v AWSS3UploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsGCPUploadStatus returns the union data inside the UploadStatus_Options as a GCPUploadStatus
func (t UploadStatus_Options) AsGCPUploadStatus() (GCPUploadStatus, error) {
	var body GCPUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGCPUploadStatus overwrites any union data inside the UploadStatus_Options as the provided GCPUploadStatus
func (t *UploadStatus_Options) FromGCPUploadStatus(v GCPUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGCPUploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided GCPUploadStatus
func (t *UploadStatus_Options) MergeGCPUploadStatus(v GCPUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAzureUploadStatus returns the union data inside the UploadStatus_Options as a AzureUploadStatus
func (t UploadStatus_Options) AsAzureUploadStatus() (AzureUploadStatus, error) {
	var body AzureUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureUploadStatus overwrites any union data inside the UploadStatus_Options as the provided AzureUploadStatus
func (t *UploadStatus_Options) FromAzureUploadStatus(v AzureUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureUploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided AzureUploadStatus
func (t *UploadStatus_Options) MergeAzureUploadStatus(v AzureUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsOCIUploadStatus returns the union data inside the UploadStatus_Options as a OCIUploadStatus
func (t UploadStatus_Options) AsOCIUploadStatus() (OCIUploadStatus, error) {
	var body OCIUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOCIUploadStatus overwrites any union data inside the UploadStatus_Options as the provided OCIUploadStatus
func (t *UploadStatus_Options) FromOCIUploadStatus(v OCIUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOCIUploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided OCIUploadStatus
func (t *UploadStatus_Options) MergeOCIUploadStatus(v OCIUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t UploadStatus_Options) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UploadStatus_Options) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution Distributions) error
	// get status of a compose clone
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id openapi_types.UUID) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// delete a compose
	// (DELETE /composes/{composeId})
	DeleteCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId openapi_types.UUID) error
	// clone a compose
	// (POST /composes/{composeId}/clone)
	CloneCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get clones of a compose
	// (GET /composes/{composeId}/clones)
	GetComposeClones(ctx echo.Context, composeId openapi_types.UUID, params GetComposeClonesParams) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId openapi_types.UUID) error
	// get the distributions available to this user
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// create blueprint
	// (POST /experimental/blueprint)
	CreateBlueprint(ctx echo.Context) error
	// update blueprint
	// (PUT /experimental/blueprint/{id})
	UpdateBlueprint(ctx echo.Context, id openapi_types.UUID) error
	// create new compose from blueprint
	// (POST /experimental/blueprint/{id}/compose)
	ComposeBlueprint(ctx echo.Context, id openapi_types.UUID) error
	// get composes associated with a blueprint
	// (GET /experimental/blueprint/{id}/composes)
	GetBlueprintComposes(ctx echo.Context, id openapi_types.UUID, params GetBlueprintComposesParams) error
	// get a collection of blueprints
	// (GET /experimental/blueprints)
	GetBlueprints(ctx echo.Context, params GetBlueprintsParams) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error
	// get the available profiles for a given distribution. This is a temporary endpoint meant to be removed soon.
	// (GET /oscap/{distribution}/profiles)
	GetOscapProfiles(ctx echo.Context, distribution Distributions) error
	// get the customizations for a given distribution and profile. This is a temporary endpoint meant to be removed soon.
	// (GET /oscap/{distribution}/{profile}/customizations)
	GetOscapCustomizations(ctx echo.Context, distribution Distributions, profile DistributionProfileItem) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution Distributions

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "ignoreImageTypes" -------------

	err = runtime.BindQueryParameter("form", true, false, "ignoreImageTypes", ctx.QueryParams(), &params.IgnoreImageTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ignoreImageTypes: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// DeleteCompose converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompose(ctx, composeId)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// CloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) CloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CloneCompose(ctx, composeId)
	return err
}

// GetComposeClones converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeClones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposeClonesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeClones(ctx, composeId, params)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// CreateBlueprint converts echo context to params.
func (w *ServerInterfaceWrapper) CreateBlueprint(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateBlueprint(ctx)
	return err
}

// UpdateBlueprint converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateBlueprint(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateBlueprint(ctx, id)
	return err
}

// ComposeBlueprint converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeBlueprint(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeBlueprint(ctx, id)
	return err
}

// GetBlueprintComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlueprintComposes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlueprintComposesParams
	// ------------- Optional query parameter "blueprint_version" -------------

	err = runtime.BindQueryParameter("form", true, false, "blueprint_version", ctx.QueryParams(), &params.BlueprintVersion)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter blueprint_version: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "ignoreImageTypes" -------------

	err = runtime.BindQueryParameter("form", true, false, "ignoreImageTypes", ctx.QueryParams(), &params.IgnoreImageTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ignoreImageTypes: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlueprintComposes(ctx, id, params)
	return err
}

// GetBlueprints converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlueprints(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlueprintsParams
	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlueprints(ctx, params)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetOscapProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) GetOscapProfiles(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution Distributions

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOscapProfiles(ctx, distribution)
	return err
}

// GetOscapCustomizations converts echo context to params.
func (w *ServerInterfaceWrapper) GetOscapCustomizations(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution Distributions

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Path parameter "profile" -------------
	var profile DistributionProfileItem

	err = runtime.BindStyledParameterWithLocation("simple", false, "profile", runtime.ParamLocationPath, ctx.Param("profile"), &profile)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter profile: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOscapCustomizations(ctx, distribution, profile)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/architectures/:distribution", wrapper.GetArchitectures)
	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.ComposeImage)
	router.GET(baseURL+"/composes", wrapper.GetComposes)
	router.DELETE(baseURL+"/composes/:composeId", wrapper.DeleteCompose)
	router.GET(baseURL+"/composes/:composeId", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:composeId/clone", wrapper.CloneCompose)
	router.GET(baseURL+"/composes/:composeId/clones", wrapper.GetComposeClones)
	router.GET(baseURL+"/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/distributions", wrapper.GetDistributions)
	router.POST(baseURL+"/experimental/blueprint", wrapper.CreateBlueprint)
	router.PUT(baseURL+"/experimental/blueprint/:id", wrapper.UpdateBlueprint)
	router.POST(baseURL+"/experimental/blueprint/:id/compose", wrapper.ComposeBlueprint)
	router.GET(baseURL+"/experimental/blueprint/:id/composes", wrapper.GetBlueprintComposes)
	router.GET(baseURL+"/experimental/blueprints", wrapper.GetBlueprints)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)
	router.GET(baseURL+"/oscap/:distribution/profiles", wrapper.GetOscapProfiles)
	router.GET(baseURL+"/oscap/:distribution/:profile/customizations", wrapper.GetOscapCustomizations)
	router.GET(baseURL+"/packages", wrapper.GetPackages)
	router.GET(baseURL+"/ready", wrapper.GetReadiness)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
