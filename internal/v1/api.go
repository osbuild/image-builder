// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for Distributions.
const (
	Centos8      Distributions = "centos-8"
	Centos9      Distributions = "centos-9"
	Fedora37     Distributions = "fedora-37"
	Fedora38     Distributions = "fedora-38"
	Fedora39     Distributions = "fedora-39"
	Fedora40     Distributions = "fedora-40"
	Rhel8        Distributions = "rhel-8"
	Rhel84       Distributions = "rhel-84"
	Rhel85       Distributions = "rhel-85"
	Rhel86       Distributions = "rhel-86"
	Rhel87       Distributions = "rhel-87"
	Rhel88       Distributions = "rhel-88"
	Rhel8Nightly Distributions = "rhel-8-nightly"
	Rhel9        Distributions = "rhel-9"
	Rhel90       Distributions = "rhel-90"
	Rhel91       Distributions = "rhel-91"
	Rhel92       Distributions = "rhel-92"
	Rhel9Nightly Distributions = "rhel-9-nightly"
)

// Defines values for ImageRequestArchitecture.
const (
	Aarch64 ImageRequestArchitecture = "aarch64"
	X8664   ImageRequestArchitecture = "x86_64"
)

// Defines values for ImageStatusStatus.
const (
	ImageStatusStatusBuilding    ImageStatusStatus = "building"
	ImageStatusStatusFailure     ImageStatusStatus = "failure"
	ImageStatusStatusPending     ImageStatusStatus = "pending"
	ImageStatusStatusRegistering ImageStatusStatus = "registering"
	ImageStatusStatusSuccess     ImageStatusStatus = "success"
	ImageStatusStatusUploading   ImageStatusStatus = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAmi               ImageTypes = "ami"
	ImageTypesAws               ImageTypes = "aws"
	ImageTypesAzure             ImageTypes = "azure"
	ImageTypesEdgeCommit        ImageTypes = "edge-commit"
	ImageTypesEdgeInstaller     ImageTypes = "edge-installer"
	ImageTypesGcp               ImageTypes = "gcp"
	ImageTypesGuestImage        ImageTypes = "guest-image"
	ImageTypesImageInstaller    ImageTypes = "image-installer"
	ImageTypesRhelEdgeCommit    ImageTypes = "rhel-edge-commit"
	ImageTypesRhelEdgeInstaller ImageTypes = "rhel-edge-installer"
	ImageTypesVhd               ImageTypes = "vhd"
	ImageTypesVsphere           ImageTypes = "vsphere"
	ImageTypesVsphereOva        ImageTypes = "vsphere-ova"
	ImageTypesWsl               ImageTypes = "wsl"
)

// Defines values for UploadStatusStatus.
const (
	UploadStatusStatusFailure UploadStatusStatus = "failure"
	UploadStatusStatusPending UploadStatusStatus = "pending"
	UploadStatusStatusRunning UploadStatusStatus = "running"
	UploadStatusStatusSuccess UploadStatusStatus = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws   UploadTypes = "aws"
	UploadTypesAwsS3 UploadTypes = "aws.s3"
	UploadTypesAzure UploadTypes = "azure"
	UploadTypesGcp   UploadTypes = "gcp"
)

// AWSEC2Clone defines model for AWSEC2Clone.
type AWSEC2Clone struct {
	// A region as described in
	// https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-regions
	Region string `json:"region"`

	// An array of AWS account IDs as described in
	// https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions = map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`

	// Base repositories for the given distribution and architecture.
	Repositories []Repository `json:"repositories"`
}

// Architectures defines model for Architectures.
type Architectures = []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {
	// Name of the created image.
	// Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens.
	// The total length is limited to 60 characters.
	ImageName *string `json:"image_name,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of the source that will be used to resolve the tenant and subscription IDs.
	// Do not provide a tenant_id or subscription_id when providing a source_id.
	SourceId *string `json:"source_id,omitempty"`

	// ID of subscription where the image should be uploaded.
	// When providing a subscription_id, also be sure to provide a tenant_id and do not include a source_id.
	SubscriptionId *string `json:"subscription_id,omitempty"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	// When providing a tenant_id, also be sure to provide a subscription_id and do not include a source_id.
	TenantId *string `json:"tenant_id,omitempty"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneRequest defines model for CloneRequest.
type CloneRequest interface{}

// CloneResponse defines model for CloneResponse.
type CloneResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ClonesResponse defines model for ClonesResponse.
type ClonesResponse struct {
	Data  []ClonesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ClonesResponseItem defines model for ClonesResponseItem.
type ClonesResponseItem struct {
	// UUID of the parent compose of the clone
	ComposeId openapi_types.UUID `json:"compose_id"`
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Request   CloneRequest       `json:"request"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`

	// List of all distributions that image builder supports. A user might not have access to
	// restricted distributions.
	//
	// Restricted distributions include the RHEL nightlies and the Fedora distributions.
	Distribution     Distributions `json:"distribution"`
	ImageDescription *string       `json:"image_description,omitempty"`
	ImageName        *string       `json:"image_name,omitempty"`

	// Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus    `json:"image_status"`
	Request     ComposeRequest `json:"request"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	ImageName *string            `json:"image_name,omitempty"`
	Request   ComposeRequest     `json:"request"`
}

// Repository configuration for custom repositories.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above. Id is required.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg *bool     `json:"check_repo_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`

	// GPG key used to sign packages in this repository. Can be a gpg key or a URL
	Gpgkey     *[]string `json:"gpgkey,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`
	Name       *string   `json:"name,omitempty"`
	Priority   *int      `json:"priority,omitempty"`
	SslVerify  *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	CustomRepositories  *[]CustomRepository `json:"custom_repositories,omitempty"`
	Filesystem          *[]Filesystem       `json:"filesystem,omitempty"`
	Openscap            *OpenSCAP           `json:"openscap,omitempty"`
	Packages            *[]string           `json:"packages,omitempty"`
	PayloadRepositories *[]Repository       `json:"payload_repositories,omitempty"`
	Subscription        *Subscription       `json:"subscription,omitempty"`

	// list of users that a customer can add, also specifying their respective groups and SSH keys
	Users *[]User `json:"users,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// List of all distributions that image builder supports. A user might not have access to
// restricted distributions.
//
// Restricted distributions include the RHEL nightlies and the Fedora distributions.
type Distributions string

// List of distributions this user is allowed to build.
type DistributionsResponse = []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {
	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	// CPU architecture of the image, x86_64 and aarch64 are currently supported.
	Architecture ImageRequestArchitecture `json:"architecture"`
	ImageType    ImageTypes               `json:"image_type"`
	Ostree       *OSTree                  `json:"ostree,omitempty"`

	// Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size          *uint64       `json:"size,omitempty"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// CPU architecture of the image, x86_64 and aarch64 are currently supported.
type ImageRequestArchitecture string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusStatus   `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusStatus defines model for ImageStatus.Status.
type ImageStatusStatus string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// OpenSCAPTailoring defines model for OpenSCAPTailoring.
type OpenSCAPTailoring struct {
	// Rules to be included in the scan and remediation.
	// The rule ID can be either full, or just the suffix
	Selected *[]string `json:"selected,omitempty"`

	// Rules to be excluded from the scan and remediation
	// The rule ID can be either full, or just the suffix
	Unselected *[]string `json:"unselected,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool   `json:"check_repo_gpg,omitempty"`
	Gpgkey       *string `json:"gpgkey,omitempty"`
	IgnoreSsl    *bool   `json:"ignore_ssl,omitempty"`
	Metalink     *string `json:"metalink,omitempty"`
	Mirrorlist   *string `json:"mirrorlist,omitempty"`
	Rhsm         bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}        `json:"options"`
	Status  UploadStatusStatus `json:"status"`
	Type    UploadTypes        `json:"type"`
}

// UploadStatusStatus defines model for UploadStatus.Status.
type UploadStatusStatus string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Name   string `json:"name"`
	SshKey string `json:"ssh_key"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody = ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {
	// max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// CloneComposeJSONBody defines parameters for CloneCompose.
type CloneComposeJSONBody = CloneRequest

// GetComposeClonesParams defines parameters for GetComposeClones.
type GetComposeClonesParams struct {
	// max amount of clones, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// clones page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	// distribution to look up packages for
	Distribution Distributions `form:"distribution" json:"distribution"`

	// architecture to look up packages for
	Architecture GetPackagesParamsArchitecture `form:"architecture" json:"architecture"`

	// packages to look for
	Search string `form:"search" json:"search"`

	// max amount of packages, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParamsArchitecture defines parameters for GetPackages.
type GetPackagesParamsArchitecture string

// ComposeImageJSONRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody = ComposeImageJSONBody

// CloneComposeJSONRequestBody defines body for CloneCompose for application/json ContentType.
type CloneComposeJSONRequestBody = CloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution Distributions) error
	// get status of a compose clone
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id openapi_types.UUID) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// delete a compose
	// (DELETE /composes/{composeId})
	DeleteCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId openapi_types.UUID) error
	// clone a compose
	// (POST /composes/{composeId}/clone)
	CloneCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get clones of a compose
	// (GET /composes/{composeId}/clones)
	GetComposeClones(ctx echo.Context, composeId openapi_types.UUID, params GetComposeClonesParams) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId openapi_types.UUID) error
	// get the distributions available to this user
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution Distributions

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// DeleteCompose converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompose(ctx, composeId)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// CloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) CloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CloneCompose(ctx, composeId)
	return err
}

// GetComposeClones converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeClones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposeClonesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeClones(ctx, composeId, params)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/architectures/:distribution", wrapper.GetArchitectures)
	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.ComposeImage)
	router.GET(baseURL+"/composes", wrapper.GetComposes)
	router.DELETE(baseURL+"/composes/:composeId", wrapper.DeleteCompose)
	router.GET(baseURL+"/composes/:composeId", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:composeId/clone", wrapper.CloneCompose)
	router.GET(baseURL+"/composes/:composeId/clones", wrapper.GetComposeClones)
	router.GET(baseURL+"/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/distributions", wrapper.GetDistributions)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)
	router.GET(baseURL+"/packages", wrapper.GetPackages)
	router.GET(baseURL+"/ready", wrapper.GetReadiness)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"P8pigk/a80rm48fH/wsAAP//YqC4GYNnAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
