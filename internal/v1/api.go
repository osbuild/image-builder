// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for Distributions.
const (
	Centos8  Distributions = "centos-8"
	Centos9  Distributions = "centos-9"
	Fedora37 Distributions = "fedora-37"
	Fedora38 Distributions = "fedora-38"
	Rhel8    Distributions = "rhel-8"
	Rhel84   Distributions = "rhel-84"
	Rhel85   Distributions = "rhel-85"
	Rhel86   Distributions = "rhel-86"
	Rhel87   Distributions = "rhel-87"
	Rhel88   Distributions = "rhel-88"
	Rhel9    Distributions = "rhel-9"
	Rhel90   Distributions = "rhel-90"
	Rhel91   Distributions = "rhel-91"
	Rhel92   Distributions = "rhel-92"
)

// Defines values for ImageRequestArchitecture.
const (
	Aarch64 ImageRequestArchitecture = "aarch64"
	X8664   ImageRequestArchitecture = "x86_64"
)

// Defines values for ImageStatusStatus.
const (
	ImageStatusStatusBuilding    ImageStatusStatus = "building"
	ImageStatusStatusFailure     ImageStatusStatus = "failure"
	ImageStatusStatusPending     ImageStatusStatus = "pending"
	ImageStatusStatusRegistering ImageStatusStatus = "registering"
	ImageStatusStatusSuccess     ImageStatusStatus = "success"
	ImageStatusStatusUploading   ImageStatusStatus = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAmi               ImageTypes = "ami"
	ImageTypesAws               ImageTypes = "aws"
	ImageTypesAzure             ImageTypes = "azure"
	ImageTypesEdgeCommit        ImageTypes = "edge-commit"
	ImageTypesEdgeInstaller     ImageTypes = "edge-installer"
	ImageTypesGcp               ImageTypes = "gcp"
	ImageTypesGuestImage        ImageTypes = "guest-image"
	ImageTypesImageInstaller    ImageTypes = "image-installer"
	ImageTypesRhelEdgeCommit    ImageTypes = "rhel-edge-commit"
	ImageTypesRhelEdgeInstaller ImageTypes = "rhel-edge-installer"
	ImageTypesVhd               ImageTypes = "vhd"
	ImageTypesVsphere           ImageTypes = "vsphere"
	ImageTypesVsphereOva        ImageTypes = "vsphere-ova"
)

// Defines values for UploadStatusStatus.
const (
	UploadStatusStatusFailure UploadStatusStatus = "failure"
	UploadStatusStatusPending UploadStatusStatus = "pending"
	UploadStatusStatusRunning UploadStatusStatus = "running"
	UploadStatusStatusSuccess UploadStatusStatus = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws   UploadTypes = "aws"
	UploadTypesAwsS3 UploadTypes = "aws.s3"
	UploadTypesAzure UploadTypes = "azure"
	UploadTypesGcp   UploadTypes = "gcp"
)

// AWSEC2Clone defines model for AWSEC2Clone.
type AWSEC2Clone struct {
	// A region as described in
	// https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-regions
	Region string `json:"region"`

	// An array of AWS account IDs as described in
	// https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions = map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`

	// Base repositories for the given distribution and architecture.
	Repositories []Repository `json:"repositories"`
}

// Architectures defines model for Architectures.
type Architectures = []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {
	// Name of the created image.
	// Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens.
	// The total length is limited to 60 characters.
	ImageName *string `json:"image_name,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of the source that will be used to resolve the tenant and subscription IDs.
	// Do not provide a tenant_id or subscription_id when providing a source_id.
	SourceId *string `json:"source_id,omitempty"`

	// ID of subscription where the image should be uploaded.
	// When providing a subscription_id, also be sure to provide a tenant_id and do not include a source_id.
	SubscriptionId *string `json:"subscription_id,omitempty"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	// When providing a tenant_id, also be sure to provide a subscription_id and do not include a source_id.
	TenantId *string `json:"tenant_id,omitempty"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneRequest defines model for CloneRequest.
type CloneRequest interface{}

// CloneResponse defines model for CloneResponse.
type CloneResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ClonesResponse defines model for ClonesResponse.
type ClonesResponse struct {
	Data  []ClonesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ClonesResponseItem defines model for ClonesResponseItem.
type ClonesResponseItem struct {
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Request   interface{}        `json:"request"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   Distributions   `json:"distribution"`
	ImageName      *string         `json:"image_name,omitempty"`

	// Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus    `json:"image_status"`
	Request     ComposeRequest `json:"request"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	ImageName *string            `json:"image_name,omitempty"`
	Request   interface{}        `json:"request"`
}

// Repository configuration for custom repositories.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above. Id is required.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg *bool     `json:"check_repo_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`

	// GPG key used to sign packages in this repository. Can be a gpg key or a URL
	Gpgkey     *[]string `json:"gpgkey,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`
	Name       *string   `json:"name,omitempty"`
	Priority   *int      `json:"priority,omitempty"`
	SslVerify  *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	CustomRepositories  *[]CustomRepository `json:"custom_repositories,omitempty"`
	Filesystem          *[]Filesystem       `json:"filesystem,omitempty"`
	Openscap            *OpenSCAP           `json:"openscap,omitempty"`
	Packages            *[]string           `json:"packages,omitempty"`
	PayloadRepositories *[]Repository       `json:"payload_repositories,omitempty"`
	Subscription        *Subscription       `json:"subscription,omitempty"`

	// list of users that a customer can add, also specifying their respective groups and SSH keys
	Users *[]User `json:"users,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions string

// DistributionsResponse defines model for DistributionsResponse.
type DistributionsResponse = []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {
	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	// CPU architecture of the image, x86_64 and aarch64 are currently supported.
	Architecture  ImageRequestArchitecture `json:"architecture"`
	ImageType     ImageTypes               `json:"image_type"`
	Ostree        *OSTree                  `json:"ostree,omitempty"`
	UploadRequest UploadRequest            `json:"upload_request"`
}

// CPU architecture of the image, x86_64 and aarch64 are currently supported.
type ImageRequestArchitecture string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusStatus   `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusStatus defines model for ImageStatus.Status.
type ImageStatusStatus string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	ProfileId string `json:"profile_id"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool   `json:"check_repo_gpg,omitempty"`
	Gpgkey       *string `json:"gpgkey,omitempty"`
	IgnoreSsl    *bool   `json:"ignore_ssl,omitempty"`
	Metalink     *string `json:"metalink,omitempty"`
	Mirrorlist   *string `json:"mirrorlist,omitempty"`
	Rhsm         bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}        `json:"options"`
	Status  UploadStatusStatus `json:"status"`
	Type    UploadTypes        `json:"type"`
}

// UploadStatusStatus defines model for UploadStatus.Status.
type UploadStatusStatus string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Name   string `json:"name"`
	SshKey string `json:"ssh_key"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody = ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {
	// max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// CloneComposeJSONBody defines parameters for CloneCompose.
type CloneComposeJSONBody = CloneRequest

// GetComposeClonesParams defines parameters for GetComposeClones.
type GetComposeClonesParams struct {
	// max amount of clones, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// clones page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	// distribution to look up packages for
	Distribution Distributions `form:"distribution" json:"distribution"`

	// architecture to look up packages for
	Architecture GetPackagesParamsArchitecture `form:"architecture" json:"architecture"`

	// packages to look for
	Search string `form:"search" json:"search"`

	// max amount of packages, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParamsArchitecture defines parameters for GetPackages.
type GetPackagesParamsArchitecture string

// ComposeImageJSONRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody = ComposeImageJSONBody

// CloneComposeJSONRequestBody defines body for CloneCompose for application/json ContentType.
type CloneComposeJSONRequestBody = CloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// get status of a compose clone
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id openapi_types.UUID) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// delete a compose
	// (DELETE /composes/{composeId})
	DeleteCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId openapi_types.UUID) error
	// clone a compose
	// (POST /composes/{composeId}/clone)
	CloneCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get clones of a compose
	// (GET /composes/{composeId}/clones)
	GetComposeClones(ctx echo.Context, composeId openapi_types.UUID, params GetComposeClonesParams) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId openapi_types.UUID) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// DeleteCompose converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompose(ctx, composeId)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// CloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) CloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CloneCompose(ctx, composeId)
	return err
}

// GetComposeClones converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeClones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposeClonesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeClones(ctx, composeId, params)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/architectures/:distribution", wrapper.GetArchitectures)
	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.ComposeImage)
	router.GET(baseURL+"/composes", wrapper.GetComposes)
	router.DELETE(baseURL+"/composes/:composeId", wrapper.DeleteCompose)
	router.GET(baseURL+"/composes/:composeId", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:composeId/clone", wrapper.CloneCompose)
	router.GET(baseURL+"/composes/:composeId/clones", wrapper.GetComposeClones)
	router.GET(baseURL+"/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/distributions", wrapper.GetDistributions)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)
	router.GET(baseURL+"/packages", wrapper.GetPackages)
	router.GET(baseURL+"/ready", wrapper.GetReadiness)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"91kt9fn98/8FAAD//xyrs5JRXwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
