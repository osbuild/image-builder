// Package v1 provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`
}

// Architectures defines model for Architectures.
type Architectures []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {

	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   Distributions   `json:"distribution"`
	ImageName      *string         `json:"image_name,omitempty"`
	ImageRequests  []ImageRequest  `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id string `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus `json:"image_status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string      `json:"created_at"`
	Id        string      `json:"id"`
	ImageName *string     `json:"image_name,omitempty"`
	Request   interface{} `json:"request"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Filesystem   *[]Filesystem `json:"filesystem,omitempty"`
	Packages     *[]string     `json:"packages,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions string

// List of Distributions
const (
	Distributions_centos_8 Distributions = "centos-8"
	Distributions_centos_9 Distributions = "centos-9"
	Distributions_rhel_84  Distributions = "rhel-84"
	Distributions_rhel_85  Distributions = "rhel-85"
)

// DistributionsResponse defines model for DistributionsResponse.
type DistributionsResponse []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    int    `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {

	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture  string        `json:"architecture"`
	ImageType     ImageTypes    `json:"image_type"`
	Ostree        *OSTree       `json:"ostree,omitempty"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       string              `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// List of ImageTypes
const (
	ImageTypes_ami                 ImageTypes = "ami"
	ImageTypes_aws                 ImageTypes = "aws"
	ImageTypes_azure               ImageTypes = "azure"
	ImageTypes_edge_commit         ImageTypes = "edge-commit"
	ImageTypes_edge_container      ImageTypes = "edge-container"
	ImageTypes_edge_installer      ImageTypes = "edge-installer"
	ImageTypes_gcp                 ImageTypes = "gcp"
	ImageTypes_guest_image         ImageTypes = "guest-image"
	ImageTypes_image_installer     ImageTypes = "image-installer"
	ImageTypes_rhel_edge_commit    ImageTypes = "rhel-edge-commit"
	ImageTypes_rhel_edge_installer ImageTypes = "rhel-edge-installer"
	ImageTypes_vhd                 ImageTypes = "vhd"
	ImageTypes_vsphere             ImageTypes = "vsphere"
)

// OSTree defines model for OSTree.
type OSTree struct {
	Ref *string `json:"ref,omitempty"`
	Url *string `json:"url,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`
	ServerUrl     string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{} `json:"options"`
	Status  string      `json:"status"`
	Type    UploadTypes `json:"type"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// List of UploadTypes
const (
	UploadTypes_aws    UploadTypes = "aws"
	UploadTypes_aws_s3 UploadTypes = "aws.s3"
	UploadTypes_azure  UploadTypes = "azure"
	UploadTypes_gcp    UploadTypes = "gcp"
)

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {

	// max amount of composes, default 100
	Limit *int `json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {

	// distribution to look up packages for
	Distribution Distributions `json:"distribution"`

	// architecture to look up packages for
	Architecture string `json:"architecture"`

	// packages to look for
	Search string `json:"search"`

	// max amount of packages, default 100
	Limit *int `json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// ComposeImageRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody ComposeImageJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId string) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId string) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameter("simple", false, "distribution", ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameter("simple", false, "composeId", ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameter("simple", false, "composeId", ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/architectures/:distribution", wrapper.GetArchitectures)
	router.POST("/compose", wrapper.ComposeImage)
	router.GET("/composes", wrapper.GetComposes)
	router.GET("/composes/:composeId", wrapper.GetComposeStatus)
	router.GET("/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET("/distributions", wrapper.GetDistributions)
	router.GET("/openapi.json", wrapper.GetOpenapiJson)
	router.GET("/packages", wrapper.GetPackages)
	router.GET("/ready", wrapper.GetReadiness)
	router.GET("/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//yWn/OYJNgAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
