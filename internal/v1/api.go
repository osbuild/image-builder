// Package v1 provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`
}

// Architectures defines model for Architectures.
type Architectures []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {

	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   Distributions   `json:"distribution"`
	ImageName      *string         `json:"image_name,omitempty"`

	// Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id string `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus `json:"image_status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string      `json:"created_at"`
	Id        string      `json:"id"`
	ImageName *string     `json:"image_name,omitempty"`
	Request   interface{} `json:"request"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Filesystem   *[]Filesystem `json:"filesystem,omitempty"`
	Packages     *[]string     `json:"packages,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions string

// List of Distributions
const (
	Distributions_centos_8 Distributions = "centos-8"
	Distributions_centos_9 Distributions = "centos-9"
	Distributions_rhel_84  Distributions = "rhel-84"
	Distributions_rhel_85  Distributions = "rhel-85"
	Distributions_rhel_86  Distributions = "rhel-86"
	Distributions_rhel_90  Distributions = "rhel-90"
)

// DistributionsResponse defines model for DistributionsResponse.
type DistributionsResponse []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    int    `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {

	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture  string        `json:"architecture"`
	ImageType     ImageTypes    `json:"image_type"`
	Ostree        *OSTree       `json:"ostree,omitempty"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       string              `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// List of ImageTypes
const (
	ImageTypes_ami                 ImageTypes = "ami"
	ImageTypes_aws                 ImageTypes = "aws"
	ImageTypes_azure               ImageTypes = "azure"
	ImageTypes_edge_commit         ImageTypes = "edge-commit"
	ImageTypes_edge_container      ImageTypes = "edge-container"
	ImageTypes_edge_installer      ImageTypes = "edge-installer"
	ImageTypes_gcp                 ImageTypes = "gcp"
	ImageTypes_guest_image         ImageTypes = "guest-image"
	ImageTypes_image_installer     ImageTypes = "image-installer"
	ImageTypes_rhel_edge_commit    ImageTypes = "rhel-edge-commit"
	ImageTypes_rhel_edge_installer ImageTypes = "rhel-edge-installer"
	ImageTypes_vhd                 ImageTypes = "vhd"
	ImageTypes_vsphere             ImageTypes = "vsphere"
)

// OSTree defines model for OSTree.
type OSTree struct {
	Ref *string `json:"ref,omitempty"`
	Url *string `json:"url,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`
	ServerUrl     string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{} `json:"options"`
	Status  string      `json:"status"`
	Type    UploadTypes `json:"type"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// List of UploadTypes
const (
	UploadTypes_aws    UploadTypes = "aws"
	UploadTypes_aws_s3 UploadTypes = "aws.s3"
	UploadTypes_azure  UploadTypes = "azure"
	UploadTypes_gcp    UploadTypes = "gcp"
)

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {

	// max amount of composes, default 100
	Limit *int `json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {

	// distribution to look up packages for
	Distribution Distributions `json:"distribution"`

	// architecture to look up packages for
	Architecture string `json:"architecture"`

	// packages to look for
	Search string `json:"search"`

	// max amount of packages, default 100
	Limit *int `json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// ComposeImageRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody ComposeImageJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId string) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId string) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameter("simple", false, "distribution", ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameter("simple", false, "composeId", ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameter("simple", false, "composeId", ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/architectures/:distribution", wrapper.GetArchitectures)
	router.POST("/compose", wrapper.ComposeImage)
	router.GET("/composes", wrapper.GetComposes)
	router.GET("/composes/:composeId", wrapper.GetComposeStatus)
	router.GET("/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET("/distributions", wrapper.GetDistributions)
	router.GET("/openapi.json", wrapper.GetOpenapiJson)
	router.GET("/packages", wrapper.GetPackages)
	router.GET("/ready", wrapper.GetReadiness)
	router.GET("/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"NYhu0+0Zn8TBbrn7dwAAAP//1QD2D7M2AAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
