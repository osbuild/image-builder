// Package v1 provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`
}

// Architectures defines model for Architectures.
type Architectures []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {

	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   Distributions   `json:"distribution"`
	ImageName      *string         `json:"image_name,omitempty"`
	ImageRequests  []ImageRequest  `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id string `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus `json:"image_status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string      `json:"created_at"`
	Id        string      `json:"id"`
	ImageName *string     `json:"image_name,omitempty"`
	Request   interface{} `json:"request"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Filesystem   *[]Filesystem `json:"filesystem,omitempty"`
	Packages     *[]string     `json:"packages,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions string

// List of Distributions
const (
	Distributions_centos_8 Distributions = "centos-8"
	Distributions_centos_9 Distributions = "centos-9"
	Distributions_rhel_84  Distributions = "rhel-84"
	Distributions_rhel_85  Distributions = "rhel-85"
	Distributions_rhel_86  Distributions = "rhel-86"
	Distributions_rhel_90  Distributions = "rhel-90"
)

// DistributionsResponse defines model for DistributionsResponse.
type DistributionsResponse []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    int    `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {

	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture  string        `json:"architecture"`
	ImageType     ImageTypes    `json:"image_type"`
	Ostree        *OSTree       `json:"ostree,omitempty"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       string              `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// List of ImageTypes
const (
	ImageTypes_ami                 ImageTypes = "ami"
	ImageTypes_aws                 ImageTypes = "aws"
	ImageTypes_azure               ImageTypes = "azure"
	ImageTypes_edge_commit         ImageTypes = "edge-commit"
	ImageTypes_edge_container      ImageTypes = "edge-container"
	ImageTypes_edge_installer      ImageTypes = "edge-installer"
	ImageTypes_gcp                 ImageTypes = "gcp"
	ImageTypes_guest_image         ImageTypes = "guest-image"
	ImageTypes_image_installer     ImageTypes = "image-installer"
	ImageTypes_rhel_edge_commit    ImageTypes = "rhel-edge-commit"
	ImageTypes_rhel_edge_installer ImageTypes = "rhel-edge-installer"
	ImageTypes_vhd                 ImageTypes = "vhd"
	ImageTypes_vsphere             ImageTypes = "vsphere"
)

// OSTree defines model for OSTree.
type OSTree struct {
	Ref *string `json:"ref,omitempty"`
	Url *string `json:"url,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`
	ServerUrl     string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{} `json:"options"`
	Status  string      `json:"status"`
	Type    UploadTypes `json:"type"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// List of UploadTypes
const (
	UploadTypes_aws    UploadTypes = "aws"
	UploadTypes_aws_s3 UploadTypes = "aws.s3"
	UploadTypes_azure  UploadTypes = "azure"
	UploadTypes_gcp    UploadTypes = "gcp"
)

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {

	// max amount of composes, default 100
	Limit *int `json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {

	// distribution to look up packages for
	Distribution Distributions `json:"distribution"`

	// architecture to look up packages for
	Architecture string `json:"architecture"`

	// packages to look for
	Search string `json:"search"`

	// max amount of packages, default 100
	Limit *int `json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// ComposeImageRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody ComposeImageJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId string) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId string) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameter("simple", false, "distribution", ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameter("simple", false, "composeId", ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameter("simple", false, "composeId", ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/architectures/:distribution", wrapper.GetArchitectures)
	router.POST("/compose", wrapper.ComposeImage)
	router.GET("/composes", wrapper.GetComposes)
	router.GET("/composes/:composeId", wrapper.GetComposeStatus)
	router.GET("/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET("/distributions", wrapper.GetDistributions)
	router.GET("/openapi.json", wrapper.GetOpenapiJson)
	router.GET("/packages", wrapper.GetPackages)
	router.GET("/ready", wrapper.GetReadiness)
	router.GET("/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ONgtd/8OAAD//48RvlEdNgAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
