// Package v1 provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`
}

// Architectures defines model for Architectures.
type Architectures []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {

	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   Distributions   `json:"distribution"`
	ImageName      *string         `json:"image_name,omitempty"`
	ImageRequests  []ImageRequest  `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id string `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus `json:"image_status"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string      `json:"created_at"`
	Id        string      `json:"id"`
	ImageName *string     `json:"image_name,omitempty"`
	Request   interface{} `json:"request"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Filesystem   *[]Filesystem `json:"filesystem,omitempty"`
	Packages     *[]string     `json:"packages,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions string

// List of Distributions
const (
	Distributions_centos_8 Distributions = "centos-8"
	Distributions_centos_9 Distributions = "centos-9"
	Distributions_rhel_84  Distributions = "rhel-84"
	Distributions_rhel_85  Distributions = "rhel-85"
)

// DistributionsResponse defines model for DistributionsResponse.
type DistributionsResponse []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    int    `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {

	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture  string        `json:"architecture"`
	ImageType     ImageTypes    `json:"image_type"`
	Ostree        *OSTree       `json:"ostree,omitempty"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Status       string        `json:"status"`
	UploadStatus *UploadStatus `json:"upload_status,omitempty"`
}

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// List of ImageTypes
const (
	ImageTypes_ami                 ImageTypes = "ami"
	ImageTypes_aws                 ImageTypes = "aws"
	ImageTypes_azure               ImageTypes = "azure"
	ImageTypes_edge_commit         ImageTypes = "edge-commit"
	ImageTypes_edge_container      ImageTypes = "edge-container"
	ImageTypes_edge_installer      ImageTypes = "edge-installer"
	ImageTypes_gcp                 ImageTypes = "gcp"
	ImageTypes_guest_image         ImageTypes = "guest-image"
	ImageTypes_image_installer     ImageTypes = "image-installer"
	ImageTypes_rhel_edge_commit    ImageTypes = "rhel-edge-commit"
	ImageTypes_rhel_edge_installer ImageTypes = "rhel-edge-installer"
	ImageTypes_vhd                 ImageTypes = "vhd"
	ImageTypes_vsphere             ImageTypes = "vsphere"
)

// OSTree defines model for OSTree.
type OSTree struct {
	Ref *string `json:"ref,omitempty"`
	Url *string `json:"url,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`
	ServerUrl     string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{} `json:"options"`
	Status  string      `json:"status"`
	Type    UploadTypes `json:"type"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// List of UploadTypes
const (
	UploadTypes_aws    UploadTypes = "aws"
	UploadTypes_aws_s3 UploadTypes = "aws.s3"
	UploadTypes_azure  UploadTypes = "azure"
	UploadTypes_gcp    UploadTypes = "gcp"
)

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {

	// max amount of composes, default 100
	Limit *int `json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {

	// distribution to look up packages for
	Distribution Distributions `json:"distribution"`

	// architecture to look up packages for
	Architecture string `json:"architecture"`

	// packages to look for
	Search string `json:"search"`

	// max amount of packages, default 100
	Limit *int `json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// ComposeImageRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody ComposeImageJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId string) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId string) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameter("simple", false, "distribution", ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameter("simple", false, "composeId", ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameter("simple", false, "composeId", ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/architectures/:distribution", wrapper.GetArchitectures)
	router.POST("/compose", wrapper.ComposeImage)
	router.GET("/composes", wrapper.GetComposes)
	router.GET("/composes/:composeId", wrapper.GetComposeStatus)
	router.GET("/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET("/distributions", wrapper.GetDistributions)
	router.GET("/openapi.json", wrapper.GetOpenapiJson)
	router.GET("/packages", wrapper.GetPackages)
	router.GET("/ready", wrapper.GetReadiness)
	router.GET("/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
