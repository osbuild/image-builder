// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for Distributions.
const (
	Centos8      Distributions = "centos-8"
	Centos9      Distributions = "centos-9"
	Fedora37     Distributions = "fedora-37"
	Fedora38     Distributions = "fedora-38"
	Fedora39     Distributions = "fedora-39"
	Fedora40     Distributions = "fedora-40"
	Rhel8        Distributions = "rhel-8"
	Rhel84       Distributions = "rhel-84"
	Rhel85       Distributions = "rhel-85"
	Rhel86       Distributions = "rhel-86"
	Rhel87       Distributions = "rhel-87"
	Rhel88       Distributions = "rhel-88"
	Rhel8Nightly Distributions = "rhel-8-nightly"
	Rhel9        Distributions = "rhel-9"
	Rhel90       Distributions = "rhel-90"
	Rhel91       Distributions = "rhel-91"
	Rhel92       Distributions = "rhel-92"
	Rhel9Nightly Distributions = "rhel-9-nightly"
)

// Defines values for ImageRequestArchitecture.
const (
	Aarch64 ImageRequestArchitecture = "aarch64"
	X8664   ImageRequestArchitecture = "x86_64"
)

// Defines values for ImageStatusStatus.
const (
	ImageStatusStatusBuilding    ImageStatusStatus = "building"
	ImageStatusStatusFailure     ImageStatusStatus = "failure"
	ImageStatusStatusPending     ImageStatusStatus = "pending"
	ImageStatusStatusRegistering ImageStatusStatus = "registering"
	ImageStatusStatusSuccess     ImageStatusStatus = "success"
	ImageStatusStatusUploading   ImageStatusStatus = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAmi               ImageTypes = "ami"
	ImageTypesAws               ImageTypes = "aws"
	ImageTypesAzure             ImageTypes = "azure"
	ImageTypesEdgeCommit        ImageTypes = "edge-commit"
	ImageTypesEdgeInstaller     ImageTypes = "edge-installer"
	ImageTypesGcp               ImageTypes = "gcp"
	ImageTypesGuestImage        ImageTypes = "guest-image"
	ImageTypesImageInstaller    ImageTypes = "image-installer"
	ImageTypesRhelEdgeCommit    ImageTypes = "rhel-edge-commit"
	ImageTypesRhelEdgeInstaller ImageTypes = "rhel-edge-installer"
	ImageTypesVhd               ImageTypes = "vhd"
	ImageTypesVsphere           ImageTypes = "vsphere"
	ImageTypesVsphereOva        ImageTypes = "vsphere-ova"
	ImageTypesWsl               ImageTypes = "wsl"
)

// Defines values for UploadStatusStatus.
const (
	UploadStatusStatusFailure UploadStatusStatus = "failure"
	UploadStatusStatusPending UploadStatusStatus = "pending"
	UploadStatusStatusRunning UploadStatusStatus = "running"
	UploadStatusStatusSuccess UploadStatusStatus = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws   UploadTypes = "aws"
	UploadTypesAwsS3 UploadTypes = "aws.s3"
	UploadTypesAzure UploadTypes = "azure"
	UploadTypesGcp   UploadTypes = "gcp"
)

// AWSEC2Clone defines model for AWSEC2Clone.
type AWSEC2Clone struct {
	// A region as described in
	// https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-regions
	Region string `json:"region"`

	// An array of AWS account IDs as described in
	// https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions = map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`

	// Base repositories for the given distribution and architecture.
	Repositories []Repository `json:"repositories"`
}

// Architectures defines model for Architectures.
type Architectures = []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {
	// Name of the created image.
	// Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens.
	// The total length is limited to 60 characters.
	ImageName *string `json:"image_name,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of the source that will be used to resolve the tenant and subscription IDs.
	// Do not provide a tenant_id or subscription_id when providing a source_id.
	SourceId *string `json:"source_id,omitempty"`

	// ID of subscription where the image should be uploaded.
	// When providing a subscription_id, also be sure to provide a tenant_id and do not include a source_id.
	SubscriptionId *string `json:"subscription_id,omitempty"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	// When providing a tenant_id, also be sure to provide a subscription_id and do not include a source_id.
	TenantId *string `json:"tenant_id,omitempty"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneRequest defines model for CloneRequest.
type CloneRequest interface{}

// CloneResponse defines model for CloneResponse.
type CloneResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ClonesResponse defines model for ClonesResponse.
type ClonesResponse struct {
	Data  []ClonesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ClonesResponseItem defines model for ClonesResponseItem.
type ClonesResponseItem struct {
	// UUID of the parent compose of the clone
	ComposeId openapi_types.UUID `json:"compose_id"`
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Request   CloneRequest       `json:"request"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`

	// List of all distributions that image builder supports. A user might not have access to
	// restricted distributions.
	//
	// Restricted distributions include the RHEL nightlies and the Fedora distributions.
	Distribution     Distributions `json:"distribution"`
	ImageDescription *string       `json:"image_description,omitempty"`
	ImageName        *string       `json:"image_name,omitempty"`

	// Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus    `json:"image_status"`
	Request     ComposeRequest `json:"request"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	ImageName *string            `json:"image_name,omitempty"`
	Request   ComposeRequest     `json:"request"`
}

// Repository configuration for custom repositories.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above. Id is required.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg *bool     `json:"check_repo_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`

	// GPG key used to sign packages in this repository. Can be a gpg key or a URL
	Gpgkey     *[]string `json:"gpgkey,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`
	Name       *string   `json:"name,omitempty"`
	Priority   *int      `json:"priority,omitempty"`
	SslVerify  *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	CustomRepositories  *[]CustomRepository `json:"custom_repositories,omitempty"`
	Filesystem          *[]Filesystem       `json:"filesystem,omitempty"`
	Openscap            *OpenSCAP           `json:"openscap,omitempty"`
	Packages            *[]string           `json:"packages,omitempty"`
	PayloadRepositories *[]Repository       `json:"payload_repositories,omitempty"`
	Subscription        *Subscription       `json:"subscription,omitempty"`

	// list of users that a customer can add, also specifying their respective groups and SSH keys
	Users *[]User `json:"users,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// List of all distributions that image builder supports. A user might not have access to
// restricted distributions.
//
// Restricted distributions include the RHEL nightlies and the Fedora distributions.
type Distributions string

// List of distributions this user is allowed to build.
type DistributionsResponse = []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {
	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	// CPU architecture of the image, x86_64 and aarch64 are currently supported.
	Architecture ImageRequestArchitecture `json:"architecture"`
	ImageType    ImageTypes               `json:"image_type"`
	Ostree       *OSTree                  `json:"ostree,omitempty"`

	// Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size          *uint64       `json:"size,omitempty"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// CPU architecture of the image, x86_64 and aarch64 are currently supported.
type ImageRequestArchitecture string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusStatus   `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusStatus defines model for ImageStatus.Status.
type ImageStatusStatus string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	ProfileId string `json:"profile_id"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool   `json:"check_repo_gpg,omitempty"`
	Gpgkey       *string `json:"gpgkey,omitempty"`
	IgnoreSsl    *bool   `json:"ignore_ssl,omitempty"`
	Metalink     *string `json:"metalink,omitempty"`
	Mirrorlist   *string `json:"mirrorlist,omitempty"`
	Rhsm         bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}        `json:"options"`
	Status  UploadStatusStatus `json:"status"`
	Type    UploadTypes        `json:"type"`
}

// UploadStatusStatus defines model for UploadStatus.Status.
type UploadStatusStatus string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Name   string `json:"name"`
	SshKey string `json:"ssh_key"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody = ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {
	// Max amount of composes.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Composes page offset.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Filter the composes on image type. The filter is optional and can be specified multiple times.
	IgnoreImageTypes *[]ImageTypes `form:"ignoreImageTypes,omitempty" json:"ignoreImageTypes,omitempty"`
}

// CloneComposeJSONBody defines parameters for CloneCompose.
type CloneComposeJSONBody = CloneRequest

// GetComposeClonesParams defines parameters for GetComposeClones.
type GetComposeClonesParams struct {
	// max amount of clones, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// clones page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	// distribution to look up packages for
	Distribution Distributions `form:"distribution" json:"distribution"`

	// architecture to look up packages for
	Architecture GetPackagesParamsArchitecture `form:"architecture" json:"architecture"`

	// packages to look for
	Search string `form:"search" json:"search"`

	// max amount of packages, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParamsArchitecture defines parameters for GetPackages.
type GetPackagesParamsArchitecture string

// ComposeImageJSONRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody = ComposeImageJSONBody

// CloneComposeJSONRequestBody defines body for CloneCompose for application/json ContentType.
type CloneComposeJSONRequestBody = CloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get architectures for distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution Distributions) error
	// get clone status
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id openapi_types.UUID) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get composes
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// delete compose
	// (DELETE /composes/{composeId})
	DeleteCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get compose status
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId openapi_types.UUID) error
	// clone compose
	// (POST /composes/{composeId}/clone)
	CloneCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get compose clones
	// (GET /composes/{composeId}/clones)
	GetComposeClones(ctx echo.Context, composeId openapi_types.UUID, params GetComposeClonesParams) error
	// get compose metadata
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId openapi_types.UUID) error
	// get distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get spec
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error
	// get packages
	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution Distributions

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "ignoreImageTypes" -------------

	err = runtime.BindQueryParameter("form", true, false, "ignoreImageTypes", ctx.QueryParams(), &params.IgnoreImageTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ignoreImageTypes: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// DeleteCompose converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompose(ctx, composeId)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// CloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) CloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CloneCompose(ctx, composeId)
	return err
}

// GetComposeClones converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeClones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposeClonesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeClones(ctx, composeId, params)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/architectures/:distribution", wrapper.GetArchitectures)
	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.ComposeImage)
	router.GET(baseURL+"/composes", wrapper.GetComposes)
	router.DELETE(baseURL+"/composes/:composeId", wrapper.DeleteCompose)
	router.GET(baseURL+"/composes/:composeId", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:composeId/clone", wrapper.CloneCompose)
	router.GET(baseURL+"/composes/:composeId/clones", wrapper.GetComposeClones)
	router.GET(baseURL+"/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/distributions", wrapper.GetDistributions)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)
	router.GET(baseURL+"/packages", wrapper.GetPackages)
	router.GET(baseURL+"/ready", wrapper.GetReadiness)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
