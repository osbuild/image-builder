// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for Distributions.
const (
	Centos8  Distributions = "centos-8"
	Centos9  Distributions = "centos-9"
	Fedora35 Distributions = "fedora-35"
	Fedora36 Distributions = "fedora-36"
	Fedora37 Distributions = "fedora-37"
	Fedora38 Distributions = "fedora-38"
	Rhel8    Distributions = "rhel-8"
	Rhel84   Distributions = "rhel-84"
	Rhel85   Distributions = "rhel-85"
	Rhel86   Distributions = "rhel-86"
	Rhel87   Distributions = "rhel-87"
	Rhel9    Distributions = "rhel-9"
	Rhel90   Distributions = "rhel-90"
	Rhel91   Distributions = "rhel-91"
)

// Defines values for ImageRequestArchitecture.
const (
	Aarch64 ImageRequestArchitecture = "aarch64"
	X8664   ImageRequestArchitecture = "x86_64"
)

// Defines values for ImageStatusStatus.
const (
	ImageStatusStatusBuilding    ImageStatusStatus = "building"
	ImageStatusStatusFailure     ImageStatusStatus = "failure"
	ImageStatusStatusPending     ImageStatusStatus = "pending"
	ImageStatusStatusRegistering ImageStatusStatus = "registering"
	ImageStatusStatusSuccess     ImageStatusStatus = "success"
	ImageStatusStatusUploading   ImageStatusStatus = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAmi               ImageTypes = "ami"
	ImageTypesAws               ImageTypes = "aws"
	ImageTypesAzure             ImageTypes = "azure"
	ImageTypesEdgeCommit        ImageTypes = "edge-commit"
	ImageTypesEdgeInstaller     ImageTypes = "edge-installer"
	ImageTypesGcp               ImageTypes = "gcp"
	ImageTypesGuestImage        ImageTypes = "guest-image"
	ImageTypesImageInstaller    ImageTypes = "image-installer"
	ImageTypesRhelEdgeCommit    ImageTypes = "rhel-edge-commit"
	ImageTypesRhelEdgeInstaller ImageTypes = "rhel-edge-installer"
	ImageTypesVhd               ImageTypes = "vhd"
	ImageTypesVsphere           ImageTypes = "vsphere"
)

// Defines values for UploadStatusStatus.
const (
	UploadStatusStatusFailure UploadStatusStatus = "failure"
	UploadStatusStatusPending UploadStatusStatus = "pending"
	UploadStatusStatusRunning UploadStatusStatus = "running"
	UploadStatusStatusSuccess UploadStatusStatus = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws   UploadTypes = "aws"
	UploadTypesAwsS3 UploadTypes = "aws.s3"
	UploadTypesAzure UploadTypes = "azure"
	UploadTypesGcp   UploadTypes = "gcp"
)

// AWSEC2Clone defines model for AWSEC2Clone.
type AWSEC2Clone struct {
	// A region as described in
	// https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-regions
	Region string `json:"region"`

	// An array of AWS account IDs as described in
	// https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions = map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`

	// Base repositories for the given distribution and architecture.
	Repositories []Repository `json:"repositories"`
}

// Architectures defines model for Architectures.
type Architectures = []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {
	// Name of the created image.
	// Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens.
	// The total length is limited to 60 characters.
	ImageName *string `json:"image_name,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of the source that will be used to resolve the tenant and subscription IDs.
	// Do not provide a tenant_id or subscription_id when providing a source_id.
	SourceId *string `json:"source_id,omitempty"`

	// ID of subscription where the image should be uploaded.
	// When providing a subscription_id, also be sure to provide a tenant_id and do not include a source_id.
	SubscriptionId *string `json:"subscription_id,omitempty"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	// When providing a tenant_id, also be sure to provide a subscription_id and do not include a source_id.
	TenantId *string `json:"tenant_id,omitempty"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneRequest defines model for CloneRequest.
type CloneRequest interface{}

// CloneResponse defines model for CloneResponse.
type CloneResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ClonesResponse defines model for ClonesResponse.
type ClonesResponse struct {
	Data  []ClonesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ClonesResponseItem defines model for ClonesResponseItem.
type ClonesResponseItem struct {
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Request   interface{}        `json:"request"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   Distributions   `json:"distribution"`
	ImageName      *string         `json:"image_name,omitempty"`

	// Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus `json:"image_status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	ImageName *string            `json:"image_name,omitempty"`
	Request   interface{}        `json:"request"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Filesystem          *[]Filesystem `json:"filesystem,omitempty"`
	Packages            *[]string     `json:"packages,omitempty"`
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Subscription        *Subscription `json:"subscription,omitempty"`

	// list of users that a customer can add, also specifying their respective groups and SSH keys
	Users *[]User `json:"users,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions string

// DistributionsResponse defines model for DistributionsResponse.
type DistributionsResponse = []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {
	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	// CPU architecture of the image, x86_64 and aarch64 are currently supported.
	Architecture  ImageRequestArchitecture `json:"architecture"`
	ImageType     ImageTypes               `json:"image_type"`
	Ostree        *OSTree                  `json:"ostree,omitempty"`
	UploadRequest UploadRequest            `json:"upload_request"`
}

// CPU architecture of the image, x86_64 and aarch64 are currently supported.
type ImageRequestArchitecture string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusStatus   `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusStatus defines model for ImageStatus.Status.
type ImageStatusStatus string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool   `json:"check_repo_gpg,omitempty"`
	Gpgkey       *string `json:"gpgkey,omitempty"`
	IgnoreSsl    *bool   `json:"ignore_ssl,omitempty"`
	Metalink     *string `json:"metalink,omitempty"`
	Mirrorlist   *string `json:"mirrorlist,omitempty"`
	Rhsm         bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}        `json:"options"`
	Status  UploadStatusStatus `json:"status"`
	Type    UploadTypes        `json:"type"`
}

// UploadStatusStatus defines model for UploadStatus.Status.
type UploadStatusStatus string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Name   string `json:"name"`
	SshKey string `json:"ssh_key"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody = ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {
	// max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// CloneComposeJSONBody defines parameters for CloneCompose.
type CloneComposeJSONBody = CloneRequest

// GetComposeClonesParams defines parameters for GetComposeClones.
type GetComposeClonesParams struct {
	// max amount of clones, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// clones page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	// distribution to look up packages for
	Distribution Distributions `form:"distribution" json:"distribution"`

	// architecture to look up packages for
	Architecture GetPackagesParamsArchitecture `form:"architecture" json:"architecture"`

	// packages to look for
	Search string `form:"search" json:"search"`

	// max amount of packages, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParamsArchitecture defines parameters for GetPackages.
type GetPackagesParamsArchitecture string

// ComposeImageJSONRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody = ComposeImageJSONBody

// CloneComposeJSONRequestBody defines body for CloneCompose for application/json ContentType.
type CloneComposeJSONRequestBody = CloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// get status of a compose clone
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id openapi_types.UUID) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId openapi_types.UUID) error
	// clone a compose
	// (POST /composes/{composeId}/clone)
	CloneCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get clones of a compose
	// (GET /composes/{composeId}/clones)
	GetComposeClones(ctx echo.Context, composeId openapi_types.UUID, params GetComposeClonesParams) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId openapi_types.UUID) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// CloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) CloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CloneCompose(ctx, composeId)
	return err
}

// GetComposeClones converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeClones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposeClonesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeClones(ctx, composeId, params)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/architectures/:distribution", wrapper.GetArchitectures)
	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.ComposeImage)
	router.GET(baseURL+"/composes", wrapper.GetComposes)
	router.GET(baseURL+"/composes/:composeId", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:composeId/clone", wrapper.CloneCompose)
	router.GET(baseURL+"/composes/:composeId/clones", wrapper.GetComposeClones)
	router.GET(baseURL+"/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/distributions", wrapper.GetDistributions)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)
	router.GET(baseURL+"/packages", wrapper.GetPackages)
	router.GET(baseURL+"/ready", wrapper.GetReadiness)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
