// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for ClientId.
const (
	Api ClientId = "api"
	Ui  ClientId = "ui"
)

// Defines values for CloneStatusResponseStatus.
const (
	CloneStatusResponseStatusFailure CloneStatusResponseStatus = "failure"
	CloneStatusResponseStatusPending CloneStatusResponseStatus = "pending"
	CloneStatusResponseStatusRunning CloneStatusResponseStatus = "running"
	CloneStatusResponseStatusSuccess CloneStatusResponseStatus = "success"
)

// Defines values for CustomizationsPartitioningMode.
const (
	AutoLvm CustomizationsPartitioningMode = "auto-lvm"
	Lvm     CustomizationsPartitioningMode = "lvm"
	Raw     CustomizationsPartitioningMode = "raw"
)

// Defines values for DistributionProfileItem.
const (
	XccdfOrgSsgprojectContentProfileAnssiBp28Enhanced     DistributionProfileItem = "xccdf_org.ssgproject.content_profile_anssi_bp28_enhanced"
	XccdfOrgSsgprojectContentProfileAnssiBp28High         DistributionProfileItem = "xccdf_org.ssgproject.content_profile_anssi_bp28_high"
	XccdfOrgSsgprojectContentProfileAnssiBp28Intermediary DistributionProfileItem = "xccdf_org.ssgproject.content_profile_anssi_bp28_intermediary"
	XccdfOrgSsgprojectContentProfileAnssiBp28Minimal      DistributionProfileItem = "xccdf_org.ssgproject.content_profile_anssi_bp28_minimal"
	XccdfOrgSsgprojectContentProfileCis                   DistributionProfileItem = "xccdf_org.ssgproject.content_profile_cis"
	XccdfOrgSsgprojectContentProfileCisServerL1           DistributionProfileItem = "xccdf_org.ssgproject.content_profile_cis_server_l1"
	XccdfOrgSsgprojectContentProfileCisWorkstationL1      DistributionProfileItem = "xccdf_org.ssgproject.content_profile_cis_workstation_l1"
	XccdfOrgSsgprojectContentProfileCisWorkstationL2      DistributionProfileItem = "xccdf_org.ssgproject.content_profile_cis_workstation_l2"
	XccdfOrgSsgprojectContentProfileCui                   DistributionProfileItem = "xccdf_org.ssgproject.content_profile_cui"
	XccdfOrgSsgprojectContentProfileE8                    DistributionProfileItem = "xccdf_org.ssgproject.content_profile_e8"
	XccdfOrgSsgprojectContentProfileHipaa                 DistributionProfileItem = "xccdf_org.ssgproject.content_profile_hipaa"
	XccdfOrgSsgprojectContentProfileIsmO                  DistributionProfileItem = "xccdf_org.ssgproject.content_profile_ism_o"
	XccdfOrgSsgprojectContentProfileOspp                  DistributionProfileItem = "xccdf_org.ssgproject.content_profile_ospp"
	XccdfOrgSsgprojectContentProfilePciDss                DistributionProfileItem = "xccdf_org.ssgproject.content_profile_pci-dss"
	XccdfOrgSsgprojectContentProfileStandard              DistributionProfileItem = "xccdf_org.ssgproject.content_profile_standard"
	XccdfOrgSsgprojectContentProfileStig                  DistributionProfileItem = "xccdf_org.ssgproject.content_profile_stig"
	XccdfOrgSsgprojectContentProfileStigGui               DistributionProfileItem = "xccdf_org.ssgproject.content_profile_stig_gui"
)

// Defines values for Distributions.
const (
	Centos8      Distributions = "centos-8"
	Centos9      Distributions = "centos-9"
	Fedora37     Distributions = "fedora-37"
	Fedora38     Distributions = "fedora-38"
	Fedora39     Distributions = "fedora-39"
	Fedora40     Distributions = "fedora-40"
	Rhel8        Distributions = "rhel-8"
	Rhel84       Distributions = "rhel-84"
	Rhel85       Distributions = "rhel-85"
	Rhel86       Distributions = "rhel-86"
	Rhel87       Distributions = "rhel-87"
	Rhel88       Distributions = "rhel-88"
	Rhel89       Distributions = "rhel-89"
	Rhel8Nightly Distributions = "rhel-8-nightly"
	Rhel9        Distributions = "rhel-9"
	Rhel90       Distributions = "rhel-90"
	Rhel91       Distributions = "rhel-91"
	Rhel92       Distributions = "rhel-92"
	Rhel93       Distributions = "rhel-93"
	Rhel9Nightly Distributions = "rhel-9-nightly"
)

// Defines values for ImageRequestArchitecture.
const (
	ImageRequestArchitectureAarch64 ImageRequestArchitecture = "aarch64"
	ImageRequestArchitectureX8664   ImageRequestArchitecture = "x86_64"
)

// Defines values for ImageStatusStatus.
const (
	ImageStatusStatusBuilding    ImageStatusStatus = "building"
	ImageStatusStatusFailure     ImageStatusStatus = "failure"
	ImageStatusStatusPending     ImageStatusStatus = "pending"
	ImageStatusStatusRegistering ImageStatusStatus = "registering"
	ImageStatusStatusSuccess     ImageStatusStatus = "success"
	ImageStatusStatusUploading   ImageStatusStatus = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAmi               ImageTypes = "ami"
	ImageTypesAws               ImageTypes = "aws"
	ImageTypesAzure             ImageTypes = "azure"
	ImageTypesEdgeCommit        ImageTypes = "edge-commit"
	ImageTypesEdgeInstaller     ImageTypes = "edge-installer"
	ImageTypesGcp               ImageTypes = "gcp"
	ImageTypesGuestImage        ImageTypes = "guest-image"
	ImageTypesImageInstaller    ImageTypes = "image-installer"
	ImageTypesOci               ImageTypes = "oci"
	ImageTypesRhelEdgeCommit    ImageTypes = "rhel-edge-commit"
	ImageTypesRhelEdgeInstaller ImageTypes = "rhel-edge-installer"
	ImageTypesVhd               ImageTypes = "vhd"
	ImageTypesVsphere           ImageTypes = "vsphere"
	ImageTypesVsphereOva        ImageTypes = "vsphere-ova"
	ImageTypesWsl               ImageTypes = "wsl"
)

// Defines values for UploadStatusStatus.
const (
	Failure UploadStatusStatus = "failure"
	Pending UploadStatusStatus = "pending"
	Running UploadStatusStatus = "running"
	Success UploadStatusStatus = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws              UploadTypes = "aws"
	UploadTypesAwsS3            UploadTypes = "aws.s3"
	UploadTypesAzure            UploadTypes = "azure"
	UploadTypesGcp              UploadTypes = "gcp"
	UploadTypesOciObjectstorage UploadTypes = "oci.objectstorage"
)

// Defines values for GetPackagesParamsArchitecture.
const (
	GetPackagesParamsArchitectureAarch64 GetPackagesParamsArchitecture = "aarch64"
	GetPackagesParamsArchitectureX8664   GetPackagesParamsArchitecture = "x86_64"
)

// AWSEC2Clone defines model for AWSEC2Clone.
type AWSEC2Clone struct {
	// Region A region as described in
	// https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-regions
	Region string `json:"region"`

	// ShareWithAccounts An array of AWS account IDs as described in
	// https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions = map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`

	// Repositories Base repositories for the given distribution and architecture.
	Repositories []Repository `json:"repositories"`
}

// Architectures defines model for Architectures.
type Architectures = []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {
	// ImageName Name of the created image.
	// Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens.
	// The total length is limited to 60 characters.
	ImageName *string `json:"image_name,omitempty"`

	// ResourceGroup Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// SourceId ID of the source that will be used to resolve the tenant and subscription IDs.
	// Do not provide a tenant_id or subscription_id when providing a source_id.
	SourceId *string `json:"source_id,omitempty"`

	// SubscriptionId ID of subscription where the image should be uploaded.
	// When providing a subscription_id, also be sure to provide a tenant_id and do not include a source_id.
	SubscriptionId *string `json:"subscription_id,omitempty"`

	// TenantId ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	// When providing a tenant_id, also be sure to provide a subscription_id and do not include a source_id.
	TenantId *string `json:"tenant_id,omitempty"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// ClientId defines model for ClientId.
type ClientId string

// CloneRequest defines model for CloneRequest.
type CloneRequest struct {
	union json.RawMessage
}

// CloneResponse defines model for CloneResponse.
type CloneResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// CloneStatusResponse defines model for CloneStatusResponse.
type CloneStatusResponse struct {
	ComposeId *openapi_types.UUID         `json:"compose_id,omitempty"`
	Options   CloneStatusResponse_Options `json:"options"`
	Status    CloneStatusResponseStatus   `json:"status"`
	Type      UploadTypes                 `json:"type"`
}

// CloneStatusResponse_Options defines model for CloneStatusResponse.Options.
type CloneStatusResponse_Options struct {
	union json.RawMessage
}

// CloneStatusResponseStatus defines model for CloneStatusResponse.Status.
type CloneStatusResponseStatus string

// ClonesResponse defines model for ClonesResponse.
type ClonesResponse struct {
	Data  []ClonesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ClonesResponseItem defines model for ClonesResponseItem.
type ClonesResponseItem struct {
	// ComposeId UUID of the parent compose of the clone
	ComposeId openapi_types.UUID `json:"compose_id"`
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Request   CloneRequest       `json:"request"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// OstreeCommit ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Packages Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	ClientId       *ClientId       `json:"client_id,omitempty"`
	Customizations *Customizations `json:"customizations,omitempty"`

	// Distribution List of all distributions that image builder supports. A user might not have access to
	// restricted distributions.
	//
	// Restricted distributions include the RHEL nightlies and the Fedora distributions.
	Distribution     Distributions `json:"distribution"`
	ImageDescription *string       `json:"image_description,omitempty"`
	ImageName        *string       `json:"image_name,omitempty"`

	// ImageRequests Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus    `json:"image_status"`
	Request     ComposeRequest `json:"request"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	ClientId  *ClientId          `json:"client_id,omitempty"`
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	ImageName *string            `json:"image_name,omitempty"`
	Request   ComposeRequest     `json:"request"`
}

// CreateBlueprintRequest defines model for CreateBlueprintRequest.
type CreateBlueprintRequest struct {
	Customizations Customizations `json:"customizations"`
	Description    string         `json:"description"`

	// Distribution List of all distributions that image builder supports. A user might not have access to
	// restricted distributions.
	//
	// Restricted distributions include the RHEL nightlies and the Fedora distributions.
	Distribution Distributions `json:"distribution"`

	// ImageRequests Array of image requests. Having more image requests in a single blueprint is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
	Name          string         `json:"name"`
}

// CreateBlueprintResponse defines model for CreateBlueprintResponse.
type CreateBlueprintResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// CustomRepository Repository configuration for custom repositories.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above. Id is required.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg *bool     `json:"check_repo_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`

	// Gpgkey GPG key used to sign packages in this repository. Can be a gpg key or a URL
	Gpgkey     *[]string `json:"gpgkey,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`
	Name       *string   `json:"name,omitempty"`
	Priority   *int      `json:"priority,omitempty"`
	SslVerify  *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Filesystem         *[]Filesystem       `json:"filesystem,omitempty"`
	Openscap           *OpenSCAP           `json:"openscap,omitempty"`
	Packages           *[]string           `json:"packages,omitempty"`

	// PartitioningMode Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode    *CustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`
	PayloadRepositories *[]Repository                   `json:"payload_repositories,omitempty"`
	Subscription        *Subscription                   `json:"subscription,omitempty"`

	// Users list of users that a customer can add, also specifying their respective groups and SSH keys
	Users *[]User `json:"users,omitempty"`
}

// CustomizationsPartitioningMode Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type CustomizationsPartitioningMode string

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// DistributionProfileItem defines model for DistributionProfileItem.
type DistributionProfileItem string

// DistributionProfileResponse List of profiles for a given distribution
type DistributionProfileResponse = []DistributionProfileItem

// Distributions List of all distributions that image builder supports. A user might not have access to
// restricted distributions.
//
// Restricted distributions include the RHEL nightlies and the Fedora distributions.
type Distributions string

// DistributionsResponse List of distributions this user is allowed to build.
type DistributionsResponse = []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// MinSize size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {
	// ShareWithAccounts List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	// Architecture CPU architecture of the image, x86_64 and aarch64 are currently supported.
	Architecture ImageRequestArchitecture `json:"architecture"`
	ImageType    ImageTypes               `json:"image_type"`
	Ostree       *OSTree                  `json:"ostree,omitempty"`

	// Size Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size          *uint64       `json:"size,omitempty"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// ImageRequestArchitecture CPU architecture of the image, x86_64 and aarch64 are currently supported.
type ImageRequestArchitecture string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusStatus   `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusStatus defines model for ImageStatus.Status.
type ImageStatusStatus string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// OCIUploadRequestOptions defines model for OCIUploadRequestOptions.
type OCIUploadRequestOptions = map[string]interface{}

// OCIUploadStatus defines model for OCIUploadStatus.
type OCIUploadStatus struct {
	Url string `json:"url"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// Contenturl A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Parent Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Rhsm Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	// ProfileDescription The longform policy description
	ProfileDescription *string `json:"profile_description,omitempty"`

	// ProfileId The policy reference ID
	ProfileId string `json:"profile_id"`

	// ProfileName The policy type
	ProfileName *string `json:"profile_name,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// CheckRepoGpg Enables gpg verification of the repository metadata
	CheckRepoGpg *bool   `json:"check_repo_gpg,omitempty"`
	Gpgkey       *string `json:"gpgkey,omitempty"`
	IgnoreSsl    *bool   `json:"ignore_ssl,omitempty"`
	Metalink     *string `json:"metalink,omitempty"`
	Mirrorlist   *string `json:"mirrorlist,omitempty"`
	Rhsm         bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`

	// Rhc Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options UploadRequest_Options `json:"options"`
	Type    UploadTypes           `json:"type"`
}

// UploadRequest_Options defines model for UploadRequest.Options.
type UploadRequest_Options struct {
	union json.RawMessage
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options UploadStatus_Options `json:"options"`
	Status  UploadStatusStatus   `json:"status"`
	Type    UploadTypes          `json:"type"`
}

// UploadStatus_Options defines model for UploadStatus.Options.
type UploadStatus_Options struct {
	union json.RawMessage
}

// UploadStatusStatus defines model for UploadStatus.Status.
type UploadStatusStatus string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Name   string `json:"name"`
	SshKey string `json:"ssh_key"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {
	// Limit max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// IgnoreImageTypes Filter the composes on image type. The filter is optional and can be specified multiple times.
	IgnoreImageTypes *[]ImageTypes `form:"ignoreImageTypes,omitempty" json:"ignoreImageTypes,omitempty"`
}

// GetComposeClonesParams defines parameters for GetComposeClones.
type GetComposeClonesParams struct {
	// Limit max amount of clones, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset clones page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	// Distribution distribution to look up packages for
	Distribution Distributions `form:"distribution" json:"distribution"`

	// Architecture architecture to look up packages for
	Architecture GetPackagesParamsArchitecture `form:"architecture" json:"architecture"`

	// Search packages to look for
	Search string `form:"search" json:"search"`

	// Limit max amount of packages, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset packages page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParamsArchitecture defines parameters for GetPackages.
type GetPackagesParamsArchitecture string

// ComposeImageJSONRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody = ComposeRequest

// CloneComposeJSONRequestBody defines body for CloneCompose for application/json ContentType.
type CloneComposeJSONRequestBody = CloneRequest

// CreateBlueprintJSONRequestBody defines body for CreateBlueprint for application/json ContentType.
type CreateBlueprintJSONRequestBody = CreateBlueprintRequest

// AsAWSEC2Clone returns the union data inside the CloneRequest as a AWSEC2Clone
func (t CloneRequest) AsAWSEC2Clone() (AWSEC2Clone, error) {
	var body AWSEC2Clone
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSEC2Clone overwrites any union data inside the CloneRequest as the provided AWSEC2Clone
func (t *CloneRequest) FromAWSEC2Clone(v AWSEC2Clone) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSEC2Clone performs a merge with any union data inside the CloneRequest, using the provided AWSEC2Clone
func (t *CloneRequest) MergeAWSEC2Clone(v AWSEC2Clone) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t CloneRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CloneRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAWSUploadStatus returns the union data inside the CloneStatusResponse_Options as a AWSUploadStatus
func (t CloneStatusResponse_Options) AsAWSUploadStatus() (AWSUploadStatus, error) {
	var body AWSUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSUploadStatus overwrites any union data inside the CloneStatusResponse_Options as the provided AWSUploadStatus
func (t *CloneStatusResponse_Options) FromAWSUploadStatus(v AWSUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSUploadStatus performs a merge with any union data inside the CloneStatusResponse_Options, using the provided AWSUploadStatus
func (t *CloneStatusResponse_Options) MergeAWSUploadStatus(v AWSUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAWSS3UploadStatus returns the union data inside the CloneStatusResponse_Options as a AWSS3UploadStatus
func (t CloneStatusResponse_Options) AsAWSS3UploadStatus() (AWSS3UploadStatus, error) {
	var body AWSS3UploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSS3UploadStatus overwrites any union data inside the CloneStatusResponse_Options as the provided AWSS3UploadStatus
func (t *CloneStatusResponse_Options) FromAWSS3UploadStatus(v AWSS3UploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSS3UploadStatus performs a merge with any union data inside the CloneStatusResponse_Options, using the provided AWSS3UploadStatus
func (t *CloneStatusResponse_Options) MergeAWSS3UploadStatus(v AWSS3UploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsGCPUploadStatus returns the union data inside the CloneStatusResponse_Options as a GCPUploadStatus
func (t CloneStatusResponse_Options) AsGCPUploadStatus() (GCPUploadStatus, error) {
	var body GCPUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGCPUploadStatus overwrites any union data inside the CloneStatusResponse_Options as the provided GCPUploadStatus
func (t *CloneStatusResponse_Options) FromGCPUploadStatus(v GCPUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGCPUploadStatus performs a merge with any union data inside the CloneStatusResponse_Options, using the provided GCPUploadStatus
func (t *CloneStatusResponse_Options) MergeGCPUploadStatus(v GCPUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAzureUploadStatus returns the union data inside the CloneStatusResponse_Options as a AzureUploadStatus
func (t CloneStatusResponse_Options) AsAzureUploadStatus() (AzureUploadStatus, error) {
	var body AzureUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureUploadStatus overwrites any union data inside the CloneStatusResponse_Options as the provided AzureUploadStatus
func (t *CloneStatusResponse_Options) FromAzureUploadStatus(v AzureUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureUploadStatus performs a merge with any union data inside the CloneStatusResponse_Options, using the provided AzureUploadStatus
func (t *CloneStatusResponse_Options) MergeAzureUploadStatus(v AzureUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsOCIUploadStatus returns the union data inside the CloneStatusResponse_Options as a OCIUploadStatus
func (t CloneStatusResponse_Options) AsOCIUploadStatus() (OCIUploadStatus, error) {
	var body OCIUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOCIUploadStatus overwrites any union data inside the CloneStatusResponse_Options as the provided OCIUploadStatus
func (t *CloneStatusResponse_Options) FromOCIUploadStatus(v OCIUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOCIUploadStatus performs a merge with any union data inside the CloneStatusResponse_Options, using the provided OCIUploadStatus
func (t *CloneStatusResponse_Options) MergeOCIUploadStatus(v OCIUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t CloneStatusResponse_Options) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CloneStatusResponse_Options) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAWSUploadRequestOptions returns the union data inside the UploadRequest_Options as a AWSUploadRequestOptions
func (t UploadRequest_Options) AsAWSUploadRequestOptions() (AWSUploadRequestOptions, error) {
	var body AWSUploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSUploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided AWSUploadRequestOptions
func (t *UploadRequest_Options) FromAWSUploadRequestOptions(v AWSUploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSUploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided AWSUploadRequestOptions
func (t *UploadRequest_Options) MergeAWSUploadRequestOptions(v AWSUploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAWSS3UploadRequestOptions returns the union data inside the UploadRequest_Options as a AWSS3UploadRequestOptions
func (t UploadRequest_Options) AsAWSS3UploadRequestOptions() (AWSS3UploadRequestOptions, error) {
	var body AWSS3UploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSS3UploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided AWSS3UploadRequestOptions
func (t *UploadRequest_Options) FromAWSS3UploadRequestOptions(v AWSS3UploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSS3UploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided AWSS3UploadRequestOptions
func (t *UploadRequest_Options) MergeAWSS3UploadRequestOptions(v AWSS3UploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsGCPUploadRequestOptions returns the union data inside the UploadRequest_Options as a GCPUploadRequestOptions
func (t UploadRequest_Options) AsGCPUploadRequestOptions() (GCPUploadRequestOptions, error) {
	var body GCPUploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGCPUploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided GCPUploadRequestOptions
func (t *UploadRequest_Options) FromGCPUploadRequestOptions(v GCPUploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGCPUploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided GCPUploadRequestOptions
func (t *UploadRequest_Options) MergeGCPUploadRequestOptions(v GCPUploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAzureUploadRequestOptions returns the union data inside the UploadRequest_Options as a AzureUploadRequestOptions
func (t UploadRequest_Options) AsAzureUploadRequestOptions() (AzureUploadRequestOptions, error) {
	var body AzureUploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureUploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided AzureUploadRequestOptions
func (t *UploadRequest_Options) FromAzureUploadRequestOptions(v AzureUploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureUploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided AzureUploadRequestOptions
func (t *UploadRequest_Options) MergeAzureUploadRequestOptions(v AzureUploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsOCIUploadRequestOptions returns the union data inside the UploadRequest_Options as a OCIUploadRequestOptions
func (t UploadRequest_Options) AsOCIUploadRequestOptions() (OCIUploadRequestOptions, error) {
	var body OCIUploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOCIUploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided OCIUploadRequestOptions
func (t *UploadRequest_Options) FromOCIUploadRequestOptions(v OCIUploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOCIUploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided OCIUploadRequestOptions
func (t *UploadRequest_Options) MergeOCIUploadRequestOptions(v OCIUploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t UploadRequest_Options) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UploadRequest_Options) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAWSUploadStatus returns the union data inside the UploadStatus_Options as a AWSUploadStatus
func (t UploadStatus_Options) AsAWSUploadStatus() (AWSUploadStatus, error) {
	var body AWSUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSUploadStatus overwrites any union data inside the UploadStatus_Options as the provided AWSUploadStatus
func (t *UploadStatus_Options) FromAWSUploadStatus(v AWSUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSUploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided AWSUploadStatus
func (t *UploadStatus_Options) MergeAWSUploadStatus(v AWSUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAWSS3UploadStatus returns the union data inside the UploadStatus_Options as a AWSS3UploadStatus
func (t UploadStatus_Options) AsAWSS3UploadStatus() (AWSS3UploadStatus, error) {
	var body AWSS3UploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSS3UploadStatus overwrites any union data inside the UploadStatus_Options as the provided AWSS3UploadStatus
func (t *UploadStatus_Options) FromAWSS3UploadStatus(v AWSS3UploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSS3UploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided AWSS3UploadStatus
func (t *UploadStatus_Options) MergeAWSS3UploadStatus(v AWSS3UploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsGCPUploadStatus returns the union data inside the UploadStatus_Options as a GCPUploadStatus
func (t UploadStatus_Options) AsGCPUploadStatus() (GCPUploadStatus, error) {
	var body GCPUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGCPUploadStatus overwrites any union data inside the UploadStatus_Options as the provided GCPUploadStatus
func (t *UploadStatus_Options) FromGCPUploadStatus(v GCPUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGCPUploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided GCPUploadStatus
func (t *UploadStatus_Options) MergeGCPUploadStatus(v GCPUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAzureUploadStatus returns the union data inside the UploadStatus_Options as a AzureUploadStatus
func (t UploadStatus_Options) AsAzureUploadStatus() (AzureUploadStatus, error) {
	var body AzureUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureUploadStatus overwrites any union data inside the UploadStatus_Options as the provided AzureUploadStatus
func (t *UploadStatus_Options) FromAzureUploadStatus(v AzureUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureUploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided AzureUploadStatus
func (t *UploadStatus_Options) MergeAzureUploadStatus(v AzureUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsOCIUploadStatus returns the union data inside the UploadStatus_Options as a OCIUploadStatus
func (t UploadStatus_Options) AsOCIUploadStatus() (OCIUploadStatus, error) {
	var body OCIUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOCIUploadStatus overwrites any union data inside the UploadStatus_Options as the provided OCIUploadStatus
func (t *UploadStatus_Options) FromOCIUploadStatus(v OCIUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOCIUploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided OCIUploadStatus
func (t *UploadStatus_Options) MergeOCIUploadStatus(v OCIUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t UploadStatus_Options) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UploadStatus_Options) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution Distributions) error
	// get status of a compose clone
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id openapi_types.UUID) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// delete a compose
	// (DELETE /composes/{composeId})
	DeleteCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId openapi_types.UUID) error
	// clone a compose
	// (POST /composes/{composeId}/clone)
	CloneCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get clones of a compose
	// (GET /composes/{composeId}/clones)
	GetComposeClones(ctx echo.Context, composeId openapi_types.UUID, params GetComposeClonesParams) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId openapi_types.UUID) error
	// get the distributions available to this user
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// create blueprint
	// (POST /experimental/blueprint)
	CreateBlueprint(ctx echo.Context) error
	// create new compose from blueprint
	// (POST /experimental/blueprint/{id}/compose)
	ComposeBlueprint(ctx echo.Context, id openapi_types.UUID) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error
	// get the available profiles for a given distribution. This is a temporary endpoint meant to be removed soon.
	// (GET /oscap/{distribution}/profiles)
	GetOscapProfiles(ctx echo.Context, distribution Distributions) error
	// get the customizations for a given distribution and profile. This is a temporary endpoint meant to be removed soon.
	// (GET /oscap/{distribution}/{profile}/customizations)
	GetOscapCustomizations(ctx echo.Context, distribution Distributions, profile DistributionProfileItem) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution Distributions

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "ignoreImageTypes" -------------

	err = runtime.BindQueryParameter("form", true, false, "ignoreImageTypes", ctx.QueryParams(), &params.IgnoreImageTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ignoreImageTypes: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// DeleteCompose converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompose(ctx, composeId)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// CloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) CloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CloneCompose(ctx, composeId)
	return err
}

// GetComposeClones converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeClones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposeClonesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeClones(ctx, composeId, params)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// CreateBlueprint converts echo context to params.
func (w *ServerInterfaceWrapper) CreateBlueprint(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateBlueprint(ctx)
	return err
}

// ComposeBlueprint converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeBlueprint(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeBlueprint(ctx, id)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetOscapProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) GetOscapProfiles(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution Distributions

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOscapProfiles(ctx, distribution)
	return err
}

// GetOscapCustomizations converts echo context to params.
func (w *ServerInterfaceWrapper) GetOscapCustomizations(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution Distributions

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Path parameter "profile" -------------
	var profile DistributionProfileItem

	err = runtime.BindStyledParameterWithLocation("simple", false, "profile", runtime.ParamLocationPath, ctx.Param("profile"), &profile)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter profile: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOscapCustomizations(ctx, distribution, profile)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/architectures/:distribution", wrapper.GetArchitectures)
	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.ComposeImage)
	router.GET(baseURL+"/composes", wrapper.GetComposes)
	router.DELETE(baseURL+"/composes/:composeId", wrapper.DeleteCompose)
	router.GET(baseURL+"/composes/:composeId", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:composeId/clone", wrapper.CloneCompose)
	router.GET(baseURL+"/composes/:composeId/clones", wrapper.GetComposeClones)
	router.GET(baseURL+"/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/distributions", wrapper.GetDistributions)
	router.POST(baseURL+"/experimental/blueprint", wrapper.CreateBlueprint)
	router.POST(baseURL+"/experimental/blueprint/:id/compose", wrapper.ComposeBlueprint)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)
	router.GET(baseURL+"/oscap/:distribution/profiles", wrapper.GetOscapProfiles)
	router.GET(baseURL+"/oscap/:distribution/:profile/customizations", wrapper.GetOscapCustomizations)
	router.GET(baseURL+"/packages", wrapper.GetPackages)
	router.GET(baseURL+"/ready", wrapper.GetReadiness)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"zzSpst0134vl3Me3j/8XAAD//x6xE3CAfAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

var swagger *openapi3.T

func init() {
	var err error
	// load OpenAPI spec into memory and error out early
	swagger, err = getSwagger()
	if err != nil {
		panic(err)
	}
}

func getSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}


// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() *openapi3.T {
	return swagger
}
