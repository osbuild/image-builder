// Package v1 provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`
}

// Architectures defines model for Architectures.
type Architectures []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {

	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   Distributions   `json:"distribution"`
	ImageName      *string         `json:"image_name,omitempty"`

	// Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id string `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus `json:"image_status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string      `json:"created_at"`
	Id        string      `json:"id"`
	ImageName *string     `json:"image_name,omitempty"`
	Request   interface{} `json:"request"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Filesystem          *[]Filesystem `json:"filesystem,omitempty"`
	Packages            *[]string     `json:"packages,omitempty"`
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Subscription        *Subscription `json:"subscription,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions string

// List of Distributions
const (
	Distributions_centos_8 Distributions = "centos-8"
	Distributions_centos_9 Distributions = "centos-9"
	Distributions_rhel_8   Distributions = "rhel-8"
	Distributions_rhel_84  Distributions = "rhel-84"
	Distributions_rhel_85  Distributions = "rhel-85"
	Distributions_rhel_86  Distributions = "rhel-86"
	Distributions_rhel_9   Distributions = "rhel-9"
	Distributions_rhel_90  Distributions = "rhel-90"
)

// DistributionsResponse defines model for DistributionsResponse.
type DistributionsResponse []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {

	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {

	// CPU architecture of the image, only x86_64 is currently supported.
	Architecture  string        `json:"architecture"`
	ImageType     ImageTypes    `json:"image_type"`
	Ostree        *OSTree       `json:"ostree,omitempty"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       string              `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// List of ImageTypes
const (
	ImageTypes_ami                 ImageTypes = "ami"
	ImageTypes_aws                 ImageTypes = "aws"
	ImageTypes_azure               ImageTypes = "azure"
	ImageTypes_edge_commit         ImageTypes = "edge-commit"
	ImageTypes_edge_installer      ImageTypes = "edge-installer"
	ImageTypes_gcp                 ImageTypes = "gcp"
	ImageTypes_guest_image         ImageTypes = "guest-image"
	ImageTypes_image_installer     ImageTypes = "image-installer"
	ImageTypes_rhel_edge_commit    ImageTypes = "rhel-edge-commit"
	ImageTypes_rhel_edge_installer ImageTypes = "rhel-edge-installer"
	ImageTypes_vhd                 ImageTypes = "vhd"
	ImageTypes_vsphere             ImageTypes = "vsphere"
)

// OSTree defines model for OSTree.
type OSTree struct {

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`
	Url    *string `json:"url,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl    *string `json:"baseurl,omitempty"`
	CheckGpg   *bool   `json:"check_gpg,omitempty"`
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`
	Rhsm       bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`
	ServerUrl     string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{} `json:"options"`
	Status  string      `json:"status"`
	Type    UploadTypes `json:"type"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// List of UploadTypes
const (
	UploadTypes_aws    UploadTypes = "aws"
	UploadTypes_aws_s3 UploadTypes = "aws.s3"
	UploadTypes_azure  UploadTypes = "azure"
	UploadTypes_gcp    UploadTypes = "gcp"
)

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {

	// max amount of composes, default 100
	Limit *int `json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {

	// distribution to look up packages for
	Distribution Distributions `json:"distribution"`

	// architecture to look up packages for
	Architecture string `json:"architecture"`

	// packages to look for
	Search string `json:"search"`

	// max amount of packages, default 100
	Limit *int `json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// ComposeImageRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody ComposeImageJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId string) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId string) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameter("simple", false, "distribution", ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameter("simple", false, "composeId", ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameter("simple", false, "composeId", ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/architectures/:distribution", wrapper.GetArchitectures)
	router.POST("/compose", wrapper.ComposeImage)
	router.GET("/composes", wrapper.GetComposes)
	router.GET("/composes/:composeId", wrapper.GetComposeStatus)
	router.GET("/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET("/distributions", wrapper.GetDistributions)
	router.GET("/openapi.json", wrapper.GetOpenapiJson)
	router.GET("/packages", wrapper.GetPackages)
	router.GET("/ready", wrapper.GetReadiness)
	router.GET("/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
