// Package v1 provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`
}

// Architectures defines model for Architectures.
type Architectures []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {

	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   Distributions   `json:"distribution"`
	ImageName      *string         `json:"image_name,omitempty"`

	// Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id string `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus `json:"image_status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string      `json:"created_at"`
	Id        string      `json:"id"`
	ImageName *string     `json:"image_name,omitempty"`
	Request   interface{} `json:"request"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Filesystem          *[]Filesystem `json:"filesystem,omitempty"`
	Packages            *[]string     `json:"packages,omitempty"`
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Subscription        *Subscription `json:"subscription,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions string

// List of Distributions
const (
	Distributions_centos_8 Distributions = "centos-8"
	Distributions_centos_9 Distributions = "centos-9"
	Distributions_rhel_84  Distributions = "rhel-84"
	Distributions_rhel_85  Distributions = "rhel-85"
	Distributions_rhel_86  Distributions = "rhel-86"
	Distributions_rhel_90  Distributions = "rhel-90"
)

// DistributionsResponse defines model for DistributionsResponse.
type DistributionsResponse []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {

	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {

	// CPU architecture of the image, only x86_64 is currently supported.
	Architecture  string        `json:"architecture"`
	ImageType     ImageTypes    `json:"image_type"`
	Ostree        *OSTree       `json:"ostree,omitempty"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       string              `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// List of ImageTypes
const (
	ImageTypes_ami                 ImageTypes = "ami"
	ImageTypes_aws                 ImageTypes = "aws"
	ImageTypes_azure               ImageTypes = "azure"
	ImageTypes_edge_commit         ImageTypes = "edge-commit"
	ImageTypes_edge_container      ImageTypes = "edge-container"
	ImageTypes_edge_installer      ImageTypes = "edge-installer"
	ImageTypes_gcp                 ImageTypes = "gcp"
	ImageTypes_guest_image         ImageTypes = "guest-image"
	ImageTypes_image_installer     ImageTypes = "image-installer"
	ImageTypes_rhel_edge_commit    ImageTypes = "rhel-edge-commit"
	ImageTypes_rhel_edge_installer ImageTypes = "rhel-edge-installer"
	ImageTypes_vhd                 ImageTypes = "vhd"
	ImageTypes_vsphere             ImageTypes = "vsphere"
)

// OSTree defines model for OSTree.
type OSTree struct {
	Ref *string `json:"ref,omitempty"`
	Url *string `json:"url,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl    *string `json:"baseurl,omitempty"`
	CheckGpg   *bool   `json:"check_gpg,omitempty"`
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`
	Rhsm       bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`
	ServerUrl     string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{} `json:"options"`
	Status  string      `json:"status"`
	Type    UploadTypes `json:"type"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// List of UploadTypes
const (
	UploadTypes_aws    UploadTypes = "aws"
	UploadTypes_aws_s3 UploadTypes = "aws.s3"
	UploadTypes_azure  UploadTypes = "azure"
	UploadTypes_gcp    UploadTypes = "gcp"
)

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {

	// max amount of composes, default 100
	Limit *int `json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {

	// distribution to look up packages for
	Distribution Distributions `json:"distribution"`

	// architecture to look up packages for
	Architecture string `json:"architecture"`

	// packages to look for
	Search string `json:"search"`

	// max amount of packages, default 100
	Limit *int `json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// ComposeImageRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody ComposeImageJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId string) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId string) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameter("simple", false, "distribution", ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameter("simple", false, "composeId", ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameter("simple", false, "composeId", ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/architectures/:distribution", wrapper.GetArchitectures)
	router.POST("/compose", wrapper.ComposeImage)
	router.GET("/composes", wrapper.GetComposes)
	router.GET("/composes/:composeId", wrapper.GetComposeStatus)
	router.GET("/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET("/distributions", wrapper.GetDistributions)
	router.GET("/openapi.json", wrapper.GetOpenapiJson)
	router.GET("/packages", wrapper.GetPackages)
	router.GET("/ready", wrapper.GetReadiness)
	router.GET("/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"r7b/FwAA//9k+KAfwzkAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
