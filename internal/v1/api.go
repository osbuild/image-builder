// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for Distributions.
const (
	Centos8  Distributions = "centos-8"
	Centos9  Distributions = "centos-9"
	Fedora35 Distributions = "fedora-35"
	Fedora36 Distributions = "fedora-36"
	Fedora37 Distributions = "fedora-37"
	Fedora38 Distributions = "fedora-38"
	Rhel8    Distributions = "rhel-8"
	Rhel84   Distributions = "rhel-84"
	Rhel85   Distributions = "rhel-85"
	Rhel86   Distributions = "rhel-86"
	Rhel87   Distributions = "rhel-87"
	Rhel88   Distributions = "rhel-88"
	Rhel9    Distributions = "rhel-9"
	Rhel90   Distributions = "rhel-90"
	Rhel91   Distributions = "rhel-91"
	Rhel92   Distributions = "rhel-92"
)

// Defines values for ImageRequestArchitecture.
const (
	Aarch64 ImageRequestArchitecture = "aarch64"
	X8664   ImageRequestArchitecture = "x86_64"
)

// Defines values for ImageStatusStatus.
const (
	ImageStatusStatusBuilding    ImageStatusStatus = "building"
	ImageStatusStatusFailure     ImageStatusStatus = "failure"
	ImageStatusStatusPending     ImageStatusStatus = "pending"
	ImageStatusStatusRegistering ImageStatusStatus = "registering"
	ImageStatusStatusSuccess     ImageStatusStatus = "success"
	ImageStatusStatusUploading   ImageStatusStatus = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAmi               ImageTypes = "ami"
	ImageTypesAws               ImageTypes = "aws"
	ImageTypesAzure             ImageTypes = "azure"
	ImageTypesEdgeCommit        ImageTypes = "edge-commit"
	ImageTypesEdgeInstaller     ImageTypes = "edge-installer"
	ImageTypesGcp               ImageTypes = "gcp"
	ImageTypesGuestImage        ImageTypes = "guest-image"
	ImageTypesImageInstaller    ImageTypes = "image-installer"
	ImageTypesRhelEdgeCommit    ImageTypes = "rhel-edge-commit"
	ImageTypesRhelEdgeInstaller ImageTypes = "rhel-edge-installer"
	ImageTypesVhd               ImageTypes = "vhd"
	ImageTypesVsphere           ImageTypes = "vsphere"
	ImageTypesVsphereOva        ImageTypes = "vsphere-ova"
)

// Defines values for UploadStatusStatus.
const (
	UploadStatusStatusFailure UploadStatusStatus = "failure"
	UploadStatusStatusPending UploadStatusStatus = "pending"
	UploadStatusStatusRunning UploadStatusStatus = "running"
	UploadStatusStatusSuccess UploadStatusStatus = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws   UploadTypes = "aws"
	UploadTypesAwsS3 UploadTypes = "aws.s3"
	UploadTypesAzure UploadTypes = "azure"
	UploadTypesGcp   UploadTypes = "gcp"
)

// AWSEC2Clone defines model for AWSEC2Clone.
type AWSEC2Clone struct {
	// A region as described in
	// https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-regions
	Region string `json:"region"`

	// An array of AWS account IDs as described in
	// https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions = map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`

	// Base repositories for the given distribution and architecture.
	Repositories []Repository `json:"repositories"`
}

// Architectures defines model for Architectures.
type Architectures = []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {
	// Name of the created image.
	// Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens.
	// The total length is limited to 60 characters.
	ImageName *string `json:"image_name,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of the source that will be used to resolve the tenant and subscription IDs.
	// Do not provide a tenant_id or subscription_id when providing a source_id.
	SourceId *string `json:"source_id,omitempty"`

	// ID of subscription where the image should be uploaded.
	// When providing a subscription_id, also be sure to provide a tenant_id and do not include a source_id.
	SubscriptionId *string `json:"subscription_id,omitempty"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	// When providing a tenant_id, also be sure to provide a subscription_id and do not include a source_id.
	TenantId *string `json:"tenant_id,omitempty"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneRequest defines model for CloneRequest.
type CloneRequest interface{}

// CloneResponse defines model for CloneResponse.
type CloneResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ClonesResponse defines model for ClonesResponse.
type ClonesResponse struct {
	Data  []ClonesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ClonesResponseItem defines model for ClonesResponseItem.
type ClonesResponseItem struct {
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Request   interface{}        `json:"request"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   Distributions   `json:"distribution"`
	ImageName      *string         `json:"image_name,omitempty"`

	// Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus    `json:"image_status"`
	Request     ComposeRequest `json:"request"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	ImageName *string            `json:"image_name,omitempty"`
	Request   interface{}        `json:"request"`
}

// Repository configuration for custom repositories.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above. Id is required.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg *bool     `json:"check_repo_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`

	// GPG key used to sign packages in this repository. Can be a gpg key or a URL
	Gpgkey     *[]string `json:"gpgkey,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`
	Name       *string   `json:"name,omitempty"`
	Priority   *int      `json:"priority,omitempty"`
	SslVerify  *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	CustomRepositories  *[]CustomRepository `json:"custom_repositories,omitempty"`
	Filesystem          *[]Filesystem       `json:"filesystem,omitempty"`
	Packages            *[]string           `json:"packages,omitempty"`
	PayloadRepositories *[]Repository       `json:"payload_repositories,omitempty"`
	Subscription        *Subscription       `json:"subscription,omitempty"`

	// list of users that a customer can add, also specifying their respective groups and SSH keys
	Users *[]User `json:"users,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions string

// DistributionsResponse defines model for DistributionsResponse.
type DistributionsResponse = []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {
	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	// CPU architecture of the image, x86_64 and aarch64 are currently supported.
	Architecture  ImageRequestArchitecture `json:"architecture"`
	ImageType     ImageTypes               `json:"image_type"`
	Ostree        *OSTree                  `json:"ostree,omitempty"`
	UploadRequest UploadRequest            `json:"upload_request"`
}

// CPU architecture of the image, x86_64 and aarch64 are currently supported.
type ImageRequestArchitecture string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusStatus   `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusStatus defines model for ImageStatus.Status.
type ImageStatusStatus string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool   `json:"check_repo_gpg,omitempty"`
	Gpgkey       *string `json:"gpgkey,omitempty"`
	IgnoreSsl    *bool   `json:"ignore_ssl,omitempty"`
	Metalink     *string `json:"metalink,omitempty"`
	Mirrorlist   *string `json:"mirrorlist,omitempty"`
	Rhsm         bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}        `json:"options"`
	Status  UploadStatusStatus `json:"status"`
	Type    UploadTypes        `json:"type"`
}

// UploadStatusStatus defines model for UploadStatus.Status.
type UploadStatusStatus string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Name   string `json:"name"`
	SshKey string `json:"ssh_key"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody = ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {
	// max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// CloneComposeJSONBody defines parameters for CloneCompose.
type CloneComposeJSONBody = CloneRequest

// GetComposeClonesParams defines parameters for GetComposeClones.
type GetComposeClonesParams struct {
	// max amount of clones, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// clones page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	// distribution to look up packages for
	Distribution Distributions `form:"distribution" json:"distribution"`

	// architecture to look up packages for
	Architecture GetPackagesParamsArchitecture `form:"architecture" json:"architecture"`

	// packages to look for
	Search string `form:"search" json:"search"`

	// max amount of packages, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParamsArchitecture defines parameters for GetPackages.
type GetPackagesParamsArchitecture string

// ComposeImageJSONRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody = ComposeImageJSONBody

// CloneComposeJSONRequestBody defines body for CloneCompose for application/json ContentType.
type CloneComposeJSONRequestBody = CloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// get status of a compose clone
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id openapi_types.UUID) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// delete a compose
	// (DELETE /composes/{composeId})
	DeleteCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId openapi_types.UUID) error
	// clone a compose
	// (POST /composes/{composeId}/clone)
	CloneCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get clones of a compose
	// (GET /composes/{composeId}/clones)
	GetComposeClones(ctx echo.Context, composeId openapi_types.UUID, params GetComposeClonesParams) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId openapi_types.UUID) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// DeleteCompose converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompose(ctx, composeId)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// CloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) CloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CloneCompose(ctx, composeId)
	return err
}

// GetComposeClones converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeClones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposeClonesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeClones(ctx, composeId, params)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/architectures/:distribution", wrapper.GetArchitectures)
	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.ComposeImage)
	router.GET(baseURL+"/composes", wrapper.GetComposes)
	router.DELETE(baseURL+"/composes/:composeId", wrapper.DeleteCompose)
	router.GET(baseURL+"/composes/:composeId", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:composeId/clone", wrapper.CloneCompose)
	router.GET(baseURL+"/composes/:composeId/clones", wrapper.GetComposeClones)
	router.GET(baseURL+"/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/distributions", wrapper.GetDistributions)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)
	router.GET(baseURL+"/packages", wrapper.GetPackages)
	router.GET(baseURL+"/ready", wrapper.GetReadiness)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
