// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for Distributions.
const (
	Centos8  Distributions = "centos-8"
	Centos9  Distributions = "centos-9"
	Fedora35 Distributions = "fedora-35"
	Fedora36 Distributions = "fedora-36"
	Fedora37 Distributions = "fedora-37"
	Fedora38 Distributions = "fedora-38"
	Rhel8    Distributions = "rhel-8"
	Rhel84   Distributions = "rhel-84"
	Rhel85   Distributions = "rhel-85"
	Rhel86   Distributions = "rhel-86"
	Rhel87   Distributions = "rhel-87"
	Rhel9    Distributions = "rhel-9"
	Rhel90   Distributions = "rhel-90"
	Rhel91   Distributions = "rhel-91"
)

// Defines values for ImageRequestArchitecture.
const (
	Aarch64 ImageRequestArchitecture = "aarch64"
	X8664   ImageRequestArchitecture = "x86_64"
)

// Defines values for ImageStatusStatus.
const (
	ImageStatusStatusBuilding    ImageStatusStatus = "building"
	ImageStatusStatusFailure     ImageStatusStatus = "failure"
	ImageStatusStatusPending     ImageStatusStatus = "pending"
	ImageStatusStatusRegistering ImageStatusStatus = "registering"
	ImageStatusStatusSuccess     ImageStatusStatus = "success"
	ImageStatusStatusUploading   ImageStatusStatus = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAmi               ImageTypes = "ami"
	ImageTypesAws               ImageTypes = "aws"
	ImageTypesAzure             ImageTypes = "azure"
	ImageTypesEdgeCommit        ImageTypes = "edge-commit"
	ImageTypesEdgeInstaller     ImageTypes = "edge-installer"
	ImageTypesGcp               ImageTypes = "gcp"
	ImageTypesGuestImage        ImageTypes = "guest-image"
	ImageTypesImageInstaller    ImageTypes = "image-installer"
	ImageTypesRhelEdgeCommit    ImageTypes = "rhel-edge-commit"
	ImageTypesRhelEdgeInstaller ImageTypes = "rhel-edge-installer"
	ImageTypesVhd               ImageTypes = "vhd"
	ImageTypesVsphere           ImageTypes = "vsphere"
)

// Defines values for UploadStatusStatus.
const (
	UploadStatusStatusFailure UploadStatusStatus = "failure"
	UploadStatusStatusPending UploadStatusStatus = "pending"
	UploadStatusStatusRunning UploadStatusStatus = "running"
	UploadStatusStatusSuccess UploadStatusStatus = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws   UploadTypes = "aws"
	UploadTypesAwsS3 UploadTypes = "aws.s3"
	UploadTypesAzure UploadTypes = "azure"
	UploadTypesGcp   UploadTypes = "gcp"
)

// AWSEC2Clone defines model for AWSEC2Clone.
type AWSEC2Clone struct {
	// A region as described in
	// https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-regions
	Region string `json:"region"`

	// An array of AWS account IDs as described in
	// https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions = map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`

	// Base repositories for the given distribution and architecture.
	Repositories []Repository `json:"repositories"`
}

// Architectures defines model for Architectures.
type Architectures = []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {
	// Name of the created image.
	// Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens.
	// The total length is limited to 60 characters.
	ImageName *string `json:"image_name,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneRequest defines model for CloneRequest.
type CloneRequest interface{}

// CloneResponse defines model for CloneResponse.
type CloneResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ClonesResponse defines model for ClonesResponse.
type ClonesResponse struct {
	Data  []ClonesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ClonesResponseItem defines model for ClonesResponseItem.
type ClonesResponseItem struct {
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Request   interface{}        `json:"request"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   Distributions   `json:"distribution"`
	ImageName      *string         `json:"image_name,omitempty"`

	// Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus `json:"image_status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	ImageName *string            `json:"image_name,omitempty"`
	Request   interface{}        `json:"request"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Filesystem          *[]Filesystem `json:"filesystem,omitempty"`
	Packages            *[]string     `json:"packages,omitempty"`
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Subscription        *Subscription `json:"subscription,omitempty"`

	// list of users that a customer can add, also specifying their respective groups and SSH keys
	Users *[]User `json:"users,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions string

// DistributionsResponse defines model for DistributionsResponse.
type DistributionsResponse = []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {
	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	// CPU architecture of the image, x86_64 and aarch64 are currently supported.
	Architecture  ImageRequestArchitecture `json:"architecture"`
	ImageType     ImageTypes               `json:"image_type"`
	Ostree        *OSTree                  `json:"ostree,omitempty"`
	UploadRequest UploadRequest            `json:"upload_request"`
}

// CPU architecture of the image, x86_64 and aarch64 are currently supported.
type ImageRequestArchitecture string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusStatus   `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusStatus defines model for ImageStatus.Status.
type ImageStatusStatus string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl    *string `json:"baseurl,omitempty"`
	CheckGpg   *bool   `json:"check_gpg,omitempty"`
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`
	Rhsm       bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}        `json:"options"`
	Status  UploadStatusStatus `json:"status"`
	Type    UploadTypes        `json:"type"`
}

// UploadStatusStatus defines model for UploadStatus.Status.
type UploadStatusStatus string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Name   string `json:"name"`
	SshKey string `json:"ssh_key"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody = ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {
	// max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// CloneComposeJSONBody defines parameters for CloneCompose.
type CloneComposeJSONBody = CloneRequest

// GetComposeClonesParams defines parameters for GetComposeClones.
type GetComposeClonesParams struct {
	// max amount of clones, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// clones page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	// distribution to look up packages for
	Distribution Distributions `form:"distribution" json:"distribution"`

	// architecture to look up packages for
	Architecture GetPackagesParamsArchitecture `form:"architecture" json:"architecture"`

	// packages to look for
	Search string `form:"search" json:"search"`

	// max amount of packages, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParamsArchitecture defines parameters for GetPackages.
type GetPackagesParamsArchitecture string

// ComposeImageJSONRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody = ComposeImageJSONBody

// CloneComposeJSONRequestBody defines body for CloneCompose for application/json ContentType.
type CloneComposeJSONRequestBody = CloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// get status of a compose clone
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id openapi_types.UUID) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId openapi_types.UUID) error
	// clone a compose
	// (POST /composes/{composeId}/clone)
	CloneCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get clones of a compose
	// (GET /composes/{composeId}/clones)
	GetComposeClones(ctx echo.Context, composeId openapi_types.UUID, params GetComposeClonesParams) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId openapi_types.UUID) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// CloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) CloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CloneCompose(ctx, composeId)
	return err
}

// GetComposeClones converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeClones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposeClonesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeClones(ctx, composeId, params)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/architectures/:distribution", wrapper.GetArchitectures)
	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.ComposeImage)
	router.GET(baseURL+"/composes", wrapper.GetComposes)
	router.GET(baseURL+"/composes/:composeId", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:composeId/clone", wrapper.CloneCompose)
	router.GET(baseURL+"/composes/:composeId/clones", wrapper.GetComposeClones)
	router.GET(baseURL+"/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/distributions", wrapper.GetDistributions)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)
	router.GET(baseURL+"/packages", wrapper.GetPackages)
	router.GET(baseURL+"/ready", wrapper.GetReadiness)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
