// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for Distributions.
const (
	Centos8 Distributions = "centos-8"
	Centos9 Distributions = "centos-9"
	Rhel8   Distributions = "rhel-8"
	Rhel84  Distributions = "rhel-84"
	Rhel85  Distributions = "rhel-85"
	Rhel86  Distributions = "rhel-86"
	Rhel9   Distributions = "rhel-9"
	Rhel90  Distributions = "rhel-90"
)

// Defines values for ImageRequestArchitecture.
const (
	Aarch64 ImageRequestArchitecture = "aarch64"
	X8664   ImageRequestArchitecture = "x86_64"
)

// Defines values for ImageStatusStatus.
const (
	ImageStatusStatusBuilding    ImageStatusStatus = "building"
	ImageStatusStatusFailure     ImageStatusStatus = "failure"
	ImageStatusStatusPending     ImageStatusStatus = "pending"
	ImageStatusStatusRegistering ImageStatusStatus = "registering"
	ImageStatusStatusSuccess     ImageStatusStatus = "success"
	ImageStatusStatusUploading   ImageStatusStatus = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAmi               ImageTypes = "ami"
	ImageTypesAws               ImageTypes = "aws"
	ImageTypesAzure             ImageTypes = "azure"
	ImageTypesEdgeCommit        ImageTypes = "edge-commit"
	ImageTypesEdgeInstaller     ImageTypes = "edge-installer"
	ImageTypesGcp               ImageTypes = "gcp"
	ImageTypesGuestImage        ImageTypes = "guest-image"
	ImageTypesImageInstaller    ImageTypes = "image-installer"
	ImageTypesRhelEdgeCommit    ImageTypes = "rhel-edge-commit"
	ImageTypesRhelEdgeInstaller ImageTypes = "rhel-edge-installer"
	ImageTypesVhd               ImageTypes = "vhd"
	ImageTypesVsphere           ImageTypes = "vsphere"
)

// Defines values for UploadStatusStatus.
const (
	UploadStatusStatusFailure UploadStatusStatus = "failure"
	UploadStatusStatusPending UploadStatusStatus = "pending"
	UploadStatusStatusRunning UploadStatusStatus = "running"
	UploadStatusStatusSuccess UploadStatusStatus = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws   UploadTypes = "aws"
	UploadTypesAwsS3 UploadTypes = "aws.s3"
	UploadTypesAzure UploadTypes = "azure"
	UploadTypesGcp   UploadTypes = "gcp"
)

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions = map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`
}

// Architectures defines model for Architectures.
type Architectures = []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {
	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   Distributions   `json:"distribution"`
	ImageName      *string         `json:"image_name,omitempty"`

	// Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id string `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus `json:"image_status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string      `json:"created_at"`
	Id        string      `json:"id"`
	ImageName *string     `json:"image_name,omitempty"`
	Request   interface{} `json:"request"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Filesystem          *[]Filesystem `json:"filesystem,omitempty"`
	Packages            *[]string     `json:"packages,omitempty"`
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Subscription        *Subscription `json:"subscription,omitempty"`

	// list of users that a customer can add, also specifying their respective groups and SSH keys
	Users *[]User `json:"users,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions string

// DistributionsResponse defines model for DistributionsResponse.
type DistributionsResponse = []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {
	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	// CPU architecture of the image, only x86_64 and aarch64 are currently supported.
	Architecture  ImageRequestArchitecture `json:"architecture"`
	ImageType     ImageTypes               `json:"image_type"`
	Ostree        *OSTree                  `json:"ostree,omitempty"`
	UploadRequest UploadRequest            `json:"upload_request"`
}

// CPU architecture of the image, only x86_64 and aarch64 are currently supported.
type ImageRequestArchitecture string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusStatus   `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusStatus defines model for ImageStatus.Status.
type ImageStatusStatus string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// OSTree defines model for OSTree.
type OSTree struct {
	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`
	Url    *string `json:"url,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl    *string `json:"baseurl,omitempty"`
	CheckGpg   *bool   `json:"check_gpg,omitempty"`
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`
	Rhsm       bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`
	ServerUrl     string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}        `json:"options"`
	Status  UploadStatusStatus `json:"status"`
	Type    UploadTypes        `json:"type"`
}

// UploadStatusStatus defines model for UploadStatus.Status.
type UploadStatusStatus string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Name   string `json:"name"`
	SshKey string `json:"ssh_key"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody = ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {
	// max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	// distribution to look up packages for
	Distribution Distributions `form:"distribution" json:"distribution"`

	// architecture to look up packages for
	Architecture GetPackagesParamsArchitecture `form:"architecture" json:"architecture"`

	// packages to look for
	Search string `form:"search" json:"search"`

	// max amount of packages, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParamsArchitecture defines parameters for GetPackages.
type GetPackagesParamsArchitecture string

// ComposeImageJSONRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody = ComposeImageJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId string) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId string) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/architectures/:distribution", wrapper.GetArchitectures)
	router.POST(baseURL+"/compose", wrapper.ComposeImage)
	router.GET(baseURL+"/composes", wrapper.GetComposes)
	router.GET(baseURL+"/composes/:composeId", wrapper.GetComposeStatus)
	router.GET(baseURL+"/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/distributions", wrapper.GetDistributions)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)
	router.GET(baseURL+"/packages", wrapper.GetPackages)
	router.GET(baseURL+"/ready", wrapper.GetReadiness)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
