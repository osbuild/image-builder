// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for ClientId.
const (
	Api ClientId = "api"
	Ui  ClientId = "ui"
)

// Defines values for CloneStatusResponseStatus.
const (
	CloneStatusResponseStatusFailure CloneStatusResponseStatus = "failure"
	CloneStatusResponseStatusPending CloneStatusResponseStatus = "pending"
	CloneStatusResponseStatusRunning CloneStatusResponseStatus = "running"
	CloneStatusResponseStatusSuccess CloneStatusResponseStatus = "success"
)

// Defines values for CustomizationsPartitioningMode.
const (
	AutoLvm CustomizationsPartitioningMode = "auto-lvm"
	Lvm     CustomizationsPartitioningMode = "lvm"
	Raw     CustomizationsPartitioningMode = "raw"
)

// Defines values for DistributionProfileItem.
const (
	XccdfOrgSsgprojectContentProfileAnssiBp28Enhanced     DistributionProfileItem = "xccdf_org.ssgproject.content_profile_anssi_bp28_enhanced"
	XccdfOrgSsgprojectContentProfileAnssiBp28High         DistributionProfileItem = "xccdf_org.ssgproject.content_profile_anssi_bp28_high"
	XccdfOrgSsgprojectContentProfileAnssiBp28Intermediary DistributionProfileItem = "xccdf_org.ssgproject.content_profile_anssi_bp28_intermediary"
	XccdfOrgSsgprojectContentProfileAnssiBp28Minimal      DistributionProfileItem = "xccdf_org.ssgproject.content_profile_anssi_bp28_minimal"
	XccdfOrgSsgprojectContentProfileCis                   DistributionProfileItem = "xccdf_org.ssgproject.content_profile_cis"
	XccdfOrgSsgprojectContentProfileCisServerL1           DistributionProfileItem = "xccdf_org.ssgproject.content_profile_cis_server_l1"
	XccdfOrgSsgprojectContentProfileCisWorkstationL1      DistributionProfileItem = "xccdf_org.ssgproject.content_profile_cis_workstation_l1"
	XccdfOrgSsgprojectContentProfileCisWorkstationL2      DistributionProfileItem = "xccdf_org.ssgproject.content_profile_cis_workstation_l2"
	XccdfOrgSsgprojectContentProfileCui                   DistributionProfileItem = "xccdf_org.ssgproject.content_profile_cui"
	XccdfOrgSsgprojectContentProfileE8                    DistributionProfileItem = "xccdf_org.ssgproject.content_profile_e8"
	XccdfOrgSsgprojectContentProfileHipaa                 DistributionProfileItem = "xccdf_org.ssgproject.content_profile_hipaa"
	XccdfOrgSsgprojectContentProfileIsmO                  DistributionProfileItem = "xccdf_org.ssgproject.content_profile_ism_o"
	XccdfOrgSsgprojectContentProfileOspp                  DistributionProfileItem = "xccdf_org.ssgproject.content_profile_ospp"
	XccdfOrgSsgprojectContentProfilePciDss                DistributionProfileItem = "xccdf_org.ssgproject.content_profile_pci-dss"
	XccdfOrgSsgprojectContentProfileStandard              DistributionProfileItem = "xccdf_org.ssgproject.content_profile_standard"
	XccdfOrgSsgprojectContentProfileStig                  DistributionProfileItem = "xccdf_org.ssgproject.content_profile_stig"
	XccdfOrgSsgprojectContentProfileStigGui               DistributionProfileItem = "xccdf_org.ssgproject.content_profile_stig_gui"
)

// Defines values for Distributions.
const (
	Centos8      Distributions = "centos-8"
	Centos9      Distributions = "centos-9"
	Fedora37     Distributions = "fedora-37"
	Fedora38     Distributions = "fedora-38"
	Fedora39     Distributions = "fedora-39"
	Fedora40     Distributions = "fedora-40"
	Rhel8        Distributions = "rhel-8"
	Rhel84       Distributions = "rhel-84"
	Rhel85       Distributions = "rhel-85"
	Rhel86       Distributions = "rhel-86"
	Rhel87       Distributions = "rhel-87"
	Rhel88       Distributions = "rhel-88"
	Rhel89       Distributions = "rhel-89"
	Rhel8Nightly Distributions = "rhel-8-nightly"
	Rhel9        Distributions = "rhel-9"
	Rhel90       Distributions = "rhel-90"
	Rhel91       Distributions = "rhel-91"
	Rhel92       Distributions = "rhel-92"
	Rhel93       Distributions = "rhel-93"
	Rhel9Nightly Distributions = "rhel-9-nightly"
)

// Defines values for ImageRequestArchitecture.
const (
	ImageRequestArchitectureAarch64 ImageRequestArchitecture = "aarch64"
	ImageRequestArchitectureX8664   ImageRequestArchitecture = "x86_64"
)

// Defines values for ImageStatusStatus.
const (
	ImageStatusStatusBuilding    ImageStatusStatus = "building"
	ImageStatusStatusFailure     ImageStatusStatus = "failure"
	ImageStatusStatusPending     ImageStatusStatus = "pending"
	ImageStatusStatusRegistering ImageStatusStatus = "registering"
	ImageStatusStatusSuccess     ImageStatusStatus = "success"
	ImageStatusStatusUploading   ImageStatusStatus = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAmi               ImageTypes = "ami"
	ImageTypesAws               ImageTypes = "aws"
	ImageTypesAzure             ImageTypes = "azure"
	ImageTypesEdgeCommit        ImageTypes = "edge-commit"
	ImageTypesEdgeInstaller     ImageTypes = "edge-installer"
	ImageTypesGcp               ImageTypes = "gcp"
	ImageTypesGuestImage        ImageTypes = "guest-image"
	ImageTypesImageInstaller    ImageTypes = "image-installer"
	ImageTypesOci               ImageTypes = "oci"
	ImageTypesRhelEdgeCommit    ImageTypes = "rhel-edge-commit"
	ImageTypesRhelEdgeInstaller ImageTypes = "rhel-edge-installer"
	ImageTypesVhd               ImageTypes = "vhd"
	ImageTypesVsphere           ImageTypes = "vsphere"
	ImageTypesVsphereOva        ImageTypes = "vsphere-ova"
	ImageTypesWsl               ImageTypes = "wsl"
)

// Defines values for UploadStatusStatus.
const (
	Failure UploadStatusStatus = "failure"
	Pending UploadStatusStatus = "pending"
	Running UploadStatusStatus = "running"
	Success UploadStatusStatus = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws              UploadTypes = "aws"
	UploadTypesAwsS3            UploadTypes = "aws.s3"
	UploadTypesAzure            UploadTypes = "azure"
	UploadTypesGcp              UploadTypes = "gcp"
	UploadTypesOciObjectstorage UploadTypes = "oci.objectstorage"
)

// Defines values for GetPackagesParamsArchitecture.
const (
	GetPackagesParamsArchitectureAarch64 GetPackagesParamsArchitecture = "aarch64"
	GetPackagesParamsArchitectureX8664   GetPackagesParamsArchitecture = "x86_64"
)

// AWSEC2Clone defines model for AWSEC2Clone.
type AWSEC2Clone struct {
	// Region A region as described in
	// https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-regions
	Region string `json:"region"`

	// ShareWithAccounts An array of AWS account IDs as described in
	// https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions = map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`

	// Repositories Base repositories for the given distribution and architecture.
	Repositories []Repository `json:"repositories"`
}

// Architectures defines model for Architectures.
type Architectures = []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {
	// ImageName Name of the created image.
	// Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens.
	// The total length is limited to 60 characters.
	ImageName *string `json:"image_name,omitempty"`

	// ResourceGroup Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// SourceId ID of the source that will be used to resolve the tenant and subscription IDs.
	// Do not provide a tenant_id or subscription_id when providing a source_id.
	SourceId *string `json:"source_id,omitempty"`

	// SubscriptionId ID of subscription where the image should be uploaded.
	// When providing a subscription_id, also be sure to provide a tenant_id and do not include a source_id.
	SubscriptionId *string `json:"subscription_id,omitempty"`

	// TenantId ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	// When providing a tenant_id, also be sure to provide a subscription_id and do not include a source_id.
	TenantId *string `json:"tenant_id,omitempty"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// BlueprintItem defines model for BlueprintItem.
type BlueprintItem struct {
	Description    string             `json:"description"`
	Id             openapi_types.UUID `json:"id"`
	LastModifiedAt string             `json:"last_modified_at"`
	Name           string             `json:"name"`
	Version        int                `json:"version"`
}

// BlueprintResponse defines model for BlueprintResponse.
type BlueprintResponse struct {
	Customizations Customizations `json:"customizations"`
	Description    string         `json:"description"`

	// Distribution List of all distributions that image builder supports. A user might not have access to
	// restricted distributions.
	//
	// Restricted distributions include the RHEL nightlies and the Fedora distributions.
	Distribution Distributions      `json:"distribution"`
	Id           openapi_types.UUID `json:"id"`

	// ImageRequests Array of image requests. Having more image requests in a single blueprint is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
	Name          string         `json:"name"`
}

// BlueprintsResponse defines model for BlueprintsResponse.
type BlueprintsResponse struct {
	Data  []BlueprintItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ClientId defines model for ClientId.
type ClientId string

// CloneRequest defines model for CloneRequest.
type CloneRequest struct {
	union json.RawMessage
}

// CloneResponse defines model for CloneResponse.
type CloneResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// CloneStatusResponse defines model for CloneStatusResponse.
type CloneStatusResponse struct {
	ComposeId *openapi_types.UUID         `json:"compose_id,omitempty"`
	Options   CloneStatusResponse_Options `json:"options"`
	Status    CloneStatusResponseStatus   `json:"status"`
	Type      UploadTypes                 `json:"type"`
}

// CloneStatusResponse_Options defines model for CloneStatusResponse.Options.
type CloneStatusResponse_Options struct {
	union json.RawMessage
}

// CloneStatusResponseStatus defines model for CloneStatusResponse.Status.
type CloneStatusResponseStatus string

// ClonesResponse defines model for ClonesResponse.
type ClonesResponse struct {
	Data  []ClonesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ClonesResponseItem defines model for ClonesResponseItem.
type ClonesResponseItem struct {
	// ComposeId UUID of the parent compose of the clone
	ComposeId openapi_types.UUID `json:"compose_id"`
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Request   CloneRequest       `json:"request"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// OstreeCommit ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Packages Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	ClientId       *ClientId       `json:"client_id,omitempty"`
	Customizations *Customizations `json:"customizations,omitempty"`

	// Distribution List of all distributions that image builder supports. A user might not have access to
	// restricted distributions.
	//
	// Restricted distributions include the RHEL nightlies and the Fedora distributions.
	Distribution     Distributions `json:"distribution"`
	ImageDescription *string       `json:"image_description,omitempty"`
	ImageName        *string       `json:"image_name,omitempty"`

	// ImageRequests Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus    `json:"image_status"`
	Request     ComposeRequest `json:"request"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	BlueprintId      *openapi_types.UUID `json:"blueprint_id"`
	BlueprintVersion *int                `json:"blueprint_version"`
	ClientId         *ClientId           `json:"client_id,omitempty"`
	CreatedAt        string              `json:"created_at"`
	Id               openapi_types.UUID  `json:"id"`
	ImageName        *string             `json:"image_name,omitempty"`
	Request          ComposeRequest      `json:"request"`
}

// Container defines model for Container.
type Container struct {
	// Name Name to use for the container from the image
	Name *string `json:"name,omitempty"`

	// Source Reference to the container to embed
	Source string `json:"source"`

	// TlsVerify Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// CreateBlueprintRequest defines model for CreateBlueprintRequest.
type CreateBlueprintRequest struct {
	Customizations Customizations `json:"customizations"`
	Description    string         `json:"description"`

	// Distribution List of all distributions that image builder supports. A user might not have access to
	// restricted distributions.
	//
	// Restricted distributions include the RHEL nightlies and the Fedora distributions.
	Distribution Distributions `json:"distribution"`

	// ImageRequests Array of image requests. Having more image requests in a single blueprint is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
	Name          string         `json:"name"`
}

// CreateBlueprintResponse defines model for CreateBlueprintResponse.
type CreateBlueprintResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// CustomRepository Repository configuration for custom repositories.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above. Id is required.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg *bool     `json:"check_repo_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`

	// Gpgkey GPG key used to sign packages in this repository. Can be a gpg key or a URL
	Gpgkey         *[]string `json:"gpgkey,omitempty"`
	Id             string    `json:"id"`
	Metalink       *string   `json:"metalink,omitempty"`
	Mirrorlist     *string   `json:"mirrorlist,omitempty"`
	ModuleHotfixes *bool     `json:"module_hotfixes,omitempty"`
	Name           *string   `json:"name,omitempty"`
	Priority       *int      `json:"priority,omitempty"`
	SslVerify      *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Containers         *[]Container        `json:"containers,omitempty"`
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Directories        *[]Directory        `json:"directories,omitempty"`

	// Fdo FIDO device onboard configuration
	Fdo        *FDO          `json:"fdo,omitempty"`
	Files      *[]File       `json:"files,omitempty"`
	Filesystem *[]Filesystem `json:"filesystem,omitempty"`

	// Fips System FIPS mode setup
	Fips *FIPS `json:"fips,omitempty"`

	// Firewall Firewalld configuration
	Firewall *FirewallCustomization `json:"firewall,omitempty"`

	// Groups List of groups to create
	Groups *[]Group `json:"groups,omitempty"`

	// Hostname Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// InstallationDevice Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string `json:"installation_device,omitempty"`
	Kernel             *Kernel `json:"kernel,omitempty"`

	// Locale Locale configuration
	Locale   *Locale   `json:"locale,omitempty"`
	Openscap *OpenSCAP `json:"openscap,omitempty"`
	Packages *[]string `json:"packages,omitempty"`

	// PartitioningMode Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode    *CustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`
	PayloadRepositories *[]Repository                   `json:"payload_repositories,omitempty"`
	Services            *Services                       `json:"services,omitempty"`
	Subscription        *Subscription                   `json:"subscription,omitempty"`

	// Timezone Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`

	// Users list of users that a customer can add, also specifying their respective groups and SSH keys
	Users *[]User `json:"users,omitempty"`
}

// CustomizationsPartitioningMode Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type CustomizationsPartitioningMode string

// Directory A custom directory to create in the final artifact.
type Directory struct {
	// EnsureParents Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group Group of the directory as a group name or a gid
	Group *Directory_Group `json:"group,omitempty"`

	// Mode Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path Path to the directory
	Path string `json:"path"`

	// User Owner of the directory as a user name or a uid
	User *Directory_User `json:"user,omitempty"`
}

// DirectoryGroup0 defines model for .
type DirectoryGroup0 = string

// DirectoryGroup1 defines model for .
type DirectoryGroup1 = int

// Directory_Group Group of the directory as a group name or a gid
type Directory_Group struct {
	union json.RawMessage
}

// DirectoryUser0 defines model for .
type DirectoryUser0 = string

// DirectoryUser1 defines model for .
type DirectoryUser1 = int

// Directory_User Owner of the directory as a user name or a uid
type Directory_User struct {
	union json.RawMessage
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// DistributionProfileItem defines model for DistributionProfileItem.
type DistributionProfileItem string

// DistributionProfileResponse List of profiles for a given distribution
type DistributionProfileResponse = []DistributionProfileItem

// Distributions List of all distributions that image builder supports. A user might not have access to
// restricted distributions.
//
// Restricted distributions include the RHEL nightlies and the Fedora distributions.
type Distributions string

// DistributionsResponse List of distributions this user is allowed to build.
type DistributionsResponse = []DistributionItem

// FDO FIDO device onboard configuration
type FDO struct {
	DiunPubKeyHash         *string `json:"diun_pub_key_hash,omitempty"`
	DiunPubKeyInsecure     *string `json:"diun_pub_key_insecure,omitempty"`
	DiunPubKeyRootCerts    *string `json:"diun_pub_key_root_certs,omitempty"`
	ManufacturingServerUrl *string `json:"manufacturing_server_url,omitempty"`
}

// FIPS System FIPS mode setup
type FIPS struct {
	// Enabled Enables the system FIPS mode
	Enabled *bool `json:"enabled,omitempty"`
}

// File A custom file to create in the final artifact.
type File struct {
	// Data Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// EnsureParents Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group Group of the file as a gid or a group name
	Group *File_Group `json:"group,omitempty"`

	// Mode Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path Path to the file
	Path string `json:"path"`

	// User Owner of the file as a uid or a user name
	User *File_User `json:"user,omitempty"`
}

// FileGroup0 defines model for .
type FileGroup0 = string

// FileGroup1 defines model for .
type FileGroup1 = int

// File_Group Group of the file as a gid or a group name
type File_Group struct {
	union json.RawMessage
}

// FileUser0 defines model for .
type FileUser0 = string

// FileUser1 defines model for .
type FileUser1 = int

// File_User Owner of the file as a uid or a user name
type File_User struct {
	union json.RawMessage
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// MinSize size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// FirewallCustomization Firewalld configuration
type FirewallCustomization struct {
	// Ports List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Services Firewalld services to enable or disable
	Services *struct {
		// Disabled List of services to disable
		Disabled *[]string `json:"disabled,omitempty"`

		// Enabled List of services to enable
		Enabled *[]string `json:"enabled,omitempty"`
	} `json:"services,omitempty"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {
	// ShareWithAccounts List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// Group defines model for Group.
type Group struct {
	// Gid Group id of the group to create (optional)
	Gid *int `json:"gid,omitempty"`

	// Name Name of the group to create
	Name string `json:"name"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// Ignition Ignition configuration
type Ignition struct {
	Embedded  *IgnitionEmbedded  `json:"embedded,omitempty"`
	Firstboot *IgnitionFirstboot `json:"firstboot,omitempty"`
}

// IgnitionEmbedded defines model for IgnitionEmbedded.
type IgnitionEmbedded struct {
	Config string `json:"config"`
}

// IgnitionFirstboot defines model for IgnitionFirstboot.
type IgnitionFirstboot struct {
	// Url Provisioning URL
	Url string `json:"url"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	// Architecture CPU architecture of the image, x86_64 and aarch64 are currently supported.
	Architecture ImageRequestArchitecture `json:"architecture"`
	ImageType    ImageTypes               `json:"image_type"`
	Ostree       *OSTree                  `json:"ostree,omitempty"`

	// Size Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size          *uint64       `json:"size,omitempty"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// ImageRequestArchitecture CPU architecture of the image, x86_64 and aarch64 are currently supported.
type ImageRequestArchitecture string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusStatus   `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusStatus defines model for ImageStatus.Status.
type ImageStatusStatus string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// Kernel defines model for Kernel.
type Kernel struct {
	// Append Appends arguments to the bootloader kernel command line
	Append *string `json:"append,omitempty"`

	// Name Name of the kernel to use
	Name *string `json:"name,omitempty"`
}

// Locale Locale configuration
type Locale struct {
	// Keyboard Sets the keyboard layout
	Keyboard *string `json:"keyboard,omitempty"`

	// Languages List of locales to be installed, the first one becomes primary, subsequent ones are secondary
	Languages *[]string `json:"languages,omitempty"`
}

// OCIUploadRequestOptions defines model for OCIUploadRequestOptions.
type OCIUploadRequestOptions = map[string]interface{}

// OCIUploadStatus defines model for OCIUploadStatus.
type OCIUploadStatus struct {
	Url string `json:"url"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// Contenturl A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Parent Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Rhsm Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	// ProfileDescription The longform policy description
	ProfileDescription *string `json:"profile_description,omitempty"`

	// ProfileId The policy reference ID
	ProfileId string `json:"profile_id"`

	// ProfileName The policy type
	ProfileName *string `json:"profile_name,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// CheckRepoGpg Enables gpg verification of the repository metadata
	CheckRepoGpg   *bool   `json:"check_repo_gpg,omitempty"`
	Gpgkey         *string `json:"gpgkey,omitempty"`
	IgnoreSsl      *bool   `json:"ignore_ssl,omitempty"`
	Metalink       *string `json:"metalink,omitempty"`
	Mirrorlist     *string `json:"mirrorlist,omitempty"`
	ModuleHotfixes *bool   `json:"module_hotfixes,omitempty"`
	Rhsm           bool    `json:"rhsm"`
}

// Services defines model for Services.
type Services struct {
	// Disabled List of services to disable by default
	Disabled *[]string `json:"disabled,omitempty"`

	// Enabled List of services to enable by default
	Enabled *[]string `json:"enabled,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`

	// Rhc Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server-url"`
}

// Timezone Timezone configuration
type Timezone struct {
	// Ntpservers List of ntp servers
	Ntpservers *[]string `json:"ntpservers,omitempty"`

	// Timezone Name of the timezone, defaults to UTC
	Timezone *string `json:"timezone,omitempty"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options UploadRequest_Options `json:"options"`
	Type    UploadTypes           `json:"type"`
}

// UploadRequest_Options defines model for UploadRequest.Options.
type UploadRequest_Options struct {
	union json.RawMessage
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options UploadStatus_Options `json:"options"`
	Status  UploadStatusStatus   `json:"status"`
	Type    UploadTypes          `json:"type"`
}

// UploadStatus_Options defines model for UploadStatus.Options.
type UploadStatus_Options struct {
	union json.RawMessage
}

// UploadStatusStatus defines model for UploadStatus.Status.
type UploadStatusStatus string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Name   string `json:"name"`
	SshKey string `json:"ssh_key"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {
	// Limit max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// IgnoreImageTypes Filter the composes on image type. The filter is optional and can be specified multiple times.
	IgnoreImageTypes *[]ImageTypes `form:"ignoreImageTypes,omitempty" json:"ignoreImageTypes,omitempty"`
}

// GetComposeClonesParams defines parameters for GetComposeClones.
type GetComposeClonesParams struct {
	// Limit max amount of clones, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset clones page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetBlueprintsParams defines parameters for GetBlueprints.
type GetBlueprintsParams struct {
	// Search search for blueprints by name or description
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Limit max amount of blueprints, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset blueprint page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetBlueprintComposesParams defines parameters for GetBlueprintComposes.
type GetBlueprintComposesParams struct {
	// BlueprintVersion Filter by a specific version of the Blueprint we want to fetch composes for
	BlueprintVersion *int `form:"blueprint_version,omitempty" json:"blueprint_version,omitempty"`

	// Limit max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// IgnoreImageTypes Filter the composes on image type. The filter is optional and can be specified multiple times.
	IgnoreImageTypes *[]ImageTypes `form:"ignoreImageTypes,omitempty" json:"ignoreImageTypes,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	// Distribution distribution to look up packages for
	Distribution Distributions `form:"distribution" json:"distribution"`

	// Architecture architecture to look up packages for
	Architecture GetPackagesParamsArchitecture `form:"architecture" json:"architecture"`

	// Search packages to look for
	Search string `form:"search" json:"search"`

	// Limit max amount of packages, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset packages page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParamsArchitecture defines parameters for GetPackages.
type GetPackagesParamsArchitecture string

// ComposeImageJSONRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody = ComposeRequest

// CloneComposeJSONRequestBody defines body for CloneCompose for application/json ContentType.
type CloneComposeJSONRequestBody = CloneRequest

// CreateBlueprintJSONRequestBody defines body for CreateBlueprint for application/json ContentType.
type CreateBlueprintJSONRequestBody = CreateBlueprintRequest

// UpdateBlueprintJSONRequestBody defines body for UpdateBlueprint for application/json ContentType.
type UpdateBlueprintJSONRequestBody = CreateBlueprintRequest

// AsAWSEC2Clone returns the union data inside the CloneRequest as a AWSEC2Clone
func (t CloneRequest) AsAWSEC2Clone() (AWSEC2Clone, error) {
	var body AWSEC2Clone
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSEC2Clone overwrites any union data inside the CloneRequest as the provided AWSEC2Clone
func (t *CloneRequest) FromAWSEC2Clone(v AWSEC2Clone) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSEC2Clone performs a merge with any union data inside the CloneRequest, using the provided AWSEC2Clone
func (t *CloneRequest) MergeAWSEC2Clone(v AWSEC2Clone) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t CloneRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CloneRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAWSUploadStatus returns the union data inside the CloneStatusResponse_Options as a AWSUploadStatus
func (t CloneStatusResponse_Options) AsAWSUploadStatus() (AWSUploadStatus, error) {
	var body AWSUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSUploadStatus overwrites any union data inside the CloneStatusResponse_Options as the provided AWSUploadStatus
func (t *CloneStatusResponse_Options) FromAWSUploadStatus(v AWSUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSUploadStatus performs a merge with any union data inside the CloneStatusResponse_Options, using the provided AWSUploadStatus
func (t *CloneStatusResponse_Options) MergeAWSUploadStatus(v AWSUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAWSS3UploadStatus returns the union data inside the CloneStatusResponse_Options as a AWSS3UploadStatus
func (t CloneStatusResponse_Options) AsAWSS3UploadStatus() (AWSS3UploadStatus, error) {
	var body AWSS3UploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSS3UploadStatus overwrites any union data inside the CloneStatusResponse_Options as the provided AWSS3UploadStatus
func (t *CloneStatusResponse_Options) FromAWSS3UploadStatus(v AWSS3UploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSS3UploadStatus performs a merge with any union data inside the CloneStatusResponse_Options, using the provided AWSS3UploadStatus
func (t *CloneStatusResponse_Options) MergeAWSS3UploadStatus(v AWSS3UploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsGCPUploadStatus returns the union data inside the CloneStatusResponse_Options as a GCPUploadStatus
func (t CloneStatusResponse_Options) AsGCPUploadStatus() (GCPUploadStatus, error) {
	var body GCPUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGCPUploadStatus overwrites any union data inside the CloneStatusResponse_Options as the provided GCPUploadStatus
func (t *CloneStatusResponse_Options) FromGCPUploadStatus(v GCPUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGCPUploadStatus performs a merge with any union data inside the CloneStatusResponse_Options, using the provided GCPUploadStatus
func (t *CloneStatusResponse_Options) MergeGCPUploadStatus(v GCPUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAzureUploadStatus returns the union data inside the CloneStatusResponse_Options as a AzureUploadStatus
func (t CloneStatusResponse_Options) AsAzureUploadStatus() (AzureUploadStatus, error) {
	var body AzureUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureUploadStatus overwrites any union data inside the CloneStatusResponse_Options as the provided AzureUploadStatus
func (t *CloneStatusResponse_Options) FromAzureUploadStatus(v AzureUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureUploadStatus performs a merge with any union data inside the CloneStatusResponse_Options, using the provided AzureUploadStatus
func (t *CloneStatusResponse_Options) MergeAzureUploadStatus(v AzureUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsOCIUploadStatus returns the union data inside the CloneStatusResponse_Options as a OCIUploadStatus
func (t CloneStatusResponse_Options) AsOCIUploadStatus() (OCIUploadStatus, error) {
	var body OCIUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOCIUploadStatus overwrites any union data inside the CloneStatusResponse_Options as the provided OCIUploadStatus
func (t *CloneStatusResponse_Options) FromOCIUploadStatus(v OCIUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOCIUploadStatus performs a merge with any union data inside the CloneStatusResponse_Options, using the provided OCIUploadStatus
func (t *CloneStatusResponse_Options) MergeOCIUploadStatus(v OCIUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t CloneStatusResponse_Options) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CloneStatusResponse_Options) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDirectoryGroup0 returns the union data inside the Directory_Group as a DirectoryGroup0
func (t Directory_Group) AsDirectoryGroup0() (DirectoryGroup0, error) {
	var body DirectoryGroup0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDirectoryGroup0 overwrites any union data inside the Directory_Group as the provided DirectoryGroup0
func (t *Directory_Group) FromDirectoryGroup0(v DirectoryGroup0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDirectoryGroup0 performs a merge with any union data inside the Directory_Group, using the provided DirectoryGroup0
func (t *Directory_Group) MergeDirectoryGroup0(v DirectoryGroup0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsDirectoryGroup1 returns the union data inside the Directory_Group as a DirectoryGroup1
func (t Directory_Group) AsDirectoryGroup1() (DirectoryGroup1, error) {
	var body DirectoryGroup1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDirectoryGroup1 overwrites any union data inside the Directory_Group as the provided DirectoryGroup1
func (t *Directory_Group) FromDirectoryGroup1(v DirectoryGroup1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDirectoryGroup1 performs a merge with any union data inside the Directory_Group, using the provided DirectoryGroup1
func (t *Directory_Group) MergeDirectoryGroup1(v DirectoryGroup1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t Directory_Group) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Directory_Group) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDirectoryUser0 returns the union data inside the Directory_User as a DirectoryUser0
func (t Directory_User) AsDirectoryUser0() (DirectoryUser0, error) {
	var body DirectoryUser0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDirectoryUser0 overwrites any union data inside the Directory_User as the provided DirectoryUser0
func (t *Directory_User) FromDirectoryUser0(v DirectoryUser0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDirectoryUser0 performs a merge with any union data inside the Directory_User, using the provided DirectoryUser0
func (t *Directory_User) MergeDirectoryUser0(v DirectoryUser0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsDirectoryUser1 returns the union data inside the Directory_User as a DirectoryUser1
func (t Directory_User) AsDirectoryUser1() (DirectoryUser1, error) {
	var body DirectoryUser1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDirectoryUser1 overwrites any union data inside the Directory_User as the provided DirectoryUser1
func (t *Directory_User) FromDirectoryUser1(v DirectoryUser1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDirectoryUser1 performs a merge with any union data inside the Directory_User, using the provided DirectoryUser1
func (t *Directory_User) MergeDirectoryUser1(v DirectoryUser1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t Directory_User) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Directory_User) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFileGroup0 returns the union data inside the File_Group as a FileGroup0
func (t File_Group) AsFileGroup0() (FileGroup0, error) {
	var body FileGroup0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFileGroup0 overwrites any union data inside the File_Group as the provided FileGroup0
func (t *File_Group) FromFileGroup0(v FileGroup0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFileGroup0 performs a merge with any union data inside the File_Group, using the provided FileGroup0
func (t *File_Group) MergeFileGroup0(v FileGroup0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsFileGroup1 returns the union data inside the File_Group as a FileGroup1
func (t File_Group) AsFileGroup1() (FileGroup1, error) {
	var body FileGroup1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFileGroup1 overwrites any union data inside the File_Group as the provided FileGroup1
func (t *File_Group) FromFileGroup1(v FileGroup1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFileGroup1 performs a merge with any union data inside the File_Group, using the provided FileGroup1
func (t *File_Group) MergeFileGroup1(v FileGroup1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t File_Group) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *File_Group) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFileUser0 returns the union data inside the File_User as a FileUser0
func (t File_User) AsFileUser0() (FileUser0, error) {
	var body FileUser0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFileUser0 overwrites any union data inside the File_User as the provided FileUser0
func (t *File_User) FromFileUser0(v FileUser0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFileUser0 performs a merge with any union data inside the File_User, using the provided FileUser0
func (t *File_User) MergeFileUser0(v FileUser0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsFileUser1 returns the union data inside the File_User as a FileUser1
func (t File_User) AsFileUser1() (FileUser1, error) {
	var body FileUser1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFileUser1 overwrites any union data inside the File_User as the provided FileUser1
func (t *File_User) FromFileUser1(v FileUser1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFileUser1 performs a merge with any union data inside the File_User, using the provided FileUser1
func (t *File_User) MergeFileUser1(v FileUser1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t File_User) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *File_User) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAWSUploadRequestOptions returns the union data inside the UploadRequest_Options as a AWSUploadRequestOptions
func (t UploadRequest_Options) AsAWSUploadRequestOptions() (AWSUploadRequestOptions, error) {
	var body AWSUploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSUploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided AWSUploadRequestOptions
func (t *UploadRequest_Options) FromAWSUploadRequestOptions(v AWSUploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSUploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided AWSUploadRequestOptions
func (t *UploadRequest_Options) MergeAWSUploadRequestOptions(v AWSUploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAWSS3UploadRequestOptions returns the union data inside the UploadRequest_Options as a AWSS3UploadRequestOptions
func (t UploadRequest_Options) AsAWSS3UploadRequestOptions() (AWSS3UploadRequestOptions, error) {
	var body AWSS3UploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSS3UploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided AWSS3UploadRequestOptions
func (t *UploadRequest_Options) FromAWSS3UploadRequestOptions(v AWSS3UploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSS3UploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided AWSS3UploadRequestOptions
func (t *UploadRequest_Options) MergeAWSS3UploadRequestOptions(v AWSS3UploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsGCPUploadRequestOptions returns the union data inside the UploadRequest_Options as a GCPUploadRequestOptions
func (t UploadRequest_Options) AsGCPUploadRequestOptions() (GCPUploadRequestOptions, error) {
	var body GCPUploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGCPUploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided GCPUploadRequestOptions
func (t *UploadRequest_Options) FromGCPUploadRequestOptions(v GCPUploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGCPUploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided GCPUploadRequestOptions
func (t *UploadRequest_Options) MergeGCPUploadRequestOptions(v GCPUploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAzureUploadRequestOptions returns the union data inside the UploadRequest_Options as a AzureUploadRequestOptions
func (t UploadRequest_Options) AsAzureUploadRequestOptions() (AzureUploadRequestOptions, error) {
	var body AzureUploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureUploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided AzureUploadRequestOptions
func (t *UploadRequest_Options) FromAzureUploadRequestOptions(v AzureUploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureUploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided AzureUploadRequestOptions
func (t *UploadRequest_Options) MergeAzureUploadRequestOptions(v AzureUploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsOCIUploadRequestOptions returns the union data inside the UploadRequest_Options as a OCIUploadRequestOptions
func (t UploadRequest_Options) AsOCIUploadRequestOptions() (OCIUploadRequestOptions, error) {
	var body OCIUploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOCIUploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided OCIUploadRequestOptions
func (t *UploadRequest_Options) FromOCIUploadRequestOptions(v OCIUploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOCIUploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided OCIUploadRequestOptions
func (t *UploadRequest_Options) MergeOCIUploadRequestOptions(v OCIUploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t UploadRequest_Options) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UploadRequest_Options) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAWSUploadStatus returns the union data inside the UploadStatus_Options as a AWSUploadStatus
func (t UploadStatus_Options) AsAWSUploadStatus() (AWSUploadStatus, error) {
	var body AWSUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSUploadStatus overwrites any union data inside the UploadStatus_Options as the provided AWSUploadStatus
func (t *UploadStatus_Options) FromAWSUploadStatus(v AWSUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSUploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided AWSUploadStatus
func (t *UploadStatus_Options) MergeAWSUploadStatus(v AWSUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAWSS3UploadStatus returns the union data inside the UploadStatus_Options as a AWSS3UploadStatus
func (t UploadStatus_Options) AsAWSS3UploadStatus() (AWSS3UploadStatus, error) {
	var body AWSS3UploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSS3UploadStatus overwrites any union data inside the UploadStatus_Options as the provided AWSS3UploadStatus
func (t *UploadStatus_Options) FromAWSS3UploadStatus(v AWSS3UploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSS3UploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided AWSS3UploadStatus
func (t *UploadStatus_Options) MergeAWSS3UploadStatus(v AWSS3UploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsGCPUploadStatus returns the union data inside the UploadStatus_Options as a GCPUploadStatus
func (t UploadStatus_Options) AsGCPUploadStatus() (GCPUploadStatus, error) {
	var body GCPUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGCPUploadStatus overwrites any union data inside the UploadStatus_Options as the provided GCPUploadStatus
func (t *UploadStatus_Options) FromGCPUploadStatus(v GCPUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGCPUploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided GCPUploadStatus
func (t *UploadStatus_Options) MergeGCPUploadStatus(v GCPUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAzureUploadStatus returns the union data inside the UploadStatus_Options as a AzureUploadStatus
func (t UploadStatus_Options) AsAzureUploadStatus() (AzureUploadStatus, error) {
	var body AzureUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureUploadStatus overwrites any union data inside the UploadStatus_Options as the provided AzureUploadStatus
func (t *UploadStatus_Options) FromAzureUploadStatus(v AzureUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureUploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided AzureUploadStatus
func (t *UploadStatus_Options) MergeAzureUploadStatus(v AzureUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsOCIUploadStatus returns the union data inside the UploadStatus_Options as a OCIUploadStatus
func (t UploadStatus_Options) AsOCIUploadStatus() (OCIUploadStatus, error) {
	var body OCIUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOCIUploadStatus overwrites any union data inside the UploadStatus_Options as the provided OCIUploadStatus
func (t *UploadStatus_Options) FromOCIUploadStatus(v OCIUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOCIUploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided OCIUploadStatus
func (t *UploadStatus_Options) MergeOCIUploadStatus(v OCIUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t UploadStatus_Options) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UploadStatus_Options) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution Distributions) error
	// get status of a compose clone
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id openapi_types.UUID) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// delete a compose
	// (DELETE /composes/{composeId})
	DeleteCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId openapi_types.UUID) error
	// clone a compose
	// (POST /composes/{composeId}/clone)
	CloneCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get clones of a compose
	// (GET /composes/{composeId}/clones)
	GetComposeClones(ctx echo.Context, composeId openapi_types.UUID, params GetComposeClonesParams) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId openapi_types.UUID) error
	// get the distributions available to this user
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get a collection of blueprints
	// (GET /experimental/blueprints)
	GetBlueprints(ctx echo.Context, params GetBlueprintsParams) error
	// create blueprint
	// (POST /experimental/blueprints)
	CreateBlueprint(ctx echo.Context) error
	// delete a blueprint
	// (DELETE /experimental/blueprints/{id})
	DeleteBlueprint(ctx echo.Context, id openapi_types.UUID) error
	// get detail of a blueprint
	// (GET /experimental/blueprints/{id})
	GetBlueprint(ctx echo.Context, id openapi_types.UUID) error
	// update blueprint
	// (PUT /experimental/blueprints/{id})
	UpdateBlueprint(ctx echo.Context, id openapi_types.UUID) error
	// create new compose from blueprint
	// (POST /experimental/blueprints/{id}/compose)
	ComposeBlueprint(ctx echo.Context, id openapi_types.UUID) error
	// get composes associated with a blueprint
	// (GET /experimental/blueprints/{id}/composes)
	GetBlueprintComposes(ctx echo.Context, id openapi_types.UUID, params GetBlueprintComposesParams) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error
	// get the available profiles for a given distribution. This is a temporary endpoint meant to be removed soon.
	// (GET /oscap/{distribution}/profiles)
	GetOscapProfiles(ctx echo.Context, distribution Distributions) error
	// get the customizations for a given distribution and profile. This is a temporary endpoint meant to be removed soon.
	// (GET /oscap/{distribution}/{profile}/customizations)
	GetOscapCustomizations(ctx echo.Context, distribution Distributions, profile DistributionProfileItem) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution Distributions

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "ignoreImageTypes" -------------

	err = runtime.BindQueryParameter("form", true, false, "ignoreImageTypes", ctx.QueryParams(), &params.IgnoreImageTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ignoreImageTypes: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// DeleteCompose converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompose(ctx, composeId)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// CloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) CloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CloneCompose(ctx, composeId)
	return err
}

// GetComposeClones converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeClones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposeClonesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeClones(ctx, composeId, params)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetBlueprints converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlueprints(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlueprintsParams
	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlueprints(ctx, params)
	return err
}

// CreateBlueprint converts echo context to params.
func (w *ServerInterfaceWrapper) CreateBlueprint(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateBlueprint(ctx)
	return err
}

// DeleteBlueprint converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteBlueprint(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteBlueprint(ctx, id)
	return err
}

// GetBlueprint converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlueprint(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlueprint(ctx, id)
	return err
}

// UpdateBlueprint converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateBlueprint(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateBlueprint(ctx, id)
	return err
}

// ComposeBlueprint converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeBlueprint(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeBlueprint(ctx, id)
	return err
}

// GetBlueprintComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlueprintComposes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlueprintComposesParams
	// ------------- Optional query parameter "blueprint_version" -------------

	err = runtime.BindQueryParameter("form", true, false, "blueprint_version", ctx.QueryParams(), &params.BlueprintVersion)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter blueprint_version: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "ignoreImageTypes" -------------

	err = runtime.BindQueryParameter("form", true, false, "ignoreImageTypes", ctx.QueryParams(), &params.IgnoreImageTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ignoreImageTypes: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlueprintComposes(ctx, id, params)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetOscapProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) GetOscapProfiles(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution Distributions

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOscapProfiles(ctx, distribution)
	return err
}

// GetOscapCustomizations converts echo context to params.
func (w *ServerInterfaceWrapper) GetOscapCustomizations(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution Distributions

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Path parameter "profile" -------------
	var profile DistributionProfileItem

	err = runtime.BindStyledParameterWithLocation("simple", false, "profile", runtime.ParamLocationPath, ctx.Param("profile"), &profile)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter profile: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOscapCustomizations(ctx, distribution, profile)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/architectures/:distribution", wrapper.GetArchitectures)
	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.ComposeImage)
	router.GET(baseURL+"/composes", wrapper.GetComposes)
	router.DELETE(baseURL+"/composes/:composeId", wrapper.DeleteCompose)
	router.GET(baseURL+"/composes/:composeId", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:composeId/clone", wrapper.CloneCompose)
	router.GET(baseURL+"/composes/:composeId/clones", wrapper.GetComposeClones)
	router.GET(baseURL+"/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/distributions", wrapper.GetDistributions)
	router.GET(baseURL+"/experimental/blueprints", wrapper.GetBlueprints)
	router.POST(baseURL+"/experimental/blueprints", wrapper.CreateBlueprint)
	router.DELETE(baseURL+"/experimental/blueprints/:id", wrapper.DeleteBlueprint)
	router.GET(baseURL+"/experimental/blueprints/:id", wrapper.GetBlueprint)
	router.PUT(baseURL+"/experimental/blueprints/:id", wrapper.UpdateBlueprint)
	router.POST(baseURL+"/experimental/blueprints/:id/compose", wrapper.ComposeBlueprint)
	router.GET(baseURL+"/experimental/blueprints/:id/composes", wrapper.GetBlueprintComposes)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)
	router.GET(baseURL+"/oscap/:distribution/profiles", wrapper.GetOscapProfiles)
	router.GET(baseURL+"/oscap/:distribution/:profile/customizations", wrapper.GetOscapCustomizations)
	router.GET(baseURL+"/packages", wrapper.GetPackages)
	router.GET(baseURL+"/ready", wrapper.GetReadiness)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9aXPjuJLgX0FoXkR1b+mWbMuO6JiR5Uu+bfko+6nGA5GQCJsEaACULPf6v28AICmS",
	"AnXU1f1mX3+opkUcicxEXkgk/yxY1PMpQUTwws6fBW45yIPqsX3f2+/UOy4lSP7pM+ojJjBSLxkaYUrk",
	"k424xbAv1J+FNtBvAORAvxkgG2DSJ44QPt+pVGxq8TKc8DL04DslZYt6FT1VxYUCcVG55YgdBthGlYBj",
	"MirpEXkJjiF24QC7WExL75QgXnaE5/6HRYmFfMGjhn1SKBbE1EeFnQIXDJNR4aNY4A5k6GmChfMELYsG",
	"4YIz4BMAGYNTQIegfd8DYUvQ3ePrrajbPptfjkUJpy6K5i9BF0O9BgUyeoOe76LCzj8LtXqjubG51dqu",
	"1uqFr8UCFshT4PpQCMQkqP/9z2pp++uftfrHP0zL9eBbV3eqVavxe7W4DDY4DZilqZqFIDX13BSpMYuF",
	"gODXAIWTChagj49igaHXADNkyyFDnvka96SDZ2QJOVT7vtdr3PouhfY1eg0QFxeKJMmJja17AoqAz/Nn",
	"wFwDzBmAZKMcaPJgSc+Sw1OrEHJ9bP46ouUjJA/d0MMpUOQPparValS3thtbWxsb2xt2c2Di05kgmXVG",
	"QWmCuCjV5jtkKCjnLS5kLGY5WCBLBEyt0gA6s5z09G+tzafNpglY7MERepI/q64xlmd9Xy06qZu6Zjcg",
	"Qz7lWFAWgpGWQ7uQI5BsAoaUAeEgMMJjRICN5ciDQChRS2wAE+ssFxIM8A+GhoWdwn9UZnK+Egr5ynU0",
	"wXQewiyiJZbSCMisYRn20xhbBNYczQzoa78HDK22STXMBHpoHs/n0ENS1kvMWgxBIUW7bF/uk7OACzBA",
	"I0yA3HIAAhdJ4QsoAyTwBogVASJ2+mUxfCUbBcRGjFuUoaKikQenwKJEQEwAJe407MKjPryY6MKLwEcM",
	"U5sX5VjO1HcQ4eU+uXEQEFRAF7iIjIQDMAcu9rAEXVCwWQWWAxm05MjltF4pnGISvHXl+gpKQ5yqEQo7",
	"m9ViwcMk+rNWTOiZ3/77n7D03i49SnXzj9//b+rv2eNTv18uff0/iR++/uN384bXsutpxGjgLyZJ1Bao",
	"tmDiIIbUC0UjwB0auDYYIBAoTkB2dsE3NLAguQ6HOVQzmmwDDRG258Hp7kXAhKAIBwowwa6r5uUa6xJQ",
	"d6xhE4hAIhTFeTCIx5I2RLlP9iggVACf0TG2EYBh8ydsSzInO8ifJg4iYVtMRgCCGNLsSrXoN60tPWTe",
	"ClOgroTo+znY0jMVAXQ5lZ14IEejxkVLNNkaJ5hYbqBe566yiTbs1qBuleCg3iw1m7VGabtqbZQ2a/VG",
	"dRO1qtvILH2j+RYROCTcCosHN47adeQFoDffhZhw4NBJnwgKhpjYAMvVqDGUoAKXlAno7mRsRg9bjHI6",
	"FMpkRKQU8AqU7SvQEniMSjZmyJLyuTIMiA09RAR0+dzbkkMnJUFLcuqSXoWBPDEOFhEmy4DrkWfD2kLD",
	"jcFmqWY1hqWmDasluFmvl6qD6ma13ti2t+ytpTo9IyCMemUm/fMskrTUn4HoTUs4FICLwUgMYAJh1w2Q",
	"zzARZqsixWMGM0xz4pAyD4rCTiEIsG3iWxdy8eRRGw8xsp9kU8NY0SLnXowR42kAMBFohNj8YuXsUfNw",
	"xGJqEQZYvibRcI24Twk3uIpWwAX18DuM9fMi5d9Jt/4oLkVl0hZaNvpeoi1fgw6aGZi2NEx+Y+Q0apER",
	"NSyDIziWu8+jDGXeSQEBgXRwXQQGERqlNrcCxhAR7lRtOx74PmUi0m0rWVBKxYd2kXIGMYmcwZUcjRyO",
	"MjGNkVVSJJnDXjHLEilG4vmcZEMBV7Yi0xvUYEJK8W0QHEPMuHmfyQ2wHCu6f9jaJDk8pFeR2SXSe1xh",
	"p+p28+NmmqlJojUWNeYkmjsuRkR0Qz04hIEr2R760o1CJPCUra/+CnBilhkSVDwoYq2dPwuUoIthYeef",
	"S0z6RCzp4+tsmDxK622Zsm6Q9KNLqLU9KNXqdqMEmxubpWZ9c3Njo9msVqvVQnHZPp7n3xgUrUaSAEHX",
	"DReWJZTnUx4Zi8tnzNJ/MaJSSu3ja5b28dQx4D9qu6QH+9Y9M6NYBfq4ojZ+aRBg10asMq5VwhXw/1Qe",
	"yx+1aj+oVuubdDjkSPxRzVOB3z90rbqUHf7uG3eOPjuLWTOtoW5vZ4auD6V+AWHz2P9Vu7O4XBmGjnKe",
	"ObKiSmUzGbKUL2NVZtJAiVXPRk1BqfCnW50hAaN9kUYe5YIh9GRRz8PC6Cb85kDu/B6hS7KewqFsblif",
	"D60XODIFdy71G+BiHlnV0kY437+7bq+q4cMx4uWY4jdzDBziICG9oW1jCRV0LxPIGEKXo2KWuZTmCHlr",
	"McVCFfNR/H7b77tsO2V2ZMzHmRg5myozaS9luSSCIvWNaq4lOO9XhKOda3MoMUwy/P4NBiV6g5Y0BSnJ",
	"GJDLbEvZIdrhP8eonJ0wrGthZrbxYnPx6yJOXmxAfJs9oMde7Fjy+O1SlEXKfHWRl96mZsc0BGA26Bzo",
	"+4xRZvJMBcSufIxldVZzyUEhN7pbJgEcNk4A8MOMksxw/zZL/nZmiYlCc8DE7m2O1UwC14UDiUUpHgzY",
	"ng2QiGnk9Eqw8bfprB9i3qT1xDdbP0tEwRKTR501IIMQWHAaIigIOIrPm6xoEDBk1JuFRfPD6PPjXqMh",
	"YohYavD0oIIC5A2QnQojMjSSGmFaDn9S4VE1646AI2N81+WSM/BwOj+7RAOjLrg57QHVBg+xBUNdE0+a",
	"YqEBpS6CZA7f4QKNGknhPhEO+yYb68eGypLWSSLEZK9n8fwAG+z/u8BZCvMxUyw3DDP89kOCa6sw688w",
	"oxQYiSNmg1iI3kmBMMSjgCmYlezRq0idgZf7pC2AiyAXyroNHbFPA8hRwNxPRfDJw9LokY6V+gsJKDXW",
	"JzBbFfACLvpkgAD3kaVi2WXQHWpG0yN6ALLE66KahTIbMdnAZ8hCtpJmmPeJOhmUchNy5dAhG8ABHaMy",
	"6NqSJyPMaCbMqEUNeCaJIzoismxSZsh2oD4ekjITEVGR5K8wB7mtSquiUxUqciDKK5RXUskfM7oxvEpO",
	"guUg6+Vp5I8SKisWhdFrSZH8NohIjWybXw6xi3I14sgfvSADlxxeHoIXNI2PWjkeERA51/qUTaE54qUy",
	"6EACBghAMPJHqitlAILb69N0jlVJ/re7f9g9B5eHl+Dydve02wEn+w9g9/Sic6Je90mfeFfd893DttWz",
	"6O5+e+902Ho4ekHvx5vQds8eJlvw8LDrHkNXtI6f62+V3frJZ6c77AZvh8K/e95CfXJ6Pdq73dp8hjcb",
	"/t3ehndwdtzwXxBB1xXrxnt9vXo5n15x50udXn2Z7L/f9ga1zvlZZ9g5HL18aV3V++T98YV1rQ47qF7V",
	"J+xk4MLAdm4/4ztI2nvcq7Ue9l/5YKN929iyxS07a1w92Pej7evPX/Dl8K513Scnu8831cb4bvfCPuvx",
	"h8b2KeyQza5fuxj7re4+rXTR/t1D7dXrXFy24Ul1cHzUCIajZidAL/zzTa9PJlf3N6hz+hY8nm5enH2h",
	"F5cnk/HZ1fBtMKp92WuNg8fqiXiuWOdH9TcYVN883g62j4599DK+uLx+c/tk+iqep49DRu8wOpj6k8fR",
	"+GoiCDlrVUa9/aByfHfDHqobdW//9marYw22mi/W0cHNwfDsxSUvh5U+qQ5vm+1ruFFtHjXenqsvYoAa",
	"4xPr8gu9vAhOdu/4UW9crd4ePrSnlyiYfm5tWbeVh33nbOul0bs7ee6TTdR9HE3x2UV14tYeDveuT6zA",
	"nbzw7fbnwH0Z1ejNoMkb797j+LK6dUhv3u6b9Wd4snHf+3zuPCLUJ63N6hd65wys2onf+/w8fKTPnO2L",
	"x9bl4Pbx88P4oHXtM/u+zZ6PBscv9WP/+qT9duO88as233UOa31SPQ3e6vfwbLc6qnc3Lq0z+7hivT7T",
	"asuy2PPulwC/3TO8gYPtsy9+6/WmMuy9n3vc7o5Iq/L6eNInuHUVuMNgayt4de4rE1EfCILF6Jq/Pjtv",
	"Z8Hzw23zcdB0XsRByzm5rXz5stWsvzqnGyeT9nX7qr3bJ2Lv4PDx/npsefujk72z2kmv3Xr07l4GjWPn",
	"9Oasdvpldwrva45F3Hb0u3V0PIbe3bPd2Rj3ieVZn/HV8cXu7tlup91uHuD9fXS06THn4GgruONXp2dn",
	"9erDhvXokLeH1kHbU3uoczhpHXQmL90+2Z10Dw+u6HGnzTu7uw+d9mS/czTa7xw02+3O6OVq1vvz+UO7",
	"srX74I/caa/9+HDkPE9PnD6pfB5uvl8O78aDo3p1/7Xx0t26ONg9r5LTL593b2teMO59fr0Jeo37U7bb",
	"8BqHgSv8k+v945NT4W3s7/VJjR2+f2nTm9rU337otk7be/ZZp3MxfW4/c3p/29p6uA06nysD8sxu0HX9",
	"9PqiM5xedrY277dbG/jirk+8jd7nAb/am2x16qfMtdtnzbO9gE4faz0sDuFj8+Tq9E58vtmHtSbmD73D",
	"zvM73bp8aN01ji9eNqp9Mnq9H7Xq55WBV99/723dtBr3+3uDmjt+bnbd8duo+3qCRrXa+5eHN4899B6P",
	"jzvD8fvws3ve2wzeRkd98vxWOa5O3cf6KR4css3Ddnt6sX17z9qPvUnvrLpvPd+0Jvsd8vbS2wumr979",
	"5G58vvsl2O/etS5Q46FPzvBtbXh83uL21p7PD942zj5/sckZuep9PmLPN5cnew3vnrltm+zfOPbDXev5",
	"8cW/d/amvFHZ3kYXfeK8VNkpmVafzycvMBhW8G3rwtr8Mj57eT69Pjsebdxu351Mj4P7e/E++UKez843",
	"7q8Pdl9PmvyRemdnfTIUg5uj2ueN6eD6vtJujHcH8O36vi62bt/Pn6139NJ73Mfw9Hz7tHJkHXe617Wr",
	"g9Zmq75nt939g227T17qoyv80LtqQ3hcPT5uvx+Nr1+uj09PRyf1h6sHfHR+N62LxvH0YMgZ9DYmvc79",
	"xdC5RN3p6e7N43GfjJl/7l4O0JDfbG9s3Qzru+fdYPT+yDobd297vZOXx9G1U7s7HPe6V6QzfX+5mm7u",
	"39ZfL318v7EtZZRz2f3yyE6oddI4Oe1tV/D78dXNtSuez9p/9Mkfl8ObrT5R2mX/fG+R6lkjkTMbyknk",
	"AYc2UNoqjWwMbS/x8hDZlEGfUWkhlikbVaJ+/yk16x/6falR19ELyCznjzhNcpmZMTPK5oGIYZCvyxYi",
	"gnI1/38yJC099EerxAVD0EvMDOW/m039i4JvF3J00VsFFmoHLnpyqBjiN8TNdkqujeIzTBkWU3PQjHM3",
	"4YQucSWllWyyzOc8wGxYJ/Sc+RpBtCgMYDL51HxP2WzU1QbOWviG8aMcpXXG3YvymkwDDm26rP/B3kVk",
	"ba4+6QF2kXE+OcqUh2GtlYcKu6TD5PWWaXx/+YDdy55uy9AEuu5yAHS7FDMpG5vRwDd44adYulRDnWbJ",
	"pZWtQ0mrus06sdKAPYdyYY41dUKPD3HlXsUNi6lcrcTP8xG2EcGrxCS6UTvZh3ABXVch5MlGY2wtSQpO",
	"dgC6QzERZ1BpvAFHw8CNI2bIHqESx57vKvexFA6BGJBLyGTMVWw0rnAbmhb4ghhBS4l9olt9FAsutaCL",
	"lrU/1a0+igXqI8It6C/rceEj0uu0L7OnmglfyqdcjBjir+5ipZW6lWK6l+JDJhS1MBk9edQ2kKeHXGQJ",
	"4NCJQreN+UsYIYqycuNBpG//CQaCltyx90m/DzgCDE5AQFzEtQPPkPL4VUyB6UiARwMifIqJjjdNHGw5",
	"wIIcASxm45zenZXBJzU2dCdwyvsk4IjL34sAjRHRCbyzKQgF6E0wmBy/DD4xOPkEVE8JWQw+7xPTIDlw",
	"hsmYYRIPg5NCseCOvUKxEGHAmNDjw6lLof1tKmCx8OeIyQ2zdJRe1C6Trry0X7KtnB976D28rrao303U",
	"7qNYCHioS9NM5oYSUb3WOd8wjEkhBixIALSjRFodKZpiMpJEwgwwJH8SeIwiiQqJDXq9I/CCpnxVoXrL",
	"TSrbdK4/U5iG+3hhIC1OFp5J9yhFeYgJdIFkuiG0hClQhQgPGHrSeSM8lTsWxrHTs+4TnVks0ZZIOEkY",
	"AwC9YZ7Im0hYXzn3ApSOicTybDWQAxheDyBKbjP5N84cKFAq55rlqmV3wbw591Ubiwb5c4mYhzmX+xPo",
	"AWLRPwMLE0AtAZVWkAZpEprq1saGOWNEOKZsEeFE5ybx+GkdgoRV8aY2ZqZRJQfPj3oxITqcacCm7JFA",
	"ZvAjkJmxftVSvxpZeRbcXimzegbXNbLBERRgnwjEfIalfMYkeAO/XR/tn/4OWmXjna75kD1zkFtqNQvf",
	"EJ1ftqRLRqVBGa0sEtZvlmUPnygblTkfRV5YGPB98nWfJ0g4x08Dv956QsSBxFKnZut2dfDI+YZukpTM",
	"QzaGivnW7e5hgj3ortrTwnyNpk9SzyD25NbW6TSh7IULbQl+R8/6yj0DvGpT1Fq1pYN9CFdtjLn3RFdt",
	"TLnvr9rWt3DJ5iuTjAtIbMjs1dvj0Tptn0Y5ucuGnZg8+jL7ROHI+gYmNNy/XP10MU8SGEyn9EFqLnDQ",
	"dVOwhKaKNofDLJToIJSXQVvLdg+PHKHOSB04RgBaFuLS6+sThuRYlkB2ethyn/TJdc7L+GaQ1CVS1gIi",
	"J3ClmpeGj/z5QAWQ5gZNGqxK6haK4UNJjzGNf2jGTxvx02b8tBU/zYbYjp5mD9lRt6vxUy1+qsdPjUKx",
	"oGNSCrLwUQ4XBcS2Es+txHOiTbO6lBn5cjbMUhlzTUvMJRPQiT4cUyQvfxtH5rHiwd7F0jSGNMwH3b2L",
	"0FkGlAwoZHb6hHfOwLRxQJ78YPD0gqZPDuROzk2fRCtMOLIChpa3lAbLk4WYyPNJSSAN30D+EOmS3PoB",
	"c+pdBWfWw09PBYeA7AmkjQk4Eupiatbqjs9Sl5nbsqEOpPDM2AVjUsv8KrCLFngPUlR9i+MQZfvNZ+RI",
	"NozsTzU65EDdpAQCvRkTqn+iE7IkC2g1nyRahXI/Qj8k9kv+EndEQbTQE9lsNr/NE5FDm5yQ8Pdv8UJm",
	"+Asi/MWeyK9zQA5S8d40N3uYPHH8biCC/DW5jnAXYgIGU6FqJcTg12vNrWarsdlsFQtvpREthSAEmIjN",
	"pj6jiGI6mQTTMWRLnZJE5+IMYPNKTVHiNSV9OMYy+a7sjwU2lnwNfqNMPQEGyQjx35Xx4DMqqEVdFZWm",
	"PsoUyqnXd4QlRWerGj5gD/rqca3Ts2So6pvWHw2gMhqVPJYsbGOuMlTn9R1PyHYTSpLjzUZJrFwglyCx",
	"3ipTGmXZrLpxetKhkCgmYi3sfpiSi+fY8bBz+V1Fd8wLGkMX2+CQ0pGLompOanVqlDCdVacJgg71/EAg",
	"cC5VchRRFk65T/ah5UTC1Qu4iMt4wDhNLBZjUckoucAyuFPza9HLAWRop08AKIFPUrTt/Ik8iF1sf3za",
	"AW0C1F8A2jZT9rhUXAz5DHGlLOO5LDkEyCyqDA4oAyGpiuATdLGF/iuRQPupHM4c0rit+60Jg546HCJv",
	"bm9aosJBrAR9/7+g73OfivIo7BT1SYKk9OS62AjXr/qWNVwZFNgeJtyIA5t6EJOdP/X/5YQ3DgKHoBdg",
	"gYD+FfzmM+xBNv19fnLX1RNKgusQsaI+FGHfLEZGClYFghQLn+ZgAqA71Fmr6bTDRcyJue4hOTkqQ0Om",
	"erQIy9nCYort5nijEAvAiCtWJWEhtI125pFdKBZCNCd//PHFqWLB8eNKQShxLcd/yl5EhtxCxIZElAYM",
	"YrvUqDY2ao2lWjkxXHFZZYnDyNZcI3F8ZLryqa1TaUtpyaSt0ZkV/xv19fCJOj2JdIblFZMyA64WMDUt",
	"+ejm5nLhdSUzt2DhrlCmQDcrRiN9Tc53GialZBwvlRSz8iHYDPplVbTCgSUI3cTp9RoGR9Rtib2l7lTY",
	"yF71bHw/aq+zDLgYSBt7xc4HcQfj/pybY807EWqhy8kctvu6AIKD5MrWACEMBmS8IUbHmOuT6jC5+Nuq",
	"DabuHKwHWLLqm8HNvrxN1YWLcxrkhEWg87d09TidUKVOl2fJDZkLFPFhRZT3FfYyRrdmheJWunJxoyrK",
	"fRTDW9hLMxJ6N7KVtNuN7lgvdMfClUZuWBmookgcCSm0qskaT7IDllaFOqkIvD6x0RATZIPBNNFOGXVp",
	"ndqsbze3N7fq25t5/pwuG/W04pWvlBFsrMMXUzyF5rl5cnktT0+iSAKvcCMtecVUkiEeMuISHqiocqFY",
	"GELsamh9RGzJH8WCilPqRw21ftYXv5Bioq9Jl3822nxkQa96tQu56fIa2dtd+uevEZ5uojqPcWGUiYRA",
	"VeiSHGCPUCm+/6/+ilN9pFmkvNGRJEVsZujboclW1MKFYmHMfQepQcOnEh3DQrEw4a6cUBe5dJBbSs85",
	"+yk55NixjVvyJE4nWkfC+JJohsig+l16NKPAQ6FPpcoiUCpUlTQGdP6SKpEghYyLSTqOQyj3xB9Dyiy0",
	"6GA23/4IJ9A3FlND6zclGw2C0UpVWQqncfLUGtpYd1qii1/QVIXATZlMgocL0U2AC6c0SMfoAm6+fkxG",
	"gbm8ROT66nQwRZhBnMgW+RVKyatMogGyqIc4CJ2doioBJ0UIUe+5vgyFLEpsyKZZfwKRp9te+fbmoNT6",
	"vpBAsXDR6a5cAThu+1Pq/4bqxZh8i4gwmgNtaQPoPLEiwEOpZIpAH9Io/x8MkbAcaSuEo5RB1/PVGZny",
	"G/8nYO7/yA5SO0EOJsh1i32iE89S5SblYF5Y90MlIJbNBa91vNtgFujrUQhL/w7AsIQJ+C2k6g6o1jer",
	"zUHdhptoe6M5sBvNQWvQqsNWYwNtwK0tuz7YrA6H8PeijtIOGCSWU3LxCwIsvuo7G0+KqdldNSmvfs9k",
	"Qc63MFeMGc4naqzQzeHePBb2kEDMw5LBJw4KUaGjRalSmB4kcIQY+M2CxHaRj8nvANuICCymyft96vg0",
	"Okmdu5FGCQ9U4phkJnX9WM6bpCrkQN9Wz7RxEOmTmHdiukuBGjFSkvyJM4vVj7DiBM85jo+O1TNJN2lU",
	"3jgIuJSMhpR5wKcutqaZO8Ym91qnJNjm4cJRZtzU3UsxzBpZJLlzm/VLYvbQrFrq2UcrMYmSsE5P/g18",
	"Q71WT8rh5dIrPBeJ2n+dzZZf5Cgqdj1/uObTnDcLShioCxrmReCRZ2/kvSJQ5B3cRh7DCrUs89x9TbUQ",
	"O7OalhG4xaiWdQhjAm8/qmxJRPSfUKkkyr/OqVSi/0rmCpTL5fL31C9ZPGFt5Rn/daqaGIC5RtJDkQ6I",
	"4UMYiVfLCttGTc1zJG/KL78o/p33xJdflVr7NvhqSQojfxSW4dBFOGa1vuNqAJGWy1Fss5vipjshlKEn",
	"zl0z0P++Dbf+bbjIflpyoU01MzF2b9Wj1R9wRAoG0vTQbFg0fZ8hukJlm0mTV+3j285Ol0JDhkJtijWB",
	"Mdlwvcy9iYzetwQeq+1WCrdO6hiEI4shoV4lmMaHnE8oM6JKSpKSUSTNSyTj5S3C8cjJfC4lL/uGshEk",
	"iQSFWS5FtVlt1Jum0wvmWMtl0kV4AAKGLhxFlY+YY+mS/joWlciqKob3gNStD33hJ6Q0B91wQZnoYN6S",
	"dJrZPAaTvkdZbqkEIpcq1RSeilmipyZNUDBBDNP2vUlcqlkjNBJ1WxIcIcLXUC0IZBDhg6hRKvhQLRPK",
	"hFOCHmLYgmWfUrdMhC9FZqFYqC16vVbeRPJiUX44KmpVjDa9EgW3N52U63Lbq+xDrj6usVJgKh0Pni9b",
	"OouSQDJdrRSzMcyyrDJx/iealvXMy+xYOmPuN16W9cwLJak0ulUOJXTv8FTC7GBEiP+aS7O82FSCZCtX",
	"z04Hrlcn1Yo9smfoa5BmxR7ZiJ0ixbrHBiwgJDwbyPUcv5WscUHNLH1jeuacB+hAf3QqACe8zBs6sl/W",
	"HMEFZdIdNEF9yxeV50tGgRGrGWvucedpTqVz7pQYh6Ddbrd3G+fvsFNb9TZTNJ6Jre9mPnga3pWd86jh",
	"148PZQQMqSkqrpOLwqQbV2rZxIUGkCh15mILhe66Rlmh7UPLQaBerhbCCFhs3U8mkzJUr5VJHfblldNu",
	"Z/+8t1+ql6vqW3yJ1AJ9DlSKL1JoyBJhhZ1CrVyN7lJDHxd2Co1ytSyx7UPhKORUkmd2vPJn0lf+UMkb",
	"SFfS95FWkl27sFM4RCL99SwV0IUeEkpX/jOLtdQXwYaUhaaKoMCl9AUEPgg/n+ii1KEwnwvE6qsWmCgL",
	"UDhRLGUnW3huRldt5OhNtmaFQF3iXkddFLbq1Woi1B4eQbmhr1h5DqvSrjZXGoGK5dJIgyC655uDnOj+",
	"CmYAck4tPPtCGBDRmXWz2vhhIKczUwwgR5c+CBVzFz8AZeA1QGyqI9Apen0kQ4uS5XSyYs5iEytMoCbv",
	"BpSULXDEDaWcU8fVKgm7osrM88qf2E4yfyadWsliRZe4LP3c9kh8t2HZ5uiqHCg1EgjHFhTIqY2MHpdV",
	"NbP3D/8sxc/cA6avWxjYKokbA6+kCBIWFY8IE5E+/D0ic/iXSv7mBhrHtcnDs/E0fcM0g+hbdaHM36X2",
	"9MdhJltbdw4pYansWXlSfZQaQj7PJB9zdKz9eGgX0DDEqAO5JBgTOp+r+QO5aal40tV9NRwh0aS08qAr",
	"N0EE0N9FXi4Tk1keXcjqfJEuj+pkL5NUHnwDUN3hUBIr7BV7lKCmBIqSWUrSz4SWis8XknIqjn2oSrMe",
	"fMOetFv1XzrNKRlcSsTSc/YqB77cBTr2P4MpDyLdzgxSEoTqKiAcYDcKxsTQUJJMy1Ip3EPdDHMQJbfq",
	"o1J95h0nVwMvcAX2Xe20h0Eb0xp0QDmRDpRczeolheP8tkwg76dK/mwt/oUGUMzE88JfinzXRVYUrfcZ",
	"GmMa8OxGn32k1qWjkfpItkqOX7pxKn+GT11tE9jIRQKZzuzl73ymg4pJftDn6VzIf8MrGHQCmc3Ba0AF",
	"1DROb0w9YIiogpkWmYjhSQZBGtYZSOqAYolNE7GtFU+cJy96s688/FwuiVPicrXKKrbB/MLmCb+aqRYP",
	"YDDPYmb5xVZaHstqkzbf0tGfbpqxSBlcEHc6E2Pq5oaqZA0n/FNCpM3n4iqjC5ORiZnVNDNeXh3LKoM/",
	"NOb+Ruj+SVZf+ntSi2w+SRKCJjFufqGxl/o6Xo65jskobeqlTRdl0MOFW3ExQ/Nc9+waiYARydFuog5F",
	"/A0xHsYeJoihCLrQdwznMHDvTObp7bI2B0cubQgCHf6tuLm4xNBTQP/lZp5G3S8z8n6638tXcZdCZp9X",
	"bDEnfes28hJ5WMaNFKfzqd2xulkQJ3ittUni2RbFPv5Kaf9zTZzZt/LyecGbtclywyzldkVDR7KFnS3j",
	"k+cfpsOiPxEZ5rIzBpS0Y+GeV3pGKp+4dlAZ9KiHMm0hU9/wD6sGFQGnfSL0p9O5SJQhsijTC7ajawQp",
	"MMFviATe70CvIRWGlIBIY8gc3sxAEwcy1SThMvKCl5qA6M1HDOsPr1fij83kq0aTvzTrVgQsVJ3PAdcg",
	"ulAgLkB4oKC++ActZ9bHJAVm30peJgA4gsxyFMZmUIDBNC7vl87TNQl4PURKwK+p3JLr/2sV3OxrQf8r",
	"dJzhm9kLffwE/y738gdJJot2yIwtlSNnDuzq28X5HJz5+tDPCu+aP8i12OQfZID6ReZ+zueYDLDOOHgi",
	"TX84/gtivKlvbv3tIrtZ9svyuoE9Tdy9QPjHZ1dL41SuGwl2xV0xhX9M3Cq9g1K82TQcq+vMimHgulOg",
	"IQ9p1vx1NItBVjmbOnQmGVnScEgDYudF15aRq7hIHSc/fadqACzSqYVfIbAXbXENo3Y7Zkv81ZRKC5o8",
	"+kj8muHN1RmLzJXoI+XpgdZ2NtY/0l3BPfEDA38Fvr1Y192qBv/yuq761+s6jWr7b7oRDIzwLVplhWNz",
	"rb5UXDLUH+rDrAvMLd0syYP/spvwu0ywdT45PePLuTO73OCB5I/wE7x/G2PIyCI5JtFCnvoebl7PXY7P",
	"RRIZV4Im2bGol6jPG/WJLyYj6dbOrvvlK/hVj+L/tvsg72x8ME3UiEtGFKSxObO8JpJTtQWm7hXPED6k",
	"LPcgfP4L3IaIwALX+9+JDf9ObPiLExv+tha0SeLpcn4rieAw97gcwZ8XY77Q7Y55mL77HeTJXqudW3wU",
	"59QZVtRSRWJyorQh/EBOE8svmEksVVd1w/VyC/qZPOpKVKZ/IQJkx8uo4S8Ksmc/NLAw1B5/bCC+NRXl",
	"3c6lquVHvWdx7qXfLpCyBXNd+Uogz6cMsilAxFYVhIGHQkUxQIAhj46RDTilpJwgjKKGybX7ZRnkuTzx",
	"Z7j+j8r8h/UX8kjmK4w/U5ZlvuFvYo408ECJ2MgdmiWPEIRsZAPkIlWPKZ89MsPlsUZUfVki8H8DmxQX",
	"Xd0L16nvfQqG0XgeT0zdwDSAG3b+IZCmPguiWTv5yb08ro0KWKx1SyRxNyT+nvqQshyD4dcQJVWvcD0A",
	"M6XxFhxer17IcB7AGJAIuHyA4pOzfFDWPEmLJv+rzeYYCf8rjtHmqr8stCfj7fivdPMnksIh8KEhxRDU",
	"Qcg8sTKre/IT0T+bxGhHzl4mlZm2L8PCITMgDdZi4m5ibghCXfEPrx0uCCHcJYoJ/SRkRFMYWTALolm/",
	"zy8ki5W4/oBWEfqapLH8j7rWu+B9uVr4+Prx/wIAAP//WtFWBEWqAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
