// Package v1 provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`
}

// Architectures defines model for Architectures.
type Architectures []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {

	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   Distributions   `json:"distribution"`
	ImageName      *string         `json:"image_name,omitempty"`

	// Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id string `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus `json:"image_status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string      `json:"created_at"`
	Id        string      `json:"id"`
	ImageName *string     `json:"image_name,omitempty"`
	Request   interface{} `json:"request"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Filesystem          *[]Filesystem `json:"filesystem,omitempty"`
	Packages            *[]string     `json:"packages,omitempty"`
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Subscription        *Subscription `json:"subscription,omitempty"`

	// list of users that a customer can add, also specifying their respective groups and SSH keys
	Users *[]User `json:"users,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions string

// List of Distributions
const (
	Distributions_centos_8 Distributions = "centos-8"
	Distributions_centos_9 Distributions = "centos-9"
	Distributions_rhel_8   Distributions = "rhel-8"
	Distributions_rhel_84  Distributions = "rhel-84"
	Distributions_rhel_85  Distributions = "rhel-85"
	Distributions_rhel_86  Distributions = "rhel-86"
	Distributions_rhel_9   Distributions = "rhel-9"
	Distributions_rhel_90  Distributions = "rhel-90"
)

// DistributionsResponse defines model for DistributionsResponse.
type DistributionsResponse []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {

	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {

	// CPU architecture of the image, only x86_64 is currently supported.
	Architecture  string        `json:"architecture"`
	ImageType     ImageTypes    `json:"image_type"`
	Ostree        *OSTree       `json:"ostree,omitempty"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       string              `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// List of ImageTypes
const (
	ImageTypes_ami                 ImageTypes = "ami"
	ImageTypes_aws                 ImageTypes = "aws"
	ImageTypes_azure               ImageTypes = "azure"
	ImageTypes_edge_commit         ImageTypes = "edge-commit"
	ImageTypes_edge_installer      ImageTypes = "edge-installer"
	ImageTypes_gcp                 ImageTypes = "gcp"
	ImageTypes_guest_image         ImageTypes = "guest-image"
	ImageTypes_image_installer     ImageTypes = "image-installer"
	ImageTypes_rhel_edge_commit    ImageTypes = "rhel-edge-commit"
	ImageTypes_rhel_edge_installer ImageTypes = "rhel-edge-installer"
	ImageTypes_vhd                 ImageTypes = "vhd"
	ImageTypes_vsphere             ImageTypes = "vsphere"
)

// OSTree defines model for OSTree.
type OSTree struct {

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`
	Url    *string `json:"url,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl    *string `json:"baseurl,omitempty"`
	CheckGpg   *bool   `json:"check_gpg,omitempty"`
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`
	Rhsm       bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`
	ServerUrl     string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{} `json:"options"`
	Status  string      `json:"status"`
	Type    UploadTypes `json:"type"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// List of UploadTypes
const (
	UploadTypes_aws    UploadTypes = "aws"
	UploadTypes_aws_s3 UploadTypes = "aws.s3"
	UploadTypes_azure  UploadTypes = "azure"
	UploadTypes_gcp    UploadTypes = "gcp"
)

// User defines model for User.
type User struct {
	Name   string `json:"name"`
	SshKey string `json:"ssh_key"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {

	// max amount of composes, default 100
	Limit *int `json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {

	// distribution to look up packages for
	Distribution Distributions `json:"distribution"`

	// architecture to look up packages for
	Architecture string `json:"architecture"`

	// packages to look for
	Search string `json:"search"`

	// max amount of packages, default 100
	Limit *int `json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// ComposeImageRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody ComposeImageJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId string) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId string) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameter("simple", false, "distribution", ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameter("simple", false, "composeId", ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameter("simple", false, "composeId", ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/architectures/:distribution", wrapper.GetArchitectures)
	router.POST("/compose", wrapper.ComposeImage)
	router.GET("/composes", wrapper.GetComposes)
	router.GET("/composes/:composeId", wrapper.GetComposeStatus)
	router.GET("/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET("/distributions", wrapper.GetDistributions)
	router.GET("/openapi.json", wrapper.GetOpenapiJson)
	router.GET("/packages", wrapper.GetPackages)
	router.GET("/ready", wrapper.GetReadiness)
	router.GET("/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
