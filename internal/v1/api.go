// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for Distributions.
const (
	Centos8  Distributions = "centos-8"
	Centos9  Distributions = "centos-9"
	Fedora35 Distributions = "fedora-35"
	Fedora36 Distributions = "fedora-36"
	Fedora37 Distributions = "fedora-37"
	Fedora38 Distributions = "fedora-38"
	Rhel8    Distributions = "rhel-8"
	Rhel84   Distributions = "rhel-84"
	Rhel85   Distributions = "rhel-85"
	Rhel86   Distributions = "rhel-86"
	Rhel87   Distributions = "rhel-87"
	Rhel9    Distributions = "rhel-9"
	Rhel90   Distributions = "rhel-90"
	Rhel91   Distributions = "rhel-91"
)

// Defines values for ImageRequestArchitecture.
const (
	Aarch64 ImageRequestArchitecture = "aarch64"
	X8664   ImageRequestArchitecture = "x86_64"
)

// Defines values for ImageStatusStatus.
const (
	ImageStatusStatusBuilding    ImageStatusStatus = "building"
	ImageStatusStatusFailure     ImageStatusStatus = "failure"
	ImageStatusStatusPending     ImageStatusStatus = "pending"
	ImageStatusStatusRegistering ImageStatusStatus = "registering"
	ImageStatusStatusSuccess     ImageStatusStatus = "success"
	ImageStatusStatusUploading   ImageStatusStatus = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAmi               ImageTypes = "ami"
	ImageTypesAws               ImageTypes = "aws"
	ImageTypesAzure             ImageTypes = "azure"
	ImageTypesEdgeCommit        ImageTypes = "edge-commit"
	ImageTypesEdgeInstaller     ImageTypes = "edge-installer"
	ImageTypesGcp               ImageTypes = "gcp"
	ImageTypesGuestImage        ImageTypes = "guest-image"
	ImageTypesImageInstaller    ImageTypes = "image-installer"
	ImageTypesRhelEdgeCommit    ImageTypes = "rhel-edge-commit"
	ImageTypesRhelEdgeInstaller ImageTypes = "rhel-edge-installer"
	ImageTypesVhd               ImageTypes = "vhd"
	ImageTypesVsphere           ImageTypes = "vsphere"
)

// Defines values for UploadStatusStatus.
const (
	UploadStatusStatusFailure UploadStatusStatus = "failure"
	UploadStatusStatusPending UploadStatusStatus = "pending"
	UploadStatusStatusRunning UploadStatusStatus = "running"
	UploadStatusStatusSuccess UploadStatusStatus = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws   UploadTypes = "aws"
	UploadTypesAwsS3 UploadTypes = "aws.s3"
	UploadTypesAzure UploadTypes = "azure"
	UploadTypesGcp   UploadTypes = "gcp"
)

// AWSEC2Clone defines model for AWSEC2Clone.
type AWSEC2Clone struct {
	// A region as described in
	// https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-regions
	Region string `json:"region"`

	// An array of AWS account IDs as described in
	// https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions = map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`
}

// Architectures defines model for Architectures.
type Architectures = []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {
	// Name of the created image.
	// Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens.
	// The total length is limited to 60 characters.
	ImageName *string `json:"image_name,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneRequest defines model for CloneRequest.
type CloneRequest interface{}

// CloneResponse defines model for CloneResponse.
type CloneResponse struct {
	Id string `json:"id"`
}

// ClonesResponse defines model for ClonesResponse.
type ClonesResponse struct {
	Data  []ClonesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ClonesResponseItem defines model for ClonesResponseItem.
type ClonesResponseItem struct {
	CreatedAt string      `json:"created_at"`
	Id        string      `json:"id"`
	Request   interface{} `json:"request"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   Distributions   `json:"distribution"`
	ImageName      *string         `json:"image_name,omitempty"`

	// Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id string `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus `json:"image_status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string      `json:"created_at"`
	Id        string      `json:"id"`
	ImageName *string     `json:"image_name,omitempty"`
	Request   interface{} `json:"request"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Filesystem          *[]Filesystem `json:"filesystem,omitempty"`
	Packages            *[]string     `json:"packages,omitempty"`
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Subscription        *Subscription `json:"subscription,omitempty"`

	// list of users that a customer can add, also specifying their respective groups and SSH keys
	Users *[]User `json:"users,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions string

// DistributionsResponse defines model for DistributionsResponse.
type DistributionsResponse = []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {
	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	// CPU architecture of the image, x86_64 and aarch64 are currently supported.
	Architecture  ImageRequestArchitecture `json:"architecture"`
	ImageType     ImageTypes               `json:"image_type"`
	Ostree        *OSTree                  `json:"ostree,omitempty"`
	UploadRequest UploadRequest            `json:"upload_request"`
}

// CPU architecture of the image, x86_64 and aarch64 are currently supported.
type ImageRequestArchitecture string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusStatus   `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusStatus defines model for ImageStatus.Status.
type ImageStatusStatus string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl    *string `json:"baseurl,omitempty"`
	CheckGpg   *bool   `json:"check_gpg,omitempty"`
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`
	Rhsm       bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`
	ServerUrl     string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}        `json:"options"`
	Status  UploadStatusStatus `json:"status"`
	Type    UploadTypes        `json:"type"`
}

// UploadStatusStatus defines model for UploadStatus.Status.
type UploadStatusStatus string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Name   string `json:"name"`
	SshKey string `json:"ssh_key"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody = ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {
	// max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// CloneComposeJSONBody defines parameters for CloneCompose.
type CloneComposeJSONBody = CloneRequest

// GetComposeClonesParams defines parameters for GetComposeClones.
type GetComposeClonesParams struct {
	// max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	// distribution to look up packages for
	Distribution Distributions `form:"distribution" json:"distribution"`

	// architecture to look up packages for
	Architecture GetPackagesParamsArchitecture `form:"architecture" json:"architecture"`

	// packages to look for
	Search string `form:"search" json:"search"`

	// max amount of packages, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParamsArchitecture defines parameters for GetPackages.
type GetPackagesParamsArchitecture string

// ComposeImageJSONRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody = ComposeImageJSONBody

// CloneComposeJSONRequestBody defines body for CloneCompose for application/json ContentType.
type CloneComposeJSONRequestBody = CloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// get status of a compose clone
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId string) error
	// clone a compose
	// (POST /composes/{composeId}/clone)
	CloneCompose(ctx echo.Context, composeId string) error
	// get clones of a compose
	// (GET /composes/{composeId}/clones)
	GetComposeClones(ctx echo.Context, composeId string, params GetComposeClonesParams) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId string) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// CloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) CloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CloneCompose(ctx, composeId)
	return err
}

// GetComposeClones converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeClones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposeClonesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeClones(ctx, composeId, params)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/architectures/:distribution", wrapper.GetArchitectures)
	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.ComposeImage)
	router.GET(baseURL+"/composes", wrapper.GetComposes)
	router.GET(baseURL+"/composes/:composeId", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:composeId/clone", wrapper.CloneCompose)
	router.GET(baseURL+"/composes/:composeId/clones", wrapper.GetComposeClones)
	router.GET(baseURL+"/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/distributions", wrapper.GetDistributions)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)
	router.GET(baseURL+"/packages", wrapper.GetPackages)
	router.GET(baseURL+"/ready", wrapper.GetReadiness)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
