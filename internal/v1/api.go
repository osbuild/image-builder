// Package v1 provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`
}

// Architectures defines model for Architectures.
type Architectures []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {

	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   Distributions   `json:"distribution"`
	ImageName      *string         `json:"image_name,omitempty"`

	// Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id string `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus `json:"image_status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string      `json:"created_at"`
	Id        string      `json:"id"`
	ImageName *string     `json:"image_name,omitempty"`
	Request   interface{} `json:"request"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Filesystem   *[]Filesystem `json:"filesystem,omitempty"`
	Packages     *[]string     `json:"packages,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions string

// List of Distributions
const (
	Distributions_centos_8 Distributions = "centos-8"
	Distributions_centos_9 Distributions = "centos-9"
	Distributions_rhel_84  Distributions = "rhel-84"
	Distributions_rhel_85  Distributions = "rhel-85"
	Distributions_rhel_86  Distributions = "rhel-86"
	Distributions_rhel_90  Distributions = "rhel-90"
)

// DistributionsResponse defines model for DistributionsResponse.
type DistributionsResponse []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {

	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture  string        `json:"architecture"`
	ImageType     ImageTypes    `json:"image_type"`
	Ostree        *OSTree       `json:"ostree,omitempty"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       string              `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// List of ImageTypes
const (
	ImageTypes_ami                 ImageTypes = "ami"
	ImageTypes_aws                 ImageTypes = "aws"
	ImageTypes_azure               ImageTypes = "azure"
	ImageTypes_edge_commit         ImageTypes = "edge-commit"
	ImageTypes_edge_container      ImageTypes = "edge-container"
	ImageTypes_edge_installer      ImageTypes = "edge-installer"
	ImageTypes_gcp                 ImageTypes = "gcp"
	ImageTypes_guest_image         ImageTypes = "guest-image"
	ImageTypes_image_installer     ImageTypes = "image-installer"
	ImageTypes_rhel_edge_commit    ImageTypes = "rhel-edge-commit"
	ImageTypes_rhel_edge_installer ImageTypes = "rhel-edge-installer"
	ImageTypes_vhd                 ImageTypes = "vhd"
	ImageTypes_vsphere             ImageTypes = "vsphere"
)

// OSTree defines model for OSTree.
type OSTree struct {
	Ref *string `json:"ref,omitempty"`
	Url *string `json:"url,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`
	ServerUrl     string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{} `json:"options"`
	Status  string      `json:"status"`
	Type    UploadTypes `json:"type"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// List of UploadTypes
const (
	UploadTypes_aws    UploadTypes = "aws"
	UploadTypes_aws_s3 UploadTypes = "aws.s3"
	UploadTypes_azure  UploadTypes = "azure"
	UploadTypes_gcp    UploadTypes = "gcp"
)

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {

	// max amount of composes, default 100
	Limit *int `json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {

	// distribution to look up packages for
	Distribution Distributions `json:"distribution"`

	// architecture to look up packages for
	Architecture string `json:"architecture"`

	// packages to look for
	Search string `json:"search"`

	// max amount of packages, default 100
	Limit *int `json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// ComposeImageRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody ComposeImageJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId string) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId string) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameter("simple", false, "distribution", ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameter("simple", false, "composeId", ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameter("simple", false, "composeId", ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/architectures/:distribution", wrapper.GetArchitectures)
	router.POST("/compose", wrapper.ComposeImage)
	router.GET("/composes", wrapper.GetComposes)
	router.GET("/composes/:composeId", wrapper.GetComposeStatus)
	router.GET("/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET("/distributions", wrapper.GetDistributions)
	router.GET("/openapi.json", wrapper.GetOpenapiJson)
	router.GET("/packages", wrapper.GetPackages)
	router.GET("/ready", wrapper.GetReadiness)
	router.GET("/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
