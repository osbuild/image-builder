// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for Distributions.
const (
	Centos8      Distributions = "centos-8"
	Centos9      Distributions = "centos-9"
	Fedora37     Distributions = "fedora-37"
	Fedora38     Distributions = "fedora-38"
	Fedora39     Distributions = "fedora-39"
	Rhel8        Distributions = "rhel-8"
	Rhel84       Distributions = "rhel-84"
	Rhel85       Distributions = "rhel-85"
	Rhel86       Distributions = "rhel-86"
	Rhel87       Distributions = "rhel-87"
	Rhel88       Distributions = "rhel-88"
	Rhel8Nightly Distributions = "rhel-8-nightly"
	Rhel9        Distributions = "rhel-9"
	Rhel90       Distributions = "rhel-90"
	Rhel91       Distributions = "rhel-91"
	Rhel92       Distributions = "rhel-92"
	Rhel9Nightly Distributions = "rhel-9-nightly"
)

// Defines values for ImageRequestArchitecture.
const (
	Aarch64 ImageRequestArchitecture = "aarch64"
	X8664   ImageRequestArchitecture = "x86_64"
)

// Defines values for ImageStatusStatus.
const (
	ImageStatusStatusBuilding    ImageStatusStatus = "building"
	ImageStatusStatusFailure     ImageStatusStatus = "failure"
	ImageStatusStatusPending     ImageStatusStatus = "pending"
	ImageStatusStatusRegistering ImageStatusStatus = "registering"
	ImageStatusStatusSuccess     ImageStatusStatus = "success"
	ImageStatusStatusUploading   ImageStatusStatus = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAmi               ImageTypes = "ami"
	ImageTypesAws               ImageTypes = "aws"
	ImageTypesAzure             ImageTypes = "azure"
	ImageTypesEdgeCommit        ImageTypes = "edge-commit"
	ImageTypesEdgeInstaller     ImageTypes = "edge-installer"
	ImageTypesGcp               ImageTypes = "gcp"
	ImageTypesGuestImage        ImageTypes = "guest-image"
	ImageTypesImageInstaller    ImageTypes = "image-installer"
	ImageTypesRhelEdgeCommit    ImageTypes = "rhel-edge-commit"
	ImageTypesRhelEdgeInstaller ImageTypes = "rhel-edge-installer"
	ImageTypesVhd               ImageTypes = "vhd"
	ImageTypesVsphere           ImageTypes = "vsphere"
	ImageTypesVsphereOva        ImageTypes = "vsphere-ova"
	ImageTypesWsl               ImageTypes = "wsl"
)

// Defines values for UploadStatusStatus.
const (
	UploadStatusStatusFailure UploadStatusStatus = "failure"
	UploadStatusStatusPending UploadStatusStatus = "pending"
	UploadStatusStatusRunning UploadStatusStatus = "running"
	UploadStatusStatusSuccess UploadStatusStatus = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws   UploadTypes = "aws"
	UploadTypesAwsS3 UploadTypes = "aws.s3"
	UploadTypesAzure UploadTypes = "azure"
	UploadTypesGcp   UploadTypes = "gcp"
)

// AWSEC2Clone defines model for AWSEC2Clone.
type AWSEC2Clone struct {
	// A region as described in
	// https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-regions
	Region string `json:"region"`

	// An array of AWS account IDs as described in
	// https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions = map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`

	// Base repositories for the given distribution and architecture.
	Repositories []Repository `json:"repositories"`
}

// Architectures defines model for Architectures.
type Architectures = []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {
	// Name of the created image.
	// Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens.
	// The total length is limited to 60 characters.
	ImageName *string `json:"image_name,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of the source that will be used to resolve the tenant and subscription IDs.
	// Do not provide a tenant_id or subscription_id when providing a source_id.
	SourceId *string `json:"source_id,omitempty"`

	// ID of subscription where the image should be uploaded.
	// When providing a subscription_id, also be sure to provide a tenant_id and do not include a source_id.
	SubscriptionId *string `json:"subscription_id,omitempty"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	// When providing a tenant_id, also be sure to provide a subscription_id and do not include a source_id.
	TenantId *string `json:"tenant_id,omitempty"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneRequest defines model for CloneRequest.
type CloneRequest interface{}

// CloneResponse defines model for CloneResponse.
type CloneResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ClonesResponse defines model for ClonesResponse.
type ClonesResponse struct {
	Data  []ClonesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ClonesResponseItem defines model for ClonesResponseItem.
type ClonesResponseItem struct {
	// UUID of the parent compose of the clone
	ComposeId openapi_types.UUID `json:"compose_id"`
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Request   CloneRequest       `json:"request"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`

	// List of all distributions that image builder supports. A user might not have access to
	// restricted distributions.
	//
	// Restricted distributions include the RHEL nightlies and the Fedora distributions.
	Distribution     Distributions `json:"distribution"`
	ImageDescription *string       `json:"image_description,omitempty"`
	ImageName        *string       `json:"image_name,omitempty"`

	// Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus    `json:"image_status"`
	Request     ComposeRequest `json:"request"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	ImageName *string            `json:"image_name,omitempty"`
	Request   ComposeRequest     `json:"request"`
}

// Repository configuration for custom repositories.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above. Id is required.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg *bool     `json:"check_repo_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`

	// GPG key used to sign packages in this repository. Can be a gpg key or a URL
	Gpgkey     *[]string `json:"gpgkey,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`
	Name       *string   `json:"name,omitempty"`
	Priority   *int      `json:"priority,omitempty"`
	SslVerify  *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	CustomRepositories  *[]CustomRepository `json:"custom_repositories,omitempty"`
	Filesystem          *[]Filesystem       `json:"filesystem,omitempty"`
	Openscap            *OpenSCAP           `json:"openscap,omitempty"`
	Packages            *[]string           `json:"packages,omitempty"`
	PayloadRepositories *[]Repository       `json:"payload_repositories,omitempty"`
	Subscription        *Subscription       `json:"subscription,omitempty"`

	// list of users that a customer can add, also specifying their respective groups and SSH keys
	Users *[]User `json:"users,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// List of all distributions that image builder supports. A user might not have access to
// restricted distributions.
//
// Restricted distributions include the RHEL nightlies and the Fedora distributions.
type Distributions string

// List of distributions this user is allowed to build.
type DistributionsResponse = []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {
	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	// CPU architecture of the image, x86_64 and aarch64 are currently supported.
	Architecture ImageRequestArchitecture `json:"architecture"`
	ImageType    ImageTypes               `json:"image_type"`
	Ostree       *OSTree                  `json:"ostree,omitempty"`

	// Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size          *uint64       `json:"size,omitempty"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// CPU architecture of the image, x86_64 and aarch64 are currently supported.
type ImageRequestArchitecture string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusStatus   `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusStatus defines model for ImageStatus.Status.
type ImageStatusStatus string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	ProfileId string `json:"profile_id"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool   `json:"check_repo_gpg,omitempty"`
	Gpgkey       *string `json:"gpgkey,omitempty"`
	IgnoreSsl    *bool   `json:"ignore_ssl,omitempty"`
	Metalink     *string `json:"metalink,omitempty"`
	Mirrorlist   *string `json:"mirrorlist,omitempty"`
	Rhsm         bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}        `json:"options"`
	Status  UploadStatusStatus `json:"status"`
	Type    UploadTypes        `json:"type"`
}

// UploadStatusStatus defines model for UploadStatus.Status.
type UploadStatusStatus string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Name   string `json:"name"`
	SshKey string `json:"ssh_key"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody = ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {
	// max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// CloneComposeJSONBody defines parameters for CloneCompose.
type CloneComposeJSONBody = CloneRequest

// GetComposeClonesParams defines parameters for GetComposeClones.
type GetComposeClonesParams struct {
	// max amount of clones, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// clones page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	// distribution to look up packages for
	Distribution Distributions `form:"distribution" json:"distribution"`

	// architecture to look up packages for
	Architecture GetPackagesParamsArchitecture `form:"architecture" json:"architecture"`

	// packages to look for
	Search string `form:"search" json:"search"`

	// max amount of packages, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParamsArchitecture defines parameters for GetPackages.
type GetPackagesParamsArchitecture string

// ComposeImageJSONRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody = ComposeImageJSONBody

// CloneComposeJSONRequestBody defines body for CloneCompose for application/json ContentType.
type CloneComposeJSONRequestBody = CloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// get status of a compose clone
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id openapi_types.UUID) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// delete a compose
	// (DELETE /composes/{composeId})
	DeleteCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId openapi_types.UUID) error
	// clone a compose
	// (POST /composes/{composeId}/clone)
	CloneCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get clones of a compose
	// (GET /composes/{composeId}/clones)
	GetComposeClones(ctx echo.Context, composeId openapi_types.UUID, params GetComposeClonesParams) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId openapi_types.UUID) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// DeleteCompose converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompose(ctx, composeId)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// CloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) CloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CloneCompose(ctx, composeId)
	return err
}

// GetComposeClones converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeClones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposeClonesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeClones(ctx, composeId, params)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/architectures/:distribution", wrapper.GetArchitectures)
	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.ComposeImage)
	router.GET(baseURL+"/composes", wrapper.GetComposes)
	router.DELETE(baseURL+"/composes/:composeId", wrapper.DeleteCompose)
	router.GET(baseURL+"/composes/:composeId", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:composeId/clone", wrapper.CloneCompose)
	router.GET(baseURL+"/composes/:composeId/clones", wrapper.GetComposeClones)
	router.GET(baseURL+"/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/distributions", wrapper.GetDistributions)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)
	router.GET(baseURL+"/packages", wrapper.GetPackages)
	router.GET(baseURL+"/ready", wrapper.GetReadiness)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"m40X62E+KV8ZvVG/2Hs6XcPHoqESsxn8rl5eLaD1MNNa1cWYqJZ6hO+ubk5P+6etZrNyjtttdFmzqHF+",
	"WXcf2F2v3y8pz1X1xSCr58Z505JnqHWxbJy3lvPOmJwuOxfnd/ZVq8lap6fPreay3brU263zSrPZ0ud3",
	"m9lH18/NQv302dHN9bD58nxpzNZdY0wKR9Pa++30YTG5LCntt/K8U785P71WSO/p6PS+aLmL4dHbyB2W",
	"H3v0tGyVL1yTO91B+6rb41a1fTYmRXrx/tS0R8W1c/zcafSaZ1q/1bpZz5ozZj/eN+rP927rqDAhMzpC",
	"g1JvcNOarm9b9drjcaOKbx7GxKoOjybs7mxZb5V61NSa/Ur/zLXXL8Uh5hfwpdK96z3wo1EbFiuYPQ8v",
	"WrN3u3773HgoX93Mq8qY6G+PeqN0XZhYpfb7sD5qlB/bZ5OiuZhVOuZipXfeukgvFt+fnlcWfR6+XF21",
	"pov36ZF5Pay5K/1yTGarwpWyNl9KPTy5oLWLZnN9c3z/SJsvw+Wwr7TV2aixbLfIaj48c9dv1uPyYXF9",
	"+uS2Ow+NG1R+HpM+vi9Or64bTKufOex8Ve0fPWmkT+6GR5d0NrrtnpWtR2o2NdIeGdrzQ2P2MncejbM1",
	"KxeOj9HNmBhzhfbIWpldL+fQnRbwfeNGrT0t+vNZb9C/0qv3xw/d9ZX7+Mjfl09k1r+uPg7OT9+6FfZi",
	"W/3+mEz5ZHRZPKquJ4PHQrO8OJ3A1eCxxOv379cz9R3Nhy9tDHvXx73CpXrV6gyKd+eNWqN0pjXN9vmx",
	"Nibzkn6Hn4d3TQivlKur5vvlYjAfXPV6erf0fPeML68f1iVevlqfTxmFVnU5bD3eTI1b1Fn3TkcvV2Oy",
	"oM61eTtBUzY6rtZH09LpdcfV319oq/qwOht25y/6wCg+XCyGnTvSWr/P79a19n3p7dbBj9VjoaOM287T",
	"C+3aarfc7Q2PC/j96m40MPms3/xjTP64nY7qYyKtS/v67DPT84W69XZ8Eml78H2guAMe+Biev8TyU6TZ",
	"FDrUFh5t3qZ6IZj3d2FZ//De58olzyWHVDX+CKvC+9yMjVOWRCLEQbzOq4hwm8n1/06R8PTQH40c4xRB",
	"K7IyFP/WKt4vEr9TyNDN8ABcdrofDsU2xXydHuQxZr4uEMXTdZpnkxIcpwXiiQRPWgLodbsOflj0t+1s",
	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
