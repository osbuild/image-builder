// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for Distributions.
const (
	Centos8  Distributions = "centos-8"
	Centos9  Distributions = "centos-9"
	Fedora35 Distributions = "fedora-35"
	Fedora36 Distributions = "fedora-36"
	Fedora37 Distributions = "fedora-37"
	Fedora38 Distributions = "fedora-38"
	Rhel8    Distributions = "rhel-8"
	Rhel84   Distributions = "rhel-84"
	Rhel85   Distributions = "rhel-85"
	Rhel86   Distributions = "rhel-86"
	Rhel87   Distributions = "rhel-87"
	Rhel9    Distributions = "rhel-9"
	Rhel90   Distributions = "rhel-90"
	Rhel91   Distributions = "rhel-91"
)

// Defines values for ImageRequestArchitecture.
const (
	Aarch64 ImageRequestArchitecture = "aarch64"
	X8664   ImageRequestArchitecture = "x86_64"
)

// Defines values for ImageStatusStatus.
const (
	ImageStatusStatusBuilding    ImageStatusStatus = "building"
	ImageStatusStatusFailure     ImageStatusStatus = "failure"
	ImageStatusStatusPending     ImageStatusStatus = "pending"
	ImageStatusStatusRegistering ImageStatusStatus = "registering"
	ImageStatusStatusSuccess     ImageStatusStatus = "success"
	ImageStatusStatusUploading   ImageStatusStatus = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAmi               ImageTypes = "ami"
	ImageTypesAws               ImageTypes = "aws"
	ImageTypesAzure             ImageTypes = "azure"
	ImageTypesEdgeCommit        ImageTypes = "edge-commit"
	ImageTypesEdgeInstaller     ImageTypes = "edge-installer"
	ImageTypesGcp               ImageTypes = "gcp"
	ImageTypesGuestImage        ImageTypes = "guest-image"
	ImageTypesImageInstaller    ImageTypes = "image-installer"
	ImageTypesRhelEdgeCommit    ImageTypes = "rhel-edge-commit"
	ImageTypesRhelEdgeInstaller ImageTypes = "rhel-edge-installer"
	ImageTypesVhd               ImageTypes = "vhd"
	ImageTypesVsphere           ImageTypes = "vsphere"
)

// Defines values for UploadStatusStatus.
const (
	UploadStatusStatusFailure UploadStatusStatus = "failure"
	UploadStatusStatusPending UploadStatusStatus = "pending"
	UploadStatusStatusRunning UploadStatusStatus = "running"
	UploadStatusStatusSuccess UploadStatusStatus = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws   UploadTypes = "aws"
	UploadTypesAwsS3 UploadTypes = "aws.s3"
	UploadTypesAzure UploadTypes = "azure"
	UploadTypesGcp   UploadTypes = "gcp"
)

// AWSEC2Clone defines model for AWSEC2Clone.
type AWSEC2Clone struct {
	// A region as described in
	// https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-regions
	Region string `json:"region"`

	// An array of AWS account IDs as described in
	// https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions = map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`

	// Base repositories for the given distribution and architecture.
	Repositories []Repository `json:"repositories"`
}

// Architectures defines model for Architectures.
type Architectures = []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {
	// Name of the created image.
	// Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens.
	// The total length is limited to 60 characters.
	ImageName *string `json:"image_name,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of the source that will be used to resolve the tenant and subscription IDs.
	// Do not provide a tenant_id or subscription_id when providing a source_id.
	SourceId *string `json:"source_id,omitempty"`

	// ID of subscription where the image should be uploaded.
	// When providing a subscription_id, also be sure to provide a tenant_id and do not include a source_id.
	SubscriptionId *string `json:"subscription_id,omitempty"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	// When providing a tenant_id, also be sure to provide a subscription_id and do not include a source_id.
	TenantId *string `json:"tenant_id,omitempty"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneRequest defines model for CloneRequest.
type CloneRequest interface{}

// CloneResponse defines model for CloneResponse.
type CloneResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ClonesResponse defines model for ClonesResponse.
type ClonesResponse struct {
	Data  []ClonesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ClonesResponseItem defines model for ClonesResponseItem.
type ClonesResponseItem struct {
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Request   interface{}        `json:"request"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   Distributions   `json:"distribution"`
	ImageName      *string         `json:"image_name,omitempty"`

	// Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus `json:"image_status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	ImageName *string            `json:"image_name,omitempty"`
	Request   interface{}        `json:"request"`
}

// Repository configuration for custom repositories.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above. Id is required.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg *bool     `json:"check_repo_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`

	// GPG key used to sign packages in this repository. Can be a gpg key or a URL
	Gpgkey     *[]string `json:"gpgkey,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`
	Name       *string   `json:"name,omitempty"`
	Priority   *int      `json:"priority,omitempty"`
	SslVerify  *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	CustomRepositories  *[]CustomRepository `json:"custom_repositories,omitempty"`
	Filesystem          *[]Filesystem       `json:"filesystem,omitempty"`
	Packages            *[]string           `json:"packages,omitempty"`
	PayloadRepositories *[]Repository       `json:"payload_repositories,omitempty"`
	Subscription        *Subscription       `json:"subscription,omitempty"`

	// list of users that a customer can add, also specifying their respective groups and SSH keys
	Users *[]User `json:"users,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions string

// DistributionsResponse defines model for DistributionsResponse.
type DistributionsResponse = []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {
	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	// CPU architecture of the image, x86_64 and aarch64 are currently supported.
	Architecture  ImageRequestArchitecture `json:"architecture"`
	ImageType     ImageTypes               `json:"image_type"`
	Ostree        *OSTree                  `json:"ostree,omitempty"`
	UploadRequest UploadRequest            `json:"upload_request"`
}

// CPU architecture of the image, x86_64 and aarch64 are currently supported.
type ImageRequestArchitecture string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusStatus   `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusStatus defines model for ImageStatus.Status.
type ImageStatusStatus string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool   `json:"check_repo_gpg,omitempty"`
	Gpgkey       *string `json:"gpgkey,omitempty"`
	IgnoreSsl    *bool   `json:"ignore_ssl,omitempty"`
	Metalink     *string `json:"metalink,omitempty"`
	Mirrorlist   *string `json:"mirrorlist,omitempty"`
	Rhsm         bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}        `json:"options"`
	Status  UploadStatusStatus `json:"status"`
	Type    UploadTypes        `json:"type"`
}

// UploadStatusStatus defines model for UploadStatus.Status.
type UploadStatusStatus string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Name   string `json:"name"`
	SshKey string `json:"ssh_key"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody = ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {
	// max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// CloneComposeJSONBody defines parameters for CloneCompose.
type CloneComposeJSONBody = CloneRequest

// GetComposeClonesParams defines parameters for GetComposeClones.
type GetComposeClonesParams struct {
	// max amount of clones, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// clones page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	// distribution to look up packages for
	Distribution Distributions `form:"distribution" json:"distribution"`

	// architecture to look up packages for
	Architecture GetPackagesParamsArchitecture `form:"architecture" json:"architecture"`

	// packages to look for
	Search string `form:"search" json:"search"`

	// max amount of packages, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParamsArchitecture defines parameters for GetPackages.
type GetPackagesParamsArchitecture string

// ComposeImageJSONRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody = ComposeImageJSONBody

// CloneComposeJSONRequestBody defines body for CloneCompose for application/json ContentType.
type CloneComposeJSONRequestBody = CloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// get status of a compose clone
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id openapi_types.UUID) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId openapi_types.UUID) error
	// clone a compose
	// (POST /composes/{composeId}/clone)
	CloneCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get clones of a compose
	// (GET /composes/{composeId}/clones)
	GetComposeClones(ctx echo.Context, composeId openapi_types.UUID, params GetComposeClonesParams) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId openapi_types.UUID) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// CloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) CloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CloneCompose(ctx, composeId)
	return err
}

// GetComposeClones converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeClones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposeClonesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeClones(ctx, composeId, params)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/architectures/:distribution", wrapper.GetArchitectures)
	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.ComposeImage)
	router.GET(baseURL+"/composes", wrapper.GetComposes)
	router.GET(baseURL+"/composes/:composeId", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:composeId/clone", wrapper.CloneCompose)
	router.GET(baseURL+"/composes/:composeId/clones", wrapper.GetComposeClones)
	router.GET(baseURL+"/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/distributions", wrapper.GetDistributions)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)
	router.GET(baseURL+"/packages", wrapper.GetPackages)
	router.GET(baseURL+"/ready", wrapper.GetReadiness)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"GOBSpCINEVUo7xGRYTq0EYBMGmukATh2ZigL2prQ7iHBfHUe51+A+EZGNYzXVI1kKdJM6MdqqkM4Ijwn",
	"VHKOmsiq5Wo5P2+YEws5LOewXCwTu2Y9xYckCFUTqdNXwzUigjB2HAtBsn4tOLJ7DCJwbCEt+aWOLbRT",
	"zgzXmKIEKTm/OQdTtFzlPRg2CAgdJz/klWQOZSkLmpCISBMCwzXkVIcCCO763XjBIyP+NVrn7Stwc34D",
	"bu4a3XYTdFpPoNG9bnbk6xEZEfu2fdU4r6sD1Wm06qddvfZ0MUXvlxWoWb2neRWen7etS2jx2uWksMg1",
	"Cp0js623vcU5d+8nVTQi3b5xeletTOCw7N6flu2z3mXRnSKC+jl1aL+93U6vlrfMfCw4t4/z1vvdYJxv",
	"XvWaevPcmD7Wbgsj8v48pW21Sc+U28KcdsYW9DTz7gjfQ1I/ZXa+9tR6Y+Ny/a5Y1fgd7RVvn7QH47h/",
	"9Ihv9Ptaf0Q6jclQKc7uG9dab8Ceisdd2CSVtpu/nrm1dsvJtVHr/in/Zjevb+qwo4wvL4qebpSaHpqy",
	"o+FgROa3D0PU7C68527luvfoXN905rPerb4YG/nH09rMe1Y6fJJTry4KC+gpC5vVveOLSxdNZ9c3/YU1",
	"Iss3Plk+69S5x+hs6c6fjdntnBPSq+WMQcvLXd4P6ZNSLtitu2G1qY6rpal6cTY803tTi0zPcyOi6Hel",
	"eh+WldJFcTFRpnyMirOOevPo3Fx7ncY9uxjMFOXu/Km+vEHe8qhWVe9yTy2zV50WB/edyYhUUPvZWOLe",
	"tTK38k/np/2O6lnzKTuuH3nW1Mg7w3GJFd/t59mNUj13houHUmECO+WHwdGV+YzQiNQqyqNzb47VfMcd",
	"HE30Z2fCaIs/127Gd89HT7OzWt+l2kOdTi7Gl9PCpdvv1BdDc8Fu66xhnudHROl6i8ID7DUUo9Au36g9",
	"7TKnvk0cpaaqdNJ49PDigeIy9o57j27tbZjTB+9XNtPaBqnl3p47I4Jrt56le9Wq92Y+5Oa8MOYEc6PP",
	"3ibmoudNnu5Kz+OSOeVnNbNzl3t8rJYKb2a33JnX+/XbemNE+OnZ+fNDf6baLaNz2st3BvXas30/HRcv",
	"ze6wl+8+NpbwIW+qxKqH36sXlzNo30+0Znk2IqqtHuHby+tGo9do1uulM9xqoYuKTc2zi6p3z267vV5B",
	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
