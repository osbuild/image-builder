// Package server provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions map[string]interface{}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`
}

// Architectures defines model for Architectures.
type Architectures []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequests  []ImageRequest  `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id string `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus `json:"image_status"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string      `json:"created_at"`
	Id        string      `json:"id"`
	Request   interface{} `json:"request"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Packages     *[]string     `json:"packages,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions []DistributionItem

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {

	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture  string        `json:"architecture"`
	ImageType     string        `json:"image_type"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Status       string        `json:"status"`
	UploadStatus *UploadStatus `json:"upload_status,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
	Version string `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`
	ServerUrl     string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{} `json:"options"`
	Status  string      `json:"status"`
	Type    UploadTypes `json:"type"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// List of UploadTypes
const (
	UploadTypes_aws    UploadTypes = "aws"
	UploadTypes_aws_s3 UploadTypes = "aws.s3"
	UploadTypes_azure  UploadTypes = "azure"
	UploadTypes_gcp    UploadTypes = "gcp"
)

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {

	// max amount of composes, default 100
	Limit *int `json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {

	// distribution to look up packages for
	Distribution string `json:"distribution"`

	// architecture to look up packages for
	Architecture string `json:"architecture"`

	// packages to look for
	Search string `json:"search"`

	// max amount of packages, default 100
	Limit *int `json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// ComposeImageRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody ComposeImageJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId string) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameter("simple", false, "distribution", ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameter("simple", false, "composeId", ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/architectures/:distribution", wrapper.GetArchitectures)
	router.POST("/compose", wrapper.ComposeImage)
	router.GET("/composes", wrapper.GetComposes)
	router.GET("/composes/:composeId", wrapper.GetComposeStatus)
	router.GET("/distributions", wrapper.GetDistributions)
	router.GET("/openapi.json", wrapper.GetOpenapiJson)
	router.GET("/packages", wrapper.GetPackages)
	router.GET("/ready", wrapper.GetReadiness)
	router.GET("/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
