// Package server provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`
}

// Architectures defines model for Architectures.
type Architectures []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequests  []ImageRequest  `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id string `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus `json:"image_status"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Packages     *[]string     `json:"packages,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions []DistributionItem

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {

	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture  string        `json:"architecture"`
	ImageType     string        `json:"image_type"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Status       string        `json:"status"`
	UploadStatus *UploadStatus `json:"upload_status,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
	Version string `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`
	ServerUrl     string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{} `json:"options"`
	Status  string      `json:"status"`
	Type    UploadTypes `json:"type"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody ComposeRequest

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {

	// distribution to look up packages for
	Distribution string `json:"distribution"`

	// architecture to look up packages for
	Architecture string `json:"architecture"`

	// packages to look for
	Search string `json:"search"`

	// max amount of packages, default 100
	Limit *int `json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// ComposeImageRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody ComposeImageJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId string) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameter("simple", false, "distribution", ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameter("simple", false, "composeId", ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/architectures/:distribution", wrapper.GetArchitectures)
	router.POST("/compose", wrapper.ComposeImage)
	router.GET("/composes/:composeId", wrapper.GetComposeStatus)
	router.GET("/distributions", wrapper.GetDistributions)
	router.GET("/openapi.json", wrapper.GetOpenapiJson)
	router.GET("/packages", wrapper.GetPackages)
	router.GET("/ready", wrapper.GetReadiness)
	router.GET("/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
