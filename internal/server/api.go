// Package server provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`
}

// Architectures defines model for Architectures.
type Architectures []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequests  []ImageRequest  `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id string `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus `json:"image_status"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string      `json:"created_at"`
	Id        string      `json:"id"`
	Request   interface{} `json:"request"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Packages     *[]string     `json:"packages,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions []DistributionItem

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {

	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture  string        `json:"architecture"`
	ImageType     string        `json:"image_type"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Status       string        `json:"status"`
	UploadStatus *UploadStatus `json:"upload_status,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
	Version string `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`
	ServerUrl     string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{} `json:"options"`
	Status  string      `json:"status"`
	Type    UploadTypes `json:"type"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// List of UploadTypes
const (
	UploadTypes_aws   UploadTypes = "aws"
	UploadTypes_azure UploadTypes = "azure"
	UploadTypes_gcp   UploadTypes = "gcp"
)

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {

	// max amount of composes, default 100
	Limit *int `json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {

	// distribution to look up packages for
	Distribution string `json:"distribution"`

	// architecture to look up packages for
	Architecture string `json:"architecture"`

	// packages to look for
	Search string `json:"search"`

	// max amount of packages, default 100
	Limit *int `json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// ComposeImageRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody ComposeImageJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId string) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameter("simple", false, "distribution", ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameter("simple", false, "composeId", ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/architectures/:distribution", wrapper.GetArchitectures)
	router.POST("/compose", wrapper.ComposeImage)
	router.GET("/composes", wrapper.GetComposes)
	router.GET("/composes/:composeId", wrapper.GetComposeStatus)
	router.GET("/distributions", wrapper.GetDistributions)
	router.GET("/openapi.json", wrapper.GetOpenapiJson)
	router.GET("/packages", wrapper.GetPackages)
	router.GET("/ready", wrapper.GetReadiness)
	router.GET("/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"8re7fwUAAP//yjnGVygtAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
