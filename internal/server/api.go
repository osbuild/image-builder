// Package server provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`
}

// Architectures defines model for Architectures.
type Architectures []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequests  []ImageRequest  `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id string `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus `json:"image_status"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string      `json:"created_at"`
	Id        string      `json:"id"`
	Request   interface{} `json:"request"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Packages     *[]string     `json:"packages,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions []DistributionItem

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {

	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture  string        `json:"architecture"`
	ImageType     string        `json:"image_type"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Status       string        `json:"status"`
	UploadStatus *UploadStatus `json:"upload_status,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
	Version string `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`
	ServerUrl     string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{} `json:"options"`
	Status  string      `json:"status"`
	Type    UploadTypes `json:"type"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// List of UploadTypes
const (
	UploadTypes_aws    UploadTypes = "aws"
	UploadTypes_aws_s3 UploadTypes = "aws.s3"
	UploadTypes_azure  UploadTypes = "azure"
	UploadTypes_gcp    UploadTypes = "gcp"
)

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {

	// max amount of composes, default 100
	Limit *int `json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {

	// distribution to look up packages for
	Distribution string `json:"distribution"`

	// architecture to look up packages for
	Architecture string `json:"architecture"`

	// packages to look for
	Search string `json:"search"`

	// max amount of packages, default 100
	Limit *int `json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// ComposeImageRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody ComposeImageJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId string) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameter("simple", false, "distribution", ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameter("simple", false, "composeId", ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/architectures/:distribution", wrapper.GetArchitectures)
	router.POST("/compose", wrapper.ComposeImage)
	router.GET("/composes", wrapper.GetComposes)
	router.GET("/composes/:composeId", wrapper.GetComposeStatus)
	router.GET("/distributions", wrapper.GetDistributions)
	router.GET("/openapi.json", wrapper.GetOpenapiJson)
	router.GET("/packages", wrapper.GetPackages)
	router.GET("/ready", wrapper.GetReadiness)
	router.GET("/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
