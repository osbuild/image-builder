// Package server provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`
}

// Architectures defines model for Architectures.
type Architectures []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {

	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequests  []ImageRequest  `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id string `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus `json:"image_status"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string      `json:"created_at"`
	Id        string      `json:"id"`
	Request   interface{} `json:"request"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Packages     *[]string     `json:"packages,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions []DistributionItem

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {

	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture  string        `json:"architecture"`
	ImageType     string        `json:"image_type"`
	Ostree        *OSTree       `json:"ostree,omitempty"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Status       string        `json:"status"`
	UploadStatus *UploadStatus `json:"upload_status,omitempty"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	Ref *string `json:"ref,omitempty"`
	Url *string `json:"url,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
	Version string `json:"version"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`
	ServerUrl     string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{} `json:"options"`
	Status  string      `json:"status"`
	Type    UploadTypes `json:"type"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// List of UploadTypes
const (
	UploadTypes_aws    UploadTypes = "aws"
	UploadTypes_aws_s3 UploadTypes = "aws.s3"
	UploadTypes_azure  UploadTypes = "azure"
	UploadTypes_gcp    UploadTypes = "gcp"
)

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {

	// max amount of composes, default 100
	Limit *int `json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {

	// distribution to look up packages for
	Distribution string `json:"distribution"`

	// architecture to look up packages for
	Architecture string `json:"architecture"`

	// packages to look for
	Search string `json:"search"`

	// max amount of packages, default 100
	Limit *int `json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// ComposeImageRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody ComposeImageJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId string) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId string) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameter("simple", false, "distribution", ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameter("simple", false, "composeId", ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameter("simple", false, "composeId", ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/architectures/:distribution", wrapper.GetArchitectures)
	router.POST("/compose", wrapper.ComposeImage)
	router.GET("/composes", wrapper.GetComposes)
	router.GET("/composes/:composeId", wrapper.GetComposeStatus)
	router.GET("/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET("/distributions", wrapper.GetDistributions)
	router.GET("/openapi.json", wrapper.GetOpenapiJson)
	router.GET("/packages", wrapper.GetPackages)
	router.GET("/ready", wrapper.GetReadiness)
	router.GET("/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"J9MyAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
