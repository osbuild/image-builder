// Package server provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`
}

// Architectures defines model for Architectures.
type Architectures []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequests  []ImageRequest  `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id string `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus `json:"image_status"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string      `json:"created_at"`
	Id        string      `json:"id"`
	Request   interface{} `json:"request"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Packages     *[]string     `json:"packages,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions []DistributionItem

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {

	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture  string        `json:"architecture"`
	ImageType     string        `json:"image_type"`
	Ostree        *OSTree       `json:"ostree,omitempty"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Status       string        `json:"status"`
	UploadStatus *UploadStatus `json:"upload_status,omitempty"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	Ref *string `json:"ref,omitempty"`
	Url *string `json:"url,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
	Version string `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`
	ServerUrl     string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{} `json:"options"`
	Status  string      `json:"status"`
	Type    UploadTypes `json:"type"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// List of UploadTypes
const (
	UploadTypes_aws    UploadTypes = "aws"
	UploadTypes_aws_s3 UploadTypes = "aws.s3"
	UploadTypes_azure  UploadTypes = "azure"
	UploadTypes_gcp    UploadTypes = "gcp"
)

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {

	// max amount of composes, default 100
	Limit *int `json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {

	// distribution to look up packages for
	Distribution string `json:"distribution"`

	// architecture to look up packages for
	Architecture string `json:"architecture"`

	// packages to look for
	Search string `json:"search"`

	// max amount of packages, default 100
	Limit *int `json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// ComposeImageRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody ComposeImageJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId string) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameter("simple", false, "distribution", ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameter("simple", false, "composeId", ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/architectures/:distribution", wrapper.GetArchitectures)
	router.POST("/compose", wrapper.ComposeImage)
	router.GET("/composes", wrapper.GetComposes)
	router.GET("/composes/:composeId", wrapper.GetComposeStatus)
	router.GET("/distributions", wrapper.GetDistributions)
	router.GET("/openapi.json", wrapper.GetOpenapiJson)
	router.GET("/packages", wrapper.GetPackages)
	router.GET("/ready", wrapper.GetReadiness)
	router.GET("/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"3im6mfLsWdet/M3uXwEAAP//DAj9wNQuAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
