// Package content_sources provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package content_sources

// ApiContentUnitSearchRequest defines model for api.ContentUnitSearchRequest.
type ApiContentUnitSearchRequest struct {
	// Limit Maximum number of records to return for the search
	Limit *int `json:"limit,omitempty"`

	// Search Search string to search content unit names
	Search *string `json:"search,omitempty"`

	// Urls URLs of repositories to search
	Urls *[]string `json:"urls,omitempty"`

	// Uuids List of repository UUIDs to search
	Uuids *[]string `json:"uuids,omitempty"`
}

// ApiDetectRpmsRequest defines model for api.DetectRpmsRequest.
type ApiDetectRpmsRequest struct {
	// Limit Maximum number of records to return for the search
	Limit *int `json:"limit,omitempty"`

	// RpmNames List of rpm names to search
	RpmNames *[]string `json:"rpm_names,omitempty"`

	// Urls URLs of repositories to search
	Urls *[]string `json:"urls,omitempty"`

	// Uuids List of repository UUIDs to search
	Uuids *[]string `json:"uuids,omitempty"`
}

// ApiDetectRpmsResponse defines model for api.DetectRpmsResponse.
type ApiDetectRpmsResponse struct {
	// Found List of rpm names found in given repositories
	Found *[]string `json:"found,omitempty"`

	// Missing List of rpm names not found in given repositories
	Missing *[]string `json:"missing,omitempty"`
}

// ApiFeature defines model for api.Feature.
type ApiFeature struct {
	// Accessible Whether the current user can access the feature
	Accessible *bool `json:"accessible,omitempty"`

	// Enabled Whether the feature is enabled on the running server
	Enabled *bool `json:"enabled,omitempty"`
}

// ApiFeatureSet defines model for api.FeatureSet.
type ApiFeatureSet map[string]ApiFeature

// ApiFetchGPGKeyResponse defines model for api.FetchGPGKeyResponse.
type ApiFetchGPGKeyResponse struct {
	// GpgKey The downloaded GPG Keys from the provided url.
	GpgKey *string `json:"gpg_key,omitempty"`
}

// ApiGenericAttributeValidationResponse defines model for api.GenericAttributeValidationResponse.
type ApiGenericAttributeValidationResponse struct {
	// Error Error message if the attribute is not valid
	Error *string `json:"error,omitempty"`

	// Skipped Skipped if the attribute is not passed in for validation
	Skipped *bool `json:"skipped,omitempty"`

	// Valid Valid if not skipped and the provided attribute is valid
	Valid *bool `json:"valid,omitempty"`
}

// ApiLinks defines model for api.Links.
type ApiLinks struct {
	// First Path to first page of results
	First *string `json:"first,omitempty"`

	// Last Path to last page of results
	Last *string `json:"last,omitempty"`

	// Next Path to next page of results
	Next *string `json:"next,omitempty"`

	// Prev Path to previous page of results
	Prev *string `json:"prev,omitempty"`
}

// ApiListSnapshotByDateRequest defines model for api.ListSnapshotByDateRequest.
type ApiListSnapshotByDateRequest struct {
	// Date Exact date to search by.
	Date *string `json:"date,omitempty"`

	// RepositoryUuids Repository UUIDs to find snapshots for
	RepositoryUuids *[]string `json:"repository_uuids,omitempty"`
}

// ApiListSnapshotByDateResponse defines model for api.ListSnapshotByDateResponse.
type ApiListSnapshotByDateResponse struct {
	// Data Requested Data
	Data *[]ApiSnapshotForDate `json:"data,omitempty"`
}

// ApiPopularRepositoriesCollectionResponse defines model for api.PopularRepositoriesCollectionResponse.
type ApiPopularRepositoriesCollectionResponse struct {
	Data  *[]ApiPopularRepositoryResponse `json:"data,omitempty"`
	Links *ApiLinks                       `json:"links,omitempty"`
	Meta  *ApiResponseMetadata            `json:"meta,omitempty"`
}

// ApiPopularRepositoryResponse defines model for api.PopularRepositoryResponse.
type ApiPopularRepositoryResponse struct {
	// DistributionArch Architecture to restrict client usage to
	DistributionArch *string `json:"distribution_arch,omitempty"`

	// DistributionVersions Versions to restrict client usage to
	DistributionVersions *[]string `json:"distribution_versions,omitempty"`

	// ExistingName Existing reference name for repository
	ExistingName *string `json:"existing_name,omitempty"`

	// GpgKey GPG key for repository
	GpgKey *string `json:"gpg_key,omitempty"`

	// MetadataVerification Verify packages
	MetadataVerification *bool `json:"metadata_verification,omitempty"`

	// SuggestedName Suggested name of the popular repository
	SuggestedName *string `json:"suggested_name,omitempty"`

	// Url URL of the remote yum repository
	Url *string `json:"url,omitempty"`

	// Uuid UUID of the repository if it exists for the user
	Uuid *string `json:"uuid,omitempty"`
}

// ApiPublicRepositoryCollectionResponse defines model for api.PublicRepositoryCollectionResponse.
type ApiPublicRepositoryCollectionResponse struct {
	Data  *[]ApiPublicRepositoryResponse `json:"data,omitempty"`
	Links *ApiLinks                      `json:"links,omitempty"`
	Meta  *ApiResponseMetadata           `json:"meta,omitempty"`
}

// ApiPublicRepositoryResponse defines model for api.PublicRepositoryResponse.
type ApiPublicRepositoryResponse struct {
	// LastIntrospectionError Error of last attempted introspection
	LastIntrospectionError *string `json:"last_introspection_error,omitempty"`

	// LastIntrospectionStatus Status of last introspection
	LastIntrospectionStatus *string `json:"last_introspection_status,omitempty"`

	// LastIntrospectionTime Timestamp of last attempted introspection
	LastIntrospectionTime *string `json:"last_introspection_time,omitempty"`

	// LastSuccessIntrospectionTime Timestamp of last successful introspection
	LastSuccessIntrospectionTime *string `json:"last_success_introspection_time,omitempty"`

	// LastUpdateIntrospectionTime Timestamp of last introspection that had updates
	LastUpdateIntrospectionTime *string `json:"last_update_introspection_time,omitempty"`

	// PackageCount Number of packages last read in the repository
	PackageCount *int `json:"package_count,omitempty"`

	// Status Combined introspection and snapshot status of the repository
	Status *string `json:"status,omitempty"`

	// Url URL of the remote yum repository
	Url *string `json:"url,omitempty"`
}

// ApiRepositoryCollectionResponse defines model for api.RepositoryCollectionResponse.
type ApiRepositoryCollectionResponse struct {
	// Data Requested Data
	Data  *[]ApiRepositoryResponse `json:"data,omitempty"`
	Links *ApiLinks                `json:"links,omitempty"`
	Meta  *ApiResponseMetadata     `json:"meta,omitempty"`
}

// ApiRepositoryEnvironment defines model for api.RepositoryEnvironment.
type ApiRepositoryEnvironment struct {
	// Description The environment description
	Description *string `json:"description,omitempty"`

	// Id The environment ID
	Id *string `json:"id,omitempty"`

	// Name The environment name
	Name *string `json:"name,omitempty"`

	// Uuid Identifier of the environment
	Uuid *string `json:"uuid,omitempty"`
}

// ApiRepositoryEnvironmentCollectionResponse defines model for api.RepositoryEnvironmentCollectionResponse.
type ApiRepositoryEnvironmentCollectionResponse struct {
	// Data List of environments
	Data  *[]ApiRepositoryEnvironment `json:"data,omitempty"`
	Links *ApiLinks                   `json:"links,omitempty"`
	Meta  *ApiResponseMetadata        `json:"meta,omitempty"`
}

// ApiRepositoryIntrospectRequest defines model for api.RepositoryIntrospectRequest.
type ApiRepositoryIntrospectRequest struct {
	// ResetCount Reset the failed introspections count
	ResetCount *bool `json:"reset_count,omitempty"`
}

// ApiRepositoryPackageGroup defines model for api.RepositoryPackageGroup.
type ApiRepositoryPackageGroup struct {
	// Description The package group description
	Description *string `json:"description,omitempty"`

	// Id The package group ID
	Id *string `json:"id,omitempty"`

	// Name The package group name
	Name *string `json:"name,omitempty"`

	// Packagelist The list of packages in the package group
	Packagelist *[]string `json:"packagelist,omitempty"`

	// Uuid Identifier of the package group
	Uuid *string `json:"uuid,omitempty"`
}

// ApiRepositoryPackageGroupCollectionResponse defines model for api.RepositoryPackageGroupCollectionResponse.
type ApiRepositoryPackageGroupCollectionResponse struct {
	// Data List of package groups
	Data  *[]ApiRepositoryPackageGroup `json:"data,omitempty"`
	Links *ApiLinks                    `json:"links,omitempty"`
	Meta  *ApiResponseMetadata         `json:"meta,omitempty"`
}

// ApiRepositoryParameterResponse defines model for api.RepositoryParameterResponse.
type ApiRepositoryParameterResponse struct {
	// DistributionArches Architectures available for repository creation
	DistributionArches *[]ConfigDistributionArch `json:"distribution_arches,omitempty"`

	// DistributionVersions Versions available for repository creation
	DistributionVersions *[]ConfigDistributionVersion `json:"distribution_versions,omitempty"`
}

// ApiRepositoryRequest defines model for api.RepositoryRequest.
type ApiRepositoryRequest struct {
	// DistributionArch Architecture to restrict client usage to
	DistributionArch *string `json:"distribution_arch,omitempty"`

	// DistributionVersions Versions to restrict client usage to
	DistributionVersions *[]string `json:"distribution_versions,omitempty"`

	// GpgKey GPG key for repository
	GpgKey *string `json:"gpg_key,omitempty"`

	// MetadataVerification Verify packages
	MetadataVerification *bool `json:"metadata_verification,omitempty"`

	// ModuleHotfixes Disable modularity filtering on this repository
	ModuleHotfixes *bool `json:"module_hotfixes,omitempty"`

	// Name Name of the remote yum repository
	Name *string `json:"name,omitempty"`

	// Snapshot Enable snapshotting and hosting of this repository
	Snapshot *bool `json:"snapshot,omitempty"`

	// Url URL of the remote yum repository
	Url *string `json:"url,omitempty"`
}

// ApiRepositoryResponse defines model for api.RepositoryResponse.
type ApiRepositoryResponse struct {
	// AccountId Account ID of the owner
	AccountId *string `json:"account_id,omitempty"`

	// ContentType Content Type (rpm) of the repository
	ContentType *string `json:"content_type,omitempty"`

	// DistributionArch Architecture to restrict client usage to
	DistributionArch *string `json:"distribution_arch,omitempty"`

	// DistributionVersions Versions to restrict client usage to
	DistributionVersions *[]string `json:"distribution_versions,omitempty"`

	// FailedIntrospectionsCount Number of consecutive failed introspections
	FailedIntrospectionsCount *int `json:"failed_introspections_count,omitempty"`

	// GpgKey GPG key for repository
	GpgKey *string `json:"gpg_key,omitempty"`

	// Label Label used to configure the yum repository on clients
	Label *string `json:"label,omitempty"`

	// LastIntrospectionError Error of last attempted introspection
	LastIntrospectionError *string `json:"last_introspection_error,omitempty"`

	// LastIntrospectionStatus Status of last introspection
	LastIntrospectionStatus *string `json:"last_introspection_status,omitempty"`

	// LastIntrospectionTime Timestamp of last attempted introspection
	LastIntrospectionTime *string              `json:"last_introspection_time,omitempty"`
	LastSnapshot          *ApiSnapshotResponse `json:"last_snapshot,omitempty"`
	LastSnapshotTask      *ApiTaskInfoResponse `json:"last_snapshot_task,omitempty"`

	// LastSnapshotTaskUuid UUID of the last snapshot task
	LastSnapshotTaskUuid *string `json:"last_snapshot_task_uuid,omitempty"`

	// LastSnapshotUuid UUID of the last dao.Snapshot
	LastSnapshotUuid *string `json:"last_snapshot_uuid,omitempty"`

	// LastSuccessIntrospectionTime Timestamp of last successful introspection
	LastSuccessIntrospectionTime *string `json:"last_success_introspection_time,omitempty"`

	// LastUpdateIntrospectionTime Timestamp of last introspection that had updates
	LastUpdateIntrospectionTime *string `json:"last_update_introspection_time,omitempty"`

	// MetadataVerification Verify packages
	MetadataVerification *bool `json:"metadata_verification,omitempty"`

	// ModuleHotfixes Disable modularity filtering on this repository
	ModuleHotfixes *bool `json:"module_hotfixes,omitempty"`

	// Name Name of the remote yum repository
	Name *string `json:"name,omitempty"`

	// OrgId Organization ID of the owner
	OrgId *string `json:"org_id,omitempty"`

	// Origin Origin of the repository
	Origin *string `json:"origin,omitempty"`

	// PackageCount Number of packages last read in the repository
	PackageCount *int `json:"package_count,omitempty"`

	// Snapshot Enable snapshotting and hosting of this repository
	Snapshot *bool `json:"snapshot,omitempty"`

	// Status Combined status of last introspection and snapshot of repository (Valid, Invalid, Unavailable, Pending)
	Status *string `json:"status,omitempty"`

	// Url URL of the remote yum repository
	Url *string `json:"url,omitempty"`

	// Uuid UUID of the object
	Uuid *string `json:"uuid,omitempty"`
}

// ApiRepositoryRpm defines model for api.RepositoryRpm.
type ApiRepositoryRpm struct {
	// Arch The architecture of the rpm
	Arch *string `json:"arch,omitempty"`

	// Checksum The checksum of the rpm
	Checksum *string `json:"checksum,omitempty"`

	// Epoch The epoch of the rpm
	Epoch *int `json:"epoch,omitempty"`

	// Name The rpm package name
	Name *string `json:"name,omitempty"`

	// Release The release of the rpm
	Release *string `json:"release,omitempty"`

	// Summary The summary of the rpm
	Summary *string `json:"summary,omitempty"`

	// Uuid Identifier of the rpm
	Uuid *string `json:"uuid,omitempty"`

	// Version The version of the  rpm
	Version *string `json:"version,omitempty"`
}

// ApiRepositoryRpmCollectionResponse defines model for api.RepositoryRpmCollectionResponse.
type ApiRepositoryRpmCollectionResponse struct {
	// Data List of rpms
	Data  *[]ApiRepositoryRpm  `json:"data,omitempty"`
	Links *ApiLinks            `json:"links,omitempty"`
	Meta  *ApiResponseMetadata `json:"meta,omitempty"`
}

// ApiRepositoryValidationRequest defines model for api.RepositoryValidationRequest.
type ApiRepositoryValidationRequest struct {
	// GpgKey GPGKey of the remote yum repository
	GpgKey *string `json:"gpg_key,omitempty"`

	// MetadataVerification If set, attempt to validate the yum metadata with the specified GPG Key
	MetadataVerification *bool `json:"metadata_verification,omitempty"`

	// Name Name of the remote yum repository
	Name *string `json:"name,omitempty"`

	// Url URL of the remote yum repository
	Url *string `json:"url,omitempty"`

	// Uuid If set, this is an "Update" validation
	Uuid *string `json:"uuid,omitempty"`
}

// ApiRepositoryValidationResponse defines model for api.RepositoryValidationResponse.
type ApiRepositoryValidationResponse struct {
	GpgKey *ApiGenericAttributeValidationResponse `json:"gpg_key,omitempty"`
	Name   *ApiGenericAttributeValidationResponse `json:"name,omitempty"`
	Url    *ApiUrlValidationResponse              `json:"url,omitempty"`
}

// ApiResponseMetadata defines model for api.ResponseMetadata.
type ApiResponseMetadata struct {
	// Count Total count of results
	Count *int `json:"count,omitempty"`

	// Limit Limit of results used for the request
	Limit *int `json:"limit,omitempty"`

	// Offset Offset into results used for the request
	Offset *int `json:"offset,omitempty"`
}

// ApiSearchEnvironmentResponse defines model for api.SearchEnvironmentResponse.
type ApiSearchEnvironmentResponse struct {
	// Description Description of the environment found
	Description *string `json:"description,omitempty"`

	// EnvironmentName Environment found
	EnvironmentName *string `json:"environment_name,omitempty"`

	// Id ID of the environment found
	Id *string `json:"id,omitempty"`
}

// ApiSearchPackageGroupResponse defines model for api.SearchPackageGroupResponse.
type ApiSearchPackageGroupResponse struct {
	// Description Description of the package group found
	Description *string `json:"description,omitempty"`

	// Id Package group ID
	Id *string `json:"id,omitempty"`

	// PackageGroupName Name of package group found
	PackageGroupName *string `json:"package_group_name,omitempty"`

	// PackageList Package list of the package group found
	PackageList *[]string `json:"package_list,omitempty"`
}

// ApiSearchRpmResponse defines model for api.SearchRpmResponse.
type ApiSearchRpmResponse struct {
	// PackageName Package name found
	PackageName *string `json:"package_name,omitempty"`

	// Summary Summary of the package found
	Summary *string `json:"summary,omitempty"`
}

// ApiSnapshotCollectionResponse defines model for api.SnapshotCollectionResponse.
type ApiSnapshotCollectionResponse struct {
	// Data Requested Data
	Data  *[]ApiSnapshotResponse `json:"data,omitempty"`
	Links *ApiLinks              `json:"links,omitempty"`
	Meta  *ApiResponseMetadata   `json:"meta,omitempty"`
}

// ApiSnapshotErrata defines model for api.SnapshotErrata.
type ApiSnapshotErrata struct {
	// Description Description of the errata
	Description *string `json:"description,omitempty"`

	// ErrataId ID of the errata
	ErrataId *string `json:"errata_id,omitempty"`
	Id       *string `json:"id,omitempty"`

	// IssuedDate IssuedDate of the errata
	IssuedDate *string `json:"issued_date,omitempty"`

	// RebootSuggested Whether a reboot is suggested
	RebootSuggested *bool `json:"reboot_suggested,omitempty"`

	// Severity Severity of the errata
	Severity *string `json:"severity,omitempty"`

	// Summary Summary of the errata
	Summary *string `json:"summary,omitempty"`

	// Title Title of the errata
	Title *string `json:"title,omitempty"`

	// Type Type of the errata
	Type *string `json:"type,omitempty"`

	// UpdatedDate UpdateDate of the errata
	UpdatedDate *string `json:"updated_date,omitempty"`
}

// ApiSnapshotErrataCollectionResponse defines model for api.SnapshotErrataCollectionResponse.
type ApiSnapshotErrataCollectionResponse struct {
	// Data List of errata
	Data  *[]ApiSnapshotErrata `json:"data,omitempty"`
	Links *ApiLinks            `json:"links,omitempty"`
	Meta  *ApiResponseMetadata `json:"meta,omitempty"`
}

// ApiSnapshotForDate defines model for api.SnapshotForDate.
type ApiSnapshotForDate struct {
	// IsAfter Is the snapshot after the specified date
	IsAfter *bool                `json:"is_after,omitempty"`
	Match   *ApiSnapshotResponse `json:"match,omitempty"`

	// RepositoryUuid Repository uuid for associated snapshot
	RepositoryUuid *string `json:"repository_uuid,omitempty"`
}

// ApiSnapshotResponse defines model for api.SnapshotResponse.
type ApiSnapshotResponse struct {
	// AddedCounts Count of each content type
	AddedCounts *map[string]int `json:"added_counts,omitempty"`

	// ContentCounts Count of each content type
	ContentCounts *map[string]int `json:"content_counts,omitempty"`

	// CreatedAt Datetime the snapshot was created
	CreatedAt *string `json:"created_at,omitempty"`

	// RemovedCounts Count of each content type
	RemovedCounts *map[string]int `json:"removed_counts,omitempty"`

	// RepositoryPath Path to repository snapshot contents
	RepositoryPath *string `json:"repository_path,omitempty"`

	// Url URL to the snapshot's content
	Url  *string `json:"url,omitempty"`
	Uuid *string `json:"uuid,omitempty"`
}

// ApiSnapshotRpm defines model for api.SnapshotRpm.
type ApiSnapshotRpm struct {
	// Arch The architecture of the rpm
	Arch *string `json:"arch,omitempty"`

	// Epoch The epoch of the rpm
	Epoch *string `json:"epoch,omitempty"`

	// Name The rpm package name
	Name *string `json:"name,omitempty"`

	// Release The release of the rpm
	Release *string `json:"release,omitempty"`

	// Summary The summary of the rpm
	Summary *string `json:"summary,omitempty"`

	// Version The version of the  rpm
	Version *string `json:"version,omitempty"`
}

// ApiSnapshotRpmCollectionResponse defines model for api.SnapshotRpmCollectionResponse.
type ApiSnapshotRpmCollectionResponse struct {
	// Data List of rpms
	Data  *[]ApiSnapshotRpm    `json:"data,omitempty"`
	Links *ApiLinks            `json:"links,omitempty"`
	Meta  *ApiResponseMetadata `json:"meta,omitempty"`
}

// ApiSnapshotSearchRpmRequest defines model for api.SnapshotSearchRpmRequest.
type ApiSnapshotSearchRpmRequest struct {
	// Limit Maximum number of records to return for the search
	Limit *int `json:"limit,omitempty"`

	// Search Search string to search rpm names
	Search *string `json:"search,omitempty"`

	// Uuids List of Snapshot UUIDs to search
	Uuids *[]string `json:"uuids,omitempty"`
}

// ApiTaskInfoCollectionResponse defines model for api.TaskInfoCollectionResponse.
type ApiTaskInfoCollectionResponse struct {
	// Data Requested Data
	Data  *[]ApiTaskInfoResponse `json:"data,omitempty"`
	Links *ApiLinks              `json:"links,omitempty"`
	Meta  *ApiResponseMetadata   `json:"meta,omitempty"`
}

// ApiTaskInfoResponse defines model for api.TaskInfoResponse.
type ApiTaskInfoResponse struct {
	// CreatedAt Timestamp of task creation
	CreatedAt *string `json:"created_at,omitempty"`

	// EndedAt Timestamp task ended running at
	EndedAt *string `json:"ended_at,omitempty"`

	// Error Error thrown while running task
	Error *string `json:"error,omitempty"`

	// OrgId Organization ID of the owner
	OrgId *string `json:"org_id,omitempty"`

	// RepositoryName Name of the associated repository
	RepositoryName *string `json:"repository_name,omitempty"`

	// RepositoryUuid UUID of the associated repository
	RepositoryUuid *string `json:"repository_uuid,omitempty"`

	// Status Status of task (running, failed, completed, canceled, pending)
	Status *string `json:"status,omitempty"`

	// Type Type of task
	Type *string `json:"type,omitempty"`

	// Uuid UUID of the object
	Uuid *string `json:"uuid,omitempty"`
}

// ApiTemplateCollectionResponse defines model for api.TemplateCollectionResponse.
type ApiTemplateCollectionResponse struct {
	// Data Requested Data
	Data  *[]ApiTemplateResponse `json:"data,omitempty"`
	Links *ApiLinks              `json:"links,omitempty"`
	Meta  *ApiResponseMetadata   `json:"meta,omitempty"`
}

// ApiTemplateRequest defines model for api.TemplateRequest.
type ApiTemplateRequest struct {
	// Arch Architecture of the template
	Arch *string `json:"arch,omitempty"`

	// Date Latest date to include snapshots for
	Date *string `json:"date,omitempty"`

	// Description Description of the template
	Description *string `json:"description,omitempty"`

	// Name Name of the template
	Name *string `json:"name,omitempty"`

	// RepositoryUuids Repositories to add to the template
	RepositoryUuids *[]string `json:"repository_uuids,omitempty"`

	// Version Version of the template
	Version *string `json:"version,omitempty"`
}

// ApiTemplateResponse defines model for api.TemplateResponse.
type ApiTemplateResponse struct {
	// Arch Architecture of the template
	Arch *string `json:"arch,omitempty"`

	// Date Latest date to include snapshots for
	Date *string `json:"date,omitempty"`

	// Description Description of the template
	Description *string `json:"description,omitempty"`

	// Name Name of the template
	Name *string `json:"name,omitempty"`

	// OrgId Organization ID of the owner
	OrgId *string `json:"org_id,omitempty"`

	// RepositoryUuids Repositories added to the template
	RepositoryUuids *[]string `json:"repository_uuids,omitempty"`
	Uuid            *string   `json:"uuid,omitempty"`

	// Version Version of the template
	Version *string `json:"version,omitempty"`
}

// ApiTemplateUpdateRequest defines model for api.TemplateUpdateRequest.
type ApiTemplateUpdateRequest struct {
	// Date Latest date to include snapshots for
	Date *string `json:"date,omitempty"`

	// Description Description of the template
	Description *string `json:"description,omitempty"`

	// RepositoryUuids Repositories to add to the template
	RepositoryUuids *[]string `json:"repository_uuids,omitempty"`
}

// ApiUUIDListRequest defines model for api.UUIDListRequest.
type ApiUUIDListRequest struct {
	Uuids *[]string `json:"uuids,omitempty"`
}

// ApiUrlValidationResponse defines model for api.UrlValidationResponse.
type ApiUrlValidationResponse struct {
	// Error Error message if the attribute is not valid
	Error *string `json:"error,omitempty"`

	// HttpCode If the metadata cannot be fetched successfully, the http code that is returned if the http request was completed
	HttpCode *int `json:"http_code,omitempty"`

	// MetadataPresent True if the metadata can be fetched successfully
	MetadataPresent *bool `json:"metadata_present,omitempty"`

	// MetadataSignaturePresent True if a repomd.xml.sig file was found in the repository
	MetadataSignaturePresent *bool `json:"metadata_signature_present,omitempty"`

	// Skipped Skipped if the URL is not passed in for validation
	Skipped *bool `json:"skipped,omitempty"`

	// Valid Valid if not skipped and the provided attribute is valid
	Valid *bool `json:"valid,omitempty"`
}

// ConfigDistributionArch defines model for config.DistributionArch.
type ConfigDistributionArch struct {
	// Label Static label of the architecture
	Label *string `json:"label,omitempty"`

	// Name Human-readable form of the architecture
	Name *string `json:"name,omitempty"`
}

// ConfigDistributionVersion defines model for config.DistributionVersion.
type ConfigDistributionVersion struct {
	// Label Static label of the version
	Label *string `json:"label,omitempty"`

	// Name Human-readable form of the version
	Name *string `json:"name,omitempty"`
}

// ErrorsErrorResponse defines model for errors.ErrorResponse.
type ErrorsErrorResponse struct {
	Errors *[]ErrorsHandlerError `json:"errors,omitempty"`
}

// ErrorsHandlerError defines model for errors.HandlerError.
type ErrorsHandlerError struct {
	// Detail An explanation specific to the problem
	Detail *string `json:"detail,omitempty"`

	// Status HTTP status code applicable to the error
	Status *int `json:"status,omitempty"`

	// Title A summary of the problem
	Title *string `json:"title,omitempty"`
}

// ListPopularRepositoriesParams defines parameters for ListPopularRepositories.
type ListPopularRepositoriesParams struct {
	// Offset Starting point for retrieving a subset of results. Determines how many items to skip from the beginning of the result set. Default value:`0`.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Number of items to include in response. Use it to control the number of items, particularly when dealing with large datasets. Default value: `100`.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Search Term to filter and retrieve items that match the specified search criteria. Search term can include name or URL.
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// ListPublicRepositoriesParams defines parameters for ListPublicRepositories.
type ListPublicRepositoriesParams struct {
	// Offset Starting point for retrieving a subset of results. Determines how many items to skip from the beginning of the result set. Default value:`0`.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Number of items to include in response. Use it to control the number of items, particularly when dealing with large datasets. Default value: `100`.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// ListRepositoriesParams defines parameters for ListRepositories.
type ListRepositoriesParams struct {
	// Offset Starting point for retrieving a subset of results. Determines how many items to skip from the beginning of the result set. Default value:`0`.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Number of items to include in response. Use it to control the number of items, particularly when dealing with large datasets. Default value: `100`.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Version A comma separated list of release versions to filter on. For example, `1,2` would return repositories with versions 1 or 2 only.
	Version *string `form:"version,omitempty" json:"version,omitempty"`

	// Arch A comma separated list of architectures or platforms for that you want to retrieve repositories. It controls responses where repositories support multiple architectures or platforms. For example, ‘x86_64,s390x' returns repositories with `x86_64` or `s390x` only.
	Arch *string `form:"arch,omitempty" json:"arch,omitempty"`

	// AvailableForVersion Filter repositories by supported release version. For example, `1` returns repositories with the version `1` or where version is not set.
	AvailableForVersion *string `form:"available_for_version,omitempty" json:"available_for_version,omitempty"`

	// AvailableForArch Filter repositories by architecture. For example, `x86_64` returns repositories with the version `x86_64` or where architecture is not set.
	AvailableForArch *string `form:"available_for_arch,omitempty" json:"available_for_arch,omitempty"`

	// Search Term to filter and retrieve items that match the specified search criteria. Search term can include name or URL.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Name Filter repositories by name.
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Url A comma separated list of URLs to control api response.
	Url *string `form:"url,omitempty" json:"url,omitempty"`

	// Uuid A comma separated list of UUIDs to control api response.
	Uuid *string `form:"uuid,omitempty" json:"uuid,omitempty"`

	// SortBy Sort the response data based on specific repository parameters. Sort criteria can include `name`, `url`, `status`, and `package_count`.
	SortBy *string `form:"sort_by,omitempty" json:"sort_by,omitempty"`

	// Status A comma separated list of statuses to control api response. Statuses can include `pending`, `valid`, `invalid`, `unavailable`.
	Status *string `form:"status,omitempty" json:"status,omitempty"`

	// Origin A comma separated list of origins to filter api response. Origins can include `red_hat` and `external`.
	Origin *string `form:"origin,omitempty" json:"origin,omitempty"`

	// ContentType content type of a repository to filter on (rpm)
	ContentType *string `form:"content_type,omitempty" json:"content_type,omitempty"`
}

// BulkCreateRepositoriesJSONBody defines parameters for BulkCreateRepositories.
type BulkCreateRepositoriesJSONBody = []ApiRepositoryRequest

// ListRepositoriesEnvironmentsParams defines parameters for ListRepositoriesEnvironments.
type ListRepositoriesEnvironmentsParams struct {
	// Limit Number of items to include in response. Use it to control the number of items, particularly when dealing with large datasets. Default value: `100`.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Starting point for retrieving a subset of results. Determines how many items to skip from the beginning of the result set. Default value:`0`.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Search Term to filter and retrieve items that match the specified search criteria. Search term can include name.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// SortBy Sort the response based on specific repository parameters. Sort criteria can include `id`, `name`, and `description`.
	SortBy *string `form:"sort_by,omitempty" json:"sort_by,omitempty"`
}

// ListRepositoriesPackageGroupsParams defines parameters for ListRepositoriesPackageGroups.
type ListRepositoriesPackageGroupsParams struct {
	// Limit Number of items to include in response. Use it to control the number of items, particularly when dealing with large datasets. Default value: `100`.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Starting point for retrieving a subset of results. Determines how many items to skip from the beginning of the result set. Default value:`0`.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Search Term to filter and retrieve items that match the specified search criteria. Search term can include name.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// SortBy Sort the response based on specific repository parameters. Sort criteria can include `id`, `name`, `description`, and `package_list`.
	SortBy *string `form:"sort_by,omitempty" json:"sort_by,omitempty"`
}

// ListRepositoriesRpmsParams defines parameters for ListRepositoriesRpms.
type ListRepositoriesRpmsParams struct {
	// Limit Number of items to include in response. Use it to control the number of items, particularly when dealing with large datasets. Default value: `100`.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Starting point for retrieving a subset of results. Determines how many items to skip from the beginning of the result set. Default value:`0`.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Search Term to filter and retrieve items that match the specified search criteria. Search term can include name.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// SortBy Sort the response based on specific repository parameters. Sort criteria can include `name`, `url`, `status`, and `package_count`.
	SortBy *string `form:"sort_by,omitempty" json:"sort_by,omitempty"`
}

// ValidateRepositoryParametersJSONBody defines parameters for ValidateRepositoryParameters.
type ValidateRepositoryParametersJSONBody = []ApiRepositoryValidationRequest

// ListSnapshotErrataParams defines parameters for ListSnapshotErrata.
type ListSnapshotErrataParams struct {
	// Limit Number of items to include in response. Use it to control the number of items, particularly when dealing with large datasets. Default value: `100`.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Starting point for retrieving a subset of results. Determines how many items to skip from the beginning of the result set. Default value:`0`.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Search Term to filter and retrieve items that match the specified search criteria. Search term can include name.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Type A comma separated list of types to control api response. Type can include `security`, `enhancement`, `bugfix`, and `other`.
	Type *string `form:"type,omitempty" json:"type,omitempty"`

	// Severity A comma separated list of severities to control api response. Severity can include `Important`, `Critical`, `Moderate`, `Low`, and `Unknown`.
	Severity *string `form:"severity,omitempty" json:"severity,omitempty"`

	// SortBy Sort the response based on specific parameters. Sort criteria can include `issued_date`, `updated_date`, `type`, and `severity`.
	SortBy *string `form:"sort_by,omitempty" json:"sort_by,omitempty"`
}

// ListSnapshotRpmsParams defines parameters for ListSnapshotRpms.
type ListSnapshotRpmsParams struct {
	// Limit Number of items to include in response. Use it to control the number of items, particularly when dealing with large datasets. Default value: `100`.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Starting point for retrieving a subset of results. Determines how many items to skip from the beginning of the result set. Default value:`0`.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Search Term to filter and retrieve items that match the specified search criteria. Search term can include name.
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// ListTasksParams defines parameters for ListTasks.
type ListTasksParams struct {
	// Offset Starting point for retrieving a subset of results. Determines how many items to skip from the beginning of the result set. Default value:`0`.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Number of items to include in response. Use it to control the number of items, particularly when dealing with large datasets. Default value: `100`.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Status A comma separated list of statuses to control response. Statuses can include `running`, `completed`, `failed`.
	Status *string `form:"status,omitempty" json:"status,omitempty"`

	// Type Filter results based on a specific task types. Helps to narrow down the results to a specific type. Task types can be `snapshot` or `introspect`.
	Type *string `form:"type,omitempty" json:"type,omitempty"`

	// RepositoryUuid A unique identifier of a repository to filter the results.
	RepositoryUuid *string `form:"repository_uuid,omitempty" json:"repository_uuid,omitempty"`
}

// ListTemplatesParams defines parameters for ListTemplates.
type ListTemplatesParams struct {
	// Offset Starting point for retrieving a subset of results. Determines how many items to skip from the beginning of the result set. Default value:`0`.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Number of items to include in response. Use it to control the number of items, particularly when dealing with large datasets. Default value: `100`.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Version Filter templates by version.
	Version *string `form:"version,omitempty" json:"version,omitempty"`

	// Arch Filter templates by architecture.
	Arch *string `form:"arch,omitempty" json:"arch,omitempty"`

	// Name Filter templates by name.
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// SortBy Sort the response data based on specific parameters. Sort criteria can include `name`, `arch`, and `version`.
	SortBy *string `form:"sort_by,omitempty" json:"sort_by,omitempty"`
}

// ListTemplateRpmsParams defines parameters for ListTemplateRpms.
type ListTemplateRpmsParams struct {
	// Limit Number of items to include in response. Use it to control the number of items, particularly when dealing with large datasets. Default value: `100`.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Starting point for retrieving a subset of results. Determines how many items to skip from the beginning of the result set. Default value:`0`.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Search Term to filter and retrieve items that match the specified search criteria. Search term can include name.
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// SearchEnvironmentsJSONRequestBody defines body for SearchEnvironments for application/json ContentType.
type SearchEnvironmentsJSONRequestBody = ApiContentUnitSearchRequest

// SearchPackageGroupJSONRequestBody defines body for SearchPackageGroup for application/json ContentType.
type SearchPackageGroupJSONRequestBody = ApiContentUnitSearchRequest

// CreateRepositoryJSONRequestBody defines body for CreateRepository for application/json ContentType.
type CreateRepositoryJSONRequestBody = ApiRepositoryRequest

// BulkCreateRepositoriesJSONRequestBody defines body for BulkCreateRepositories for application/json ContentType.
type BulkCreateRepositoriesJSONRequestBody = BulkCreateRepositoriesJSONBody

// BulkDeleteRepositoriesJSONRequestBody defines body for BulkDeleteRepositories for application/json ContentType.
type BulkDeleteRepositoriesJSONRequestBody = ApiUUIDListRequest

// PartialUpdateRepositoryJSONRequestBody defines body for PartialUpdateRepository for application/json ContentType.
type PartialUpdateRepositoryJSONRequestBody = ApiRepositoryRequest

// FullUpdateRepositoryJSONRequestBody defines body for FullUpdateRepository for application/json ContentType.
type FullUpdateRepositoryJSONRequestBody = ApiRepositoryRequest

// ValidateRepositoryParametersJSONRequestBody defines body for ValidateRepositoryParameters for application/json ContentType.
type ValidateRepositoryParametersJSONRequestBody = ValidateRepositoryParametersJSONBody

// SearchRpmJSONRequestBody defines body for SearchRpm for application/json ContentType.
type SearchRpmJSONRequestBody = ApiContentUnitSearchRequest

// DetectRpmJSONRequestBody defines body for DetectRpm for application/json ContentType.
type DetectRpmJSONRequestBody = ApiDetectRpmsRequest

// SearchSnapshotEnvironmentsJSONRequestBody defines body for SearchSnapshotEnvironments for application/json ContentType.
type SearchSnapshotEnvironmentsJSONRequestBody = ApiSnapshotSearchRpmRequest

// ListSnapshotsByDateJSONRequestBody defines body for ListSnapshotsByDate for application/json ContentType.
type ListSnapshotsByDateJSONRequestBody = ApiListSnapshotByDateRequest

// SearchSnapshotPackageGroupsJSONRequestBody defines body for SearchSnapshotPackageGroups for application/json ContentType.
type SearchSnapshotPackageGroupsJSONRequestBody = ApiSnapshotSearchRpmRequest

// SearchSnapshotRpmsJSONRequestBody defines body for SearchSnapshotRpms for application/json ContentType.
type SearchSnapshotRpmsJSONRequestBody = ApiSnapshotSearchRpmRequest

// CreateTemplateJSONRequestBody defines body for CreateTemplate for application/json ContentType.
type CreateTemplateJSONRequestBody = ApiTemplateRequest

// PartialUpdateTemplateJSONRequestBody defines body for PartialUpdateTemplate for application/json ContentType.
type PartialUpdateTemplateJSONRequestBody = ApiTemplateUpdateRequest

// FullUpdateTemplateJSONRequestBody defines body for FullUpdateTemplate for application/json ContentType.
type FullUpdateTemplateJSONRequestBody = ApiTemplateUpdateRequest
